{
  "id": "sql-dql-2025",
  "title": "SQL DQL - Daten abfragen",
  "description": "Lerne die Data Query Language (DQL) mit SELECT, WHERE, JOIN, GROUP BY und mehr aus dem IHK Prüfungsbeiblatt. Dies ist der wichtigste Teil von SQL für die Prüfung!",
  "category": "FÜ-02",
  "subcategory": "SQL - Data Query Language",
  "difficulty": "intermediate",
  "examRelevance": "high",
  "newIn2025": true,
  "removedIn2025": false,
  "important": true,
  "estimatedTime": 60,
  "prerequisites": [
    "sql-ddl-2025",
    "sql-dml-2025"
  ],
  "tags": [
    "SQL",
    "DQL",
    "SELECT",
    "WHERE",
    "JOIN",
    "GROUP BY",
    "Subquery",
    "Datenbank",
    "Prüfungsbeiblatt"
  ],
  "content": "# SQL DQL - Data Query Language\n\n## Einführung\n\nDie **Data Query Language (DQL)** ist der wichtigste Teil von SQL für die Prüfung! Mit DQL-Befehlen fragst du Daten aus Datenbanken ab. Der Hauptbefehl ist **SELECT**.\n\n**Wichtig:** Diese Befehle sind im SQL-Beiblatt enthalten und machen den Großteil der SQL-Aufgaben in der Prüfung aus!\n\n## SELECT - Grundlagen\n\n### Alle Spalten auswählen\n\n```sql\nSELECT *\nFROM mitarbeiter;\n```\n\n**Hinweis:** `*` bedeutet \"alle Spalten\". In der Praxis solltest du nur die benötigten Spalten auswählen!\n\n### Bestimmte Spalten auswählen (Projektion)\n\n```sql\nSELECT vorname, nachname, email\nFROM mitarbeiter;\n```\n\n### Spalten umbenennen (Alias)\n\n```sql\nSELECT \n    vorname AS \"Vorname\",\n    nachname AS \"Nachname\",\n    gehalt AS \"Monatsgehalt\"\nFROM mitarbeiter;\n```\n\n### Berechnungen in SELECT\n\n```sql\nSELECT \n    vorname,\n    nachname,\n    gehalt,\n    gehalt * 12 AS jahresgehalt,\n    gehalt * 0.19 AS steuern\nFROM mitarbeiter;\n```\n\n## WHERE - Daten filtern (Selektion)\n\n### Einfache Bedingungen\n\n```sql\n-- Gleichheit\nSELECT * FROM mitarbeiter\nWHERE abteilung_id = 1;\n\n-- Ungleichheit\nSELECT * FROM mitarbeiter\nWHERE abteilung_id != 2;\n-- oder\nSELECT * FROM mitarbeiter\nWHERE abteilung_id <> 2;\n\n-- Vergleiche\nSELECT * FROM mitarbeiter\nWHERE gehalt > 50000;\n\nSELECT * FROM mitarbeiter\nWHERE gehalt >= 40000;\n\nSELECT * FROM mitarbeiter\nWHERE einstellungsdatum < '2020-01-01';\n```\n\n### Logische Operatoren (AND, OR, NOT)\n\n```sql\n-- AND: Beide Bedingungen müssen erfüllt sein\nSELECT * FROM mitarbeiter\nWHERE gehalt > 40000 AND abteilung_id = 1;\n\n-- OR: Mindestens eine Bedingung muss erfüllt sein\nSELECT * FROM mitarbeiter\nWHERE abteilung_id = 1 OR abteilung_id = 2;\n\n-- NOT: Negation\nSELECT * FROM mitarbeiter\nWHERE NOT abteilung_id = 3;\n\n-- Kombination mit Klammern\nSELECT * FROM mitarbeiter\nWHERE (abteilung_id = 1 OR abteilung_id = 2)\n  AND gehalt > 45000;\n```\n\n### BETWEEN - Bereichsabfragen\n\n```sql\nSELECT * FROM mitarbeiter\nWHERE gehalt BETWEEN 40000 AND 60000;\n\n-- Entspricht:\nSELECT * FROM mitarbeiter\nWHERE gehalt >= 40000 AND gehalt <= 60000;\n```\n\n### IN - Mehrere Werte\n\n```sql\nSELECT * FROM mitarbeiter\nWHERE abteilung_id IN (1, 2, 3);\n\n-- Entspricht:\nSELECT * FROM mitarbeiter\nWHERE abteilung_id = 1 \n   OR abteilung_id = 2 \n   OR abteilung_id = 3;\n```\n\n### LIKE - Mustersuche\n\n```sql\n-- % = beliebig viele Zeichen\nSELECT * FROM mitarbeiter\nWHERE nachname LIKE 'M%';  -- Beginnt mit M\n\nSELECT * FROM mitarbeiter\nWHERE nachname LIKE '%er';  -- Endet mit er\n\nSELECT * FROM mitarbeiter\nWHERE email LIKE '%@gmail.com';  -- Gmail-Adressen\n\n-- _ = genau ein Zeichen\nSELECT * FROM mitarbeiter\nWHERE vorname LIKE 'T_m';  -- Tom, Tim, etc.\n```\n\n### IS NULL / IS NOT NULL\n\n```sql\n-- Mitarbeiter ohne Telefonnummer\nSELECT * FROM mitarbeiter\nWHERE telefon IS NULL;\n\n-- Mitarbeiter mit Telefonnummer\nSELECT * FROM mitarbeiter\nWHERE telefon IS NOT NULL;\n```\n\n**Wichtig:** Verwende niemals `= NULL`, sondern immer `IS NULL`!\n\n## ORDER BY - Sortieren\n\n### Aufsteigend sortieren (ASC)\n\n```sql\nSELECT * FROM mitarbeiter\nORDER BY nachname ASC;\n\n-- ASC ist Standard und kann weggelassen werden\nSELECT * FROM mitarbeiter\nORDER BY nachname;\n```\n\n### Absteigend sortieren (DESC)\n\n```sql\nSELECT * FROM mitarbeiter\nORDER BY gehalt DESC;\n```\n\n### Nach mehreren Spalten sortieren\n\n```sql\nSELECT * FROM mitarbeiter\nORDER BY abteilung_id ASC, gehalt DESC;\n-- Erst nach Abteilung aufsteigend, dann nach Gehalt absteigend\n```\n\n## Aggregatfunktionen\n\n### COUNT - Anzahl zählen\n\n```sql\n-- Alle Zeilen zählen\nSELECT COUNT(*) FROM mitarbeiter;\n\n-- Nicht-NULL Werte zählen\nSELECT COUNT(telefon) FROM mitarbeiter;\n\n-- Eindeutige Werte zählen\nSELECT COUNT(DISTINCT abteilung_id) FROM mitarbeiter;\n```\n\n### SUM - Summe berechnen\n\n```sql\nSELECT SUM(gehalt) AS gesamtgehalt\nFROM mitarbeiter;\n```\n\n### AVG - Durchschnitt berechnen\n\n```sql\nSELECT AVG(gehalt) AS durchschnittsgehalt\nFROM mitarbeiter;\n```\n\n### MIN und MAX - Minimum und Maximum\n\n```sql\nSELECT \n    MIN(gehalt) AS niedrigstes_gehalt,\n    MAX(gehalt) AS hoechstes_gehalt\nFROM mitarbeiter;\n```\n\n## GROUP BY - Gruppieren\n\n### Grundlegendes Gruppieren\n\n```sql\n-- Anzahl Mitarbeiter pro Abteilung\nSELECT abteilung_id, COUNT(*) AS anzahl_mitarbeiter\nFROM mitarbeiter\nGROUP BY abteilung_id;\n```\n\n### Mehrere Aggregatfunktionen\n\n```sql\nSELECT \n    abteilung_id,\n    COUNT(*) AS anzahl,\n    AVG(gehalt) AS durchschnitt,\n    MIN(gehalt) AS minimum,\n    MAX(gehalt) AS maximum\nFROM mitarbeiter\nGROUP BY abteilung_id;\n```\n\n### HAVING - Gruppen filtern\n\n```sql\n-- Nur Abteilungen mit mehr als 5 Mitarbeitern\nSELECT abteilung_id, COUNT(*) AS anzahl\nFROM mitarbeiter\nGROUP BY abteilung_id\nHAVING COUNT(*) > 5;\n```\n\n**Wichtig:** \n- WHERE filtert VOR dem Gruppieren\n- HAVING filtert NACH dem Gruppieren\n\n```sql\n-- Abteilungen mit mehr als 3 Mitarbeitern, die mehr als 40000 verdienen\nSELECT abteilung_id, COUNT(*) AS anzahl\nFROM mitarbeiter\nWHERE gehalt > 40000\nGROUP BY abteilung_id\nHAVING COUNT(*) > 3;\n```\n\n## JOIN - Tabellen verknüpfen\n\n### INNER JOIN - Nur übereinstimmende Zeilen\n\n```sql\nSELECT \n    m.vorname,\n    m.nachname,\n    a.name AS abteilung\nFROM mitarbeiter m\nINNER JOIN abteilung a ON m.abteilung_id = a.abteilung_id;\n```\n\n### LEFT JOIN - Alle Zeilen aus linker Tabelle\n\n```sql\n-- Alle Mitarbeiter, auch ohne Abteilung\nSELECT \n    m.vorname,\n    m.nachname,\n    a.name AS abteilung\nFROM mitarbeiter m\nLEFT JOIN abteilung a ON m.abteilung_id = a.abteilung_id;\n```\n\n### RIGHT JOIN - Alle Zeilen aus rechter Tabelle\n\n```sql\n-- Alle Abteilungen, auch ohne Mitarbeiter\nSELECT \n    a.name AS abteilung,\n    m.vorname,\n    m.nachname\nFROM mitarbeiter m\nRIGHT JOIN abteilung a ON m.abteilung_id = a.abteilung_id;\n```\n\n### Mehrere JOINs\n\n```sql\nSELECT \n    m.vorname,\n    m.nachname,\n    a.name AS abteilung,\n    p.name AS projekt\nFROM mitarbeiter m\nINNER JOIN abteilung a ON m.abteilung_id = a.abteilung_id\nINNER JOIN mitarbeiter_projekt mp ON m.mitarbeiter_id = mp.mitarbeiter_id\nINNER JOIN projekt p ON mp.projekt_id = p.projekt_id;\n```\n\n## Subqueries (Unterabfragen)\n\n### Subquery in WHERE\n\n```sql\n-- Mitarbeiter mit überdurchschnittlichem Gehalt\nSELECT vorname, nachname, gehalt\nFROM mitarbeiter\nWHERE gehalt > (\n    SELECT AVG(gehalt)\n    FROM mitarbeiter\n);\n```\n\n### Subquery mit IN\n\n```sql\n-- Mitarbeiter aus Abteilungen in Berlin\nSELECT vorname, nachname\nFROM mitarbeiter\nWHERE abteilung_id IN (\n    SELECT abteilung_id\n    FROM abteilung\n    WHERE standort = 'Berlin'\n);\n```\n\n### Subquery in SELECT\n\n```sql\nSELECT \n    vorname,\n    nachname,\n    gehalt,\n    (SELECT AVG(gehalt) FROM mitarbeiter) AS durchschnitt,\n    gehalt - (SELECT AVG(gehalt) FROM mitarbeiter) AS differenz\nFROM mitarbeiter;\n```\n\n## DISTINCT - Duplikate entfernen\n\n```sql\n-- Alle verschiedenen Abteilungs-IDs\nSELECT DISTINCT abteilung_id\nFROM mitarbeiter;\n\n-- Alle verschiedenen Kombinationen\nSELECT DISTINCT abteilung_id, standort\nFROM abteilung;\n```\n\n## LIMIT - Anzahl begrenzen\n\n```sql\n-- Die 5 bestbezahlten Mitarbeiter\nSELECT vorname, nachname, gehalt\nFROM mitarbeiter\nORDER BY gehalt DESC\nLIMIT 5;\n\n-- Mit OFFSET (überspringt erste 10 Zeilen)\nSELECT vorname, nachname\nFROM mitarbeiter\nORDER BY nachname\nLIMIT 10 OFFSET 10;\n```\n\n## Komplexes Praxisbeispiel\n\n```sql\n-- Finde alle Abteilungen mit:\n-- - Mehr als 3 Mitarbeitern\n-- - Durchschnittsgehalt über 45000\n-- - Standort in Berlin oder München\n-- Zeige: Abteilungsname, Anzahl Mitarbeiter, Durchschnittsgehalt\n-- Sortiert nach Durchschnittsgehalt absteigend\n\nSELECT \n    a.name AS abteilung,\n    a.standort,\n    COUNT(m.mitarbeiter_id) AS anzahl_mitarbeiter,\n    ROUND(AVG(m.gehalt), 2) AS durchschnittsgehalt,\n    MIN(m.gehalt) AS min_gehalt,\n    MAX(m.gehalt) AS max_gehalt\nFROM abteilung a\nINNER JOIN mitarbeiter m ON a.abteilung_id = m.abteilung_id\nWHERE a.standort IN ('Berlin', 'München')\nGROUP BY a.abteilung_id, a.name, a.standort\nHAVING COUNT(m.mitarbeiter_id) > 3\n   AND AVG(m.gehalt) > 45000\nORDER BY durchschnittsgehalt DESC;\n```\n\n## Wichtige Hinweise für die Prüfung\n\n### 1. SELECT-Reihenfolge (Schreibweise)\n\n```sql\nSELECT      -- 1. Was soll ausgegeben werden?\n    spalten\nFROM        -- 2. Aus welcher Tabelle?\n    tabelle\nWHERE       -- 3. Welche Zeilen? (vor Gruppierung)\n    bedingung\nGROUP BY    -- 4. Gruppieren?\n    spalten\nHAVING      -- 5. Welche Gruppen? (nach Gruppierung)\n    bedingung\nORDER BY    -- 6. Sortierung?\n    spalten\nLIMIT       -- 7. Anzahl begrenzen?\n    anzahl;\n```\n\n### 2. Ausführungsreihenfolge (intern)\n\n1. FROM (Tabellen laden)\n2. WHERE (Zeilen filtern)\n3. GROUP BY (Gruppieren)\n4. HAVING (Gruppen filtern)\n5. SELECT (Spalten auswählen)\n6. ORDER BY (Sortieren)\n7. LIMIT (Begrenzen)\n\n### 3. Häufige Fehler\n\n```sql\n-- FALSCH: Spalte nicht in GROUP BY\nSELECT abteilung_id, vorname, COUNT(*)\nFROM mitarbeiter\nGROUP BY abteilung_id;\n-- vorname muss auch in GROUP BY oder eine Aggregatfunktion sein!\n\n-- RICHTIG:\nSELECT abteilung_id, COUNT(*)\nFROM mitarbeiter\nGROUP BY abteilung_id;\n\n-- FALSCH: WHERE mit Aggregatfunktion\nSELECT abteilung_id, COUNT(*)\nFROM mitarbeiter\nWHERE COUNT(*) > 5\nGROUP BY abteilung_id;\n-- Verwende HAVING statt WHERE!\n\n-- RICHTIG:\nSELECT abteilung_id, COUNT(*)\nFROM mitarbeiter\nGROUP BY abteilung_id\nHAVING COUNT(*) > 5;\n```\n\n## Zusammenfassung\n\n- **SELECT**: Spalten auswählen (Projektion)\n- **FROM**: Tabelle(n) angeben\n- **WHERE**: Zeilen filtern (Selektion)\n- **JOIN**: Tabellen verknüpfen\n- **GROUP BY**: Zeilen gruppieren\n- **HAVING**: Gruppen filtern\n- **ORDER BY**: Ergebnis sortieren\n- **LIMIT**: Anzahl begrenzen\n- **Aggregatfunktionen**: COUNT, SUM, AVG, MIN, MAX\n- **Subqueries**: Abfragen in Abfragen\n- **DISTINCT**: Duplikate entfernen",
  "codeExamples": [
    {
      "language": "sql",
      "title": "Einfache SELECT-Abfrage",
      "code": "SELECT vorname, nachname, email\nFROM mitarbeiter\nWHERE abteilung_id = 1\nORDER BY nachname;",
      "explanation": "Wählt bestimmte Spalten aus, filtert nach Abteilung und sortiert nach Nachname"
    },
    {
      "language": "sql",
      "title": "JOIN mit Aggregation",
      "code": "SELECT \n    a.name AS abteilung,\n    COUNT(m.mitarbeiter_id) AS anzahl,\n    AVG(m.gehalt) AS durchschnitt\nFROM abteilung a\nLEFT JOIN mitarbeiter m ON a.abteilung_id = m.abteilung_id\nGROUP BY a.abteilung_id, a.name\nORDER BY anzahl DESC;",
      "explanation": "Zeigt Abteilungen mit Mitarbeiteranzahl und Durchschnittsgehalt"
    },
    {
      "language": "sql",
      "title": "Subquery Beispiel",
      "code": "SELECT vorname, nachname, gehalt\nFROM mitarbeiter\nWHERE gehalt > (\n    SELECT AVG(gehalt)\n    FROM mitarbeiter\n)\nORDER BY gehalt DESC;",
      "explanation": "Findet alle Mitarbeiter mit überdurchschnittlichem Gehalt"
    },
    {
      "language": "sql",
      "title": "Komplexe Abfrage",
      "code": "SELECT \n    p.name AS projekt,\n    COUNT(DISTINCT m.mitarbeiter_id) AS team_groesse,\n    SUM(p.budget) AS gesamtbudget\nFROM projekt p\nINNER JOIN mitarbeiter_projekt mp ON p.projekt_id = mp.projekt_id\nINNER JOIN mitarbeiter m ON mp.mitarbeiter_id = m.mitarbeiter_id\nWHERE p.startdatum >= '2024-01-01'\nGROUP BY p.projekt_id, p.name\nHAVING COUNT(DISTINCT m.mitarbeiter_id) >= 3\nORDER BY gesamtbudget DESC\nLIMIT 10;",
      "explanation": "Top 10 Projekte ab 2024 mit mindestens 3 Teammitgliedern"
    }
  ],
  "exercises": [
    {
      "title": "Übung 1: Einfache SELECT-Abfrage",
      "description": "Wähle alle Mitarbeiter aus, die mehr als 50000 verdienen. Zeige nur Vorname, Nachname und Gehalt. Sortiere nach Gehalt absteigend.",
      "difficulty": "beginner",
      "solution": "SELECT vorname, nachname, gehalt\nFROM mitarbeiter\nWHERE gehalt > 50000\nORDER BY gehalt DESC;"
    },
    {
      "title": "Übung 2: WHERE mit mehreren Bedingungen",
      "description": "Finde alle Mitarbeiter aus Abteilung 1 oder 2, die nach dem 1. Januar 2020 eingestellt wurden und mehr als 40000 verdienen.",
      "difficulty": "beginner",
      "solution": "SELECT *\nFROM mitarbeiter\nWHERE (abteilung_id = 1 OR abteilung_id = 2)\n  AND einstellungsdatum > '2020-01-01'\n  AND gehalt > 40000;"
    },
    {
      "title": "Übung 3: Aggregatfunktionen",
      "description": "Berechne für jede Abteilung: Anzahl Mitarbeiter, Durchschnittsgehalt, Minimum und Maximum. Sortiere nach Durchschnittsgehalt absteigend.",
      "difficulty": "intermediate",
      "solution": "SELECT \n    abteilung_id,\n    COUNT(*) AS anzahl,\n    AVG(gehalt) AS durchschnitt,\n    MIN(gehalt) AS minimum,\n    MAX(gehalt) AS maximum\nFROM mitarbeiter\nGROUP BY abteilung_id\nORDER BY durchschnitt DESC;"
    },
    {
      "title": "Übung 4: INNER JOIN",
      "description": "Zeige alle Mitarbeiter mit ihrem Abteilungsnamen und Standort. Zeige nur Mitarbeiter, die einer Abteilung zugeordnet sind.",
      "difficulty": "intermediate",
      "solution": "SELECT \n    m.vorname,\n    m.nachname,\n    a.name AS abteilung,\n    a.standort\nFROM mitarbeiter m\nINNER JOIN abteilung a ON m.abteilung_id = a.abteilung_id;"
    },
    {
      "title": "Übung 5: LEFT JOIN mit NULL-Prüfung",
      "description": "Finde alle Mitarbeiter, die KEINER Abteilung zugeordnet sind. Verwende einen LEFT JOIN.",
      "difficulty": "intermediate",
      "solution": "SELECT \n    m.vorname,\n    m.nachname,\n    m.email\nFROM mitarbeiter m\nLEFT JOIN abteilung a ON m.abteilung_id = a.abteilung_id\nWHERE a.abteilung_id IS NULL;"
    },
    {
      "title": "Übung 6: Subquery",
      "description": "Finde alle Mitarbeiter, die in der gleichen Abteilung arbeiten wie 'Max Mustermann'. Schließe Max Mustermann selbst aus.",
      "difficulty": "advanced",
      "solution": "SELECT vorname, nachname, abteilung_id\nFROM mitarbeiter\nWHERE abteilung_id = (\n    SELECT abteilung_id\n    FROM mitarbeiter\n    WHERE vorname = 'Max' AND nachname = 'Mustermann'\n)\nAND NOT (vorname = 'Max' AND nachname = 'Mustermann');"
    },
    {
      "title": "Übung 7: HAVING Klausel",
      "description": "Zeige alle Abteilungen, die mehr als 5 Mitarbeiter haben UND ein Durchschnittsgehalt über 45000. Zeige Abteilungs-ID, Anzahl und Durchschnitt.",
      "difficulty": "advanced",
      "solution": "SELECT \n    abteilung_id,\n    COUNT(*) AS anzahl,\n    AVG(gehalt) AS durchschnitt\nFROM mitarbeiter\nGROUP BY abteilung_id\nHAVING COUNT(*) > 5 AND AVG(gehalt) > 45000;"
    },
    {
      "title": "Übung 8: Mehrere JOINs",
      "description": "Zeige alle Projekte mit den zugeordneten Mitarbeitern und deren Abteilungen. Zeige: Projektname, Mitarbeitername, Abteilungsname, Rolle im Projekt.",
      "difficulty": "advanced",
      "solution": "SELECT \n    p.name AS projekt,\n    m.vorname,\n    m.nachname,\n    a.name AS abteilung,\n    mp.rolle\nFROM projekt p\nINNER JOIN mitarbeiter_projekt mp ON p.projekt_id = mp.projekt_id\nINNER JOIN mitarbeiter m ON mp.mitarbeiter_id = m.mitarbeiter_id\nINNER JOIN abteilung a ON m.abteilung_id = a.abteilung_id\nORDER BY p.name, m.nachname;"
    },
    {
      "title": "Übung 9: Komplexe Abfrage",
      "description": "Finde die Top 3 Abteilungen mit dem höchsten Gesamtgehalt (Summe aller Mitarbeitergehälter). Zeige: Abteilungsname, Standort, Anzahl Mitarbeiter, Gesamtgehalt. Nur Abteilungen in Berlin oder München.",
      "difficulty": "advanced",
      "solution": "SELECT \n    a.name AS abteilung,\n    a.standort,\n    COUNT(m.mitarbeiter_id) AS anzahl,\n    SUM(m.gehalt) AS gesamtgehalt\nFROM abteilung a\nINNER JOIN mitarbeiter m ON a.abteilung_id = m.abteilung_id\nWHERE a.standort IN ('Berlin', 'München')\nGROUP BY a.abteilung_id, a.name, a.standort\nORDER BY gesamtgehalt DESC\nLIMIT 3;"
    },
    {
      "title": "Übung 10: Subquery mit IN",
      "description": "Finde alle Mitarbeiter, die an Projekten mit einem Budget über 100000 arbeiten. Zeige: Vorname, Nachname, Email. Keine Duplikate!",
      "difficulty": "advanced",
      "solution": "SELECT DISTINCT m.vorname, m.nachname, m.email\nFROM mitarbeiter m\nINNER JOIN mitarbeiter_projekt mp ON m.mitarbeiter_id = mp.mitarbeiter_id\nWHERE mp.projekt_id IN (\n    SELECT projekt_id\n    FROM projekt\n    WHERE budget > 100000\n)\nORDER BY m.nachname;"
    }
  ],
  "relatedQuizzes": [
    "sql-comprehensive-quiz-2025"
  ],
  "resources": [
    {
      "title": "SQL Tutorial - SELECT",
      "url": "https://www.w3schools.com/sql/sql_select.asp",
      "type": "documentation"
    },
    {
      "title": "SQL JOIN Visualizer",
      "url": "https://sql-joins.leopard.in.ua/",
      "type": "article"
    }
  ],
  "lastUpdated": "2025-01-10T00:00:00Z",
  "version": "1.0",
  "learningObjectives": [
    "Understand SQL",
    "Understand DQL",
    "Understand SELECT",
    "Understand WHERE",
    "Understand JOIN"
  ]
}
