{
  "id": "sql-ddl-2025",
  "title": "SQL DDL - Datenstrukturen definieren",
  "description": "Lerne die Data Definition Language (DDL) Befehle CREATE TABLE, ALTER TABLE und CREATE INDEX aus dem IHK Prüfungsbeiblatt. Diese Befehle werden verwendet, um Datenbankstrukturen zu erstellen und zu ändern.",
  "category": "FÜ-02",
  "subcategory": "SQL - Data Definition Language",
  "difficulty": "beginner",
  "examRelevance": "high",
  "newIn2025": true,
  "removedIn2025": false,
  "important": true,
  "estimatedTime": 45,
  "prerequisites": [],
  "tags": ["SQL", "DDL", "CREATE TABLE", "ALTER TABLE", "CREATE INDEX", "Datenbank", "Prüfungsbeiblatt"],
  "content": "# SQL DDL - Data Definition Language\n\n## Einführung\n\nDie **Data Definition Language (DDL)** ist ein Teil von SQL, der verwendet wird, um die Struktur von Datenbanken zu definieren und zu ändern. Mit DDL-Befehlen kannst du Tabellen erstellen, ändern und löschen sowie Indizes für bessere Performance anlegen.\n\n**Wichtig für die Prüfung:** Diese Befehle sind im 2-seitigen SQL-Beiblatt enthalten, das du in der IHK-Prüfung erhältst!\n\n## CREATE TABLE - Tabellen erstellen\n\n### Syntax\n\n```sql\nCREATE TABLE table_name (\n    column1 datatype constraints,\n    column2 datatype constraints,\n    ...\n);\n```\n\n### Wichtige Datentypen\n\n- **INT** / **INTEGER**: Ganzzahlen\n- **VARCHAR(n)**: Variable Zeichenkette mit maximaler Länge n\n- **CHAR(n)**: Feste Zeichenkette mit Länge n\n- **DATE**: Datum (YYYY-MM-DD)\n- **DECIMAL(p,s)**: Dezimalzahl mit p Stellen, davon s Nachkommastellen\n- **BOOLEAN**: Wahrheitswert (TRUE/FALSE)\n\n### Wichtige Constraints (Einschränkungen)\n\n- **PRIMARY KEY**: Primärschlüssel (eindeutig, nicht NULL)\n- **FOREIGN KEY**: Fremdschlüssel (Verweis auf andere Tabelle)\n- **NOT NULL**: Wert darf nicht leer sein\n- **UNIQUE**: Wert muss eindeutig sein\n- **DEFAULT**: Standardwert, wenn nichts angegeben wird\n- **CHECK**: Bedingung, die erfüllt sein muss\n\n### Beispiel: Mitarbeiter-Tabelle\n\n```sql\nCREATE TABLE mitarbeiter (\n    mitarbeiter_id INT PRIMARY KEY,\n    vorname VARCHAR(50) NOT NULL,\n    nachname VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    gehalt DECIMAL(10,2) CHECK (gehalt > 0),\n    einstellungsdatum DATE DEFAULT CURRENT_DATE,\n    abteilung_id INT,\n    FOREIGN KEY (abteilung_id) REFERENCES abteilung(abteilung_id)\n);\n```\n\n**Erklärung:**\n- `mitarbeiter_id` ist der Primärschlüssel\n- `vorname` und `nachname` dürfen nicht leer sein\n- `email` muss eindeutig sein\n- `gehalt` muss größer als 0 sein\n- `einstellungsdatum` hat einen Standardwert (heutiges Datum)\n- `abteilung_id` ist ein Fremdschlüssel zur Tabelle `abteilung`\n\n## ALTER TABLE - Tabellen ändern\n\n### Spalte hinzufügen\n\n```sql\nALTER TABLE table_name\nADD column_name datatype;\n```\n\n**Beispiel:**\n```sql\nALTER TABLE mitarbeiter\nADD telefon VARCHAR(20);\n```\n\n### Spalte löschen\n\n```sql\nALTER TABLE table_name\nDROP COLUMN column_name;\n```\n\n**Beispiel:**\n```sql\nALTER TABLE mitarbeiter\nDROP COLUMN telefon;\n```\n\n### Spalte ändern (je nach DBMS unterschiedlich)\n\n```sql\n-- MySQL/MariaDB\nALTER TABLE mitarbeiter\nMODIFY COLUMN gehalt DECIMAL(12,2);\n\n-- PostgreSQL\nALTER TABLE mitarbeiter\nALTER COLUMN gehalt TYPE DECIMAL(12,2);\n```\n\n## CREATE INDEX - Indizes erstellen\n\n### Was ist ein Index?\n\nEin **Index** ist wie ein Inhaltsverzeichnis in einem Buch. Er beschleunigt Suchabfragen erheblich, indem er einen schnellen Zugriff auf Daten ermöglicht.\n\n**Vorteile:**\n- Schnellere SELECT-Abfragen\n- Schnellere WHERE-Bedingungen\n- Schnellere JOIN-Operationen\n\n**Nachteile:**\n- Zusätzlicher Speicherplatz\n- Langsamere INSERT/UPDATE/DELETE-Operationen\n\n### Syntax\n\n```sql\nCREATE INDEX index_name\nON table_name (column_name);\n```\n\n### Beispiele\n\n**Einfacher Index:**\n```sql\nCREATE INDEX idx_nachname\nON mitarbeiter (nachname);\n```\n\n**Zusammengesetzter Index (mehrere Spalten):**\n```sql\nCREATE INDEX idx_name\nON mitarbeiter (nachname, vorname);\n```\n\n**Eindeutiger Index:**\n```sql\nCREATE UNIQUE INDEX idx_email\nON mitarbeiter (email);\n```\n\n## Praxisbeispiel: Projektdatenbank\n\nLass uns eine kleine Projektdatenbank erstellen:\n\n```sql\n-- Abteilungen\nCREATE TABLE abteilung (\n    abteilung_id INT PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    standort VARCHAR(100)\n);\n\n-- Mitarbeiter\nCREATE TABLE mitarbeiter (\n    mitarbeiter_id INT PRIMARY KEY,\n    vorname VARCHAR(50) NOT NULL,\n    nachname VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    gehalt DECIMAL(10,2) CHECK (gehalt > 0),\n    abteilung_id INT,\n    FOREIGN KEY (abteilung_id) REFERENCES abteilung(abteilung_id)\n);\n\n-- Projekte\nCREATE TABLE projekt (\n    projekt_id INT PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    budget DECIMAL(12,2),\n    startdatum DATE,\n    enddatum DATE,\n    CHECK (enddatum >= startdatum)\n);\n\n-- Mitarbeiter-Projekt Zuordnung (n:m Beziehung)\nCREATE TABLE mitarbeiter_projekt (\n    mitarbeiter_id INT,\n    projekt_id INT,\n    rolle VARCHAR(50),\n    PRIMARY KEY (mitarbeiter_id, projekt_id),\n    FOREIGN KEY (mitarbeiter_id) REFERENCES mitarbeiter(mitarbeiter_id),\n    FOREIGN KEY (projekt_id) REFERENCES projekt(projekt_id)\n);\n\n-- Indizes für bessere Performance\nCREATE INDEX idx_mitarbeiter_nachname ON mitarbeiter(nachname);\nCREATE INDEX idx_projekt_name ON projekt(name);\nCREATE INDEX idx_mitarbeiter_abteilung ON mitarbeiter(abteilung_id);\n```\n\n## Wichtige Hinweise für die Prüfung\n\n1. **Reihenfolge beachten**: Tabellen mit Fremdschlüsseln müssen nach den referenzierten Tabellen erstellt werden\n2. **Constraints**: PRIMARY KEY ist automatisch NOT NULL und UNIQUE\n3. **Datentypen**: Wähle passende Datentypen (VARCHAR für Text, INT für Zahlen, DATE für Datum)\n4. **Indizes**: Erstelle Indizes auf Spalten, die häufig in WHERE, JOIN oder ORDER BY verwendet werden\n5. **Namenskonventionen**: Verwende aussagekräftige Namen (z.B. `mitarbeiter_id` statt `id`)\n\n## Zusammenfassung\n\n- **CREATE TABLE**: Erstellt neue Tabellen mit Spalten und Constraints\n- **ALTER TABLE ADD**: Fügt neue Spalten hinzu\n- **ALTER TABLE DROP COLUMN**: Entfernt Spalten\n- **CREATE INDEX**: Erstellt Indizes für schnellere Abfragen\n- **Constraints**: PRIMARY KEY, FOREIGN KEY, NOT NULL, UNIQUE, CHECK, DEFAULT\n- **Indizes**: Beschleunigen Abfragen, verlangsamen aber Schreiboperationen",
  "codeExamples": [
    {
      "language": "sql",
      "title": "Einfache Tabelle erstellen",
      "code": "CREATE TABLE kunde (\n    kunde_id INT PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE\n);",
      "explanation": "Erstellt eine Kunden-Tabelle mit Primärschlüssel, Pflichtfeld und eindeutiger E-Mail"
    },
    {
      "language": "sql",
      "title": "Tabelle mit Fremdschlüssel",
      "code": "CREATE TABLE bestellung (\n    bestellung_id INT PRIMARY KEY,\n    kunde_id INT NOT NULL,\n    bestelldatum DATE DEFAULT CURRENT_DATE,\n    gesamtbetrag DECIMAL(10,2) CHECK (gesamtbetrag >= 0),\n    FOREIGN KEY (kunde_id) REFERENCES kunde(kunde_id)\n);",
      "explanation": "Erstellt eine Bestellungs-Tabelle mit Fremdschlüssel zur Kunden-Tabelle"
    },
    {
      "language": "sql",
      "title": "Spalte hinzufügen",
      "code": "ALTER TABLE kunde\nADD telefon VARCHAR(20);",
      "explanation": "Fügt der Kunden-Tabelle eine Telefon-Spalte hinzu"
    },
    {
      "language": "sql",
      "title": "Index erstellen",
      "code": "CREATE INDEX idx_kunde_name\nON kunde (name);",
      "explanation": "Erstellt einen Index auf der Name-Spalte für schnellere Suchen"
    }
  ],
  "exercises": [
    {
      "title": "Übung 1: Schüler-Tabelle",
      "description": "Erstelle eine Tabelle 'schueler' mit folgenden Spalten:\n- schueler_id (Primärschlüssel, INT)\n- vorname (VARCHAR(50), Pflichtfeld)\n- nachname (VARCHAR(50), Pflichtfeld)\n- geburtsdatum (DATE)\n- klasse (VARCHAR(10))",
      "difficulty": "beginner",
      "solution": "CREATE TABLE schueler (\n    schueler_id INT PRIMARY KEY,\n    vorname VARCHAR(50) NOT NULL,\n    nachname VARCHAR(50) NOT NULL,\n    geburtsdatum DATE,\n    klasse VARCHAR(10)\n);"
    },
    {
      "title": "Übung 2: Produkt-Tabelle mit Constraints",
      "description": "Erstelle eine Tabelle 'produkt' mit:\n- produkt_id (Primärschlüssel)\n- name (Pflichtfeld, eindeutig)\n- preis (DECIMAL, muss größer als 0 sein)\n- lagerbestand (INT, Standardwert 0)\n- kategorie_id (Fremdschlüssel zu kategorie-Tabelle)",
      "difficulty": "intermediate",
      "solution": "CREATE TABLE produkt (\n    produkt_id INT PRIMARY KEY,\n    name VARCHAR(100) NOT NULL UNIQUE,\n    preis DECIMAL(10,2) CHECK (preis > 0),\n    lagerbestand INT DEFAULT 0,\n    kategorie_id INT,\n    FOREIGN KEY (kategorie_id) REFERENCES kategorie(kategorie_id)\n);"
    },
    {
      "title": "Übung 3: Tabelle erweitern",
      "description": "Füge der 'produkt' Tabelle folgende Spalten hinzu:\n- beschreibung (VARCHAR(500))\n- erstellt_am (DATE)",
      "difficulty": "beginner",
      "solution": "ALTER TABLE produkt\nADD beschreibung VARCHAR(500);\n\nALTER TABLE produkt\nADD erstellt_am DATE;"
    },
    {
      "title": "Übung 4: Indizes erstellen",
      "description": "Erstelle Indizes für die 'produkt' Tabelle:\n- Index auf 'name'\n- Index auf 'kategorie_id'\n- Zusammengesetzter Index auf 'kategorie_id' und 'preis'",
      "difficulty": "intermediate",
      "solution": "CREATE INDEX idx_produkt_name ON produkt(name);\nCREATE INDEX idx_produkt_kategorie ON produkt(kategorie_id);\nCREATE INDEX idx_produkt_kategorie_preis ON produkt(kategorie_id, preis);"
    },
    {
      "title": "Übung 5: Komplette Datenbank",
      "description": "Erstelle eine Bibliotheks-Datenbank mit:\n1. Tabelle 'autor' (autor_id, name)\n2. Tabelle 'buch' (buch_id, titel, isbn (eindeutig), erscheinungsjahr, autor_id als Fremdschlüssel)\n3. Tabelle 'ausleihe' (ausleihe_id, buch_id, ausleih_datum, rueckgabe_datum mit CHECK dass Rückgabe >= Ausleihe)\n4. Passende Indizes",
      "difficulty": "advanced",
      "solution": "CREATE TABLE autor (\n    autor_id INT PRIMARY KEY,\n    name VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE buch (\n    buch_id INT PRIMARY KEY,\n    titel VARCHAR(200) NOT NULL,\n    isbn VARCHAR(20) UNIQUE NOT NULL,\n    erscheinungsjahr INT,\n    autor_id INT,\n    FOREIGN KEY (autor_id) REFERENCES autor(autor_id)\n);\n\nCREATE TABLE ausleihe (\n    ausleihe_id INT PRIMARY KEY,\n    buch_id INT NOT NULL,\n    ausleih_datum DATE NOT NULL,\n    rueckgabe_datum DATE,\n    CHECK (rueckgabe_datum >= ausleih_datum),\n    FOREIGN KEY (buch_id) REFERENCES buch(buch_id)\n);\n\nCREATE INDEX idx_buch_titel ON buch(titel);\nCREATE INDEX idx_buch_autor ON buch(autor_id);\nCREATE INDEX idx_ausleihe_buch ON ausleihe(buch_id);"
    }
  ],
  "relatedQuizzes": ["sql-comprehensive-quiz-2025"],
  "resources": [
    {
      "title": "SQL Tutorial - DDL",
      "url": "https://www.w3schools.com/sql/sql_create_table.asp",
      "type": "documentation"
    }
  ],
  "lastUpdated": "2025-01-10T00:00:00Z",
  "version": "1.0"
}
