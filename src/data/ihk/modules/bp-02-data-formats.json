{
  "id": "bp-02-data-formats",
  "title": "Datenaustauschformate (XML, JSON, CSV)",
  "description": "Strukturierte Datenformate für Datenaustausch zwischen Systemen",
  "category": "BP-02",
  "subcategory": "Datenaustausch",
  "difficulty": "intermediate",
  "examRelevance": "high",
  "newIn2025": false,
  "removedIn2025": false,
  "important": true,
  "estimatedTime": 50,
  "prerequisites": [],
  "tags": ["XML", "JSON", "CSV", "Datenaustausch", "API"],
  "content": "# Datenaustauschformate\n\n## Einführung\n\nDatenaustauschformate ermöglichen die strukturierte Übertragung von Daten zwischen verschiedenen Systemen, Anwendungen und Plattformen. Die wichtigsten Formate sind XML, JSON und CSV.\n\n## JSON (JavaScript Object Notation)\n\n### Eigenschaften\n\n- **Leichtgewichtig**: Kompakt und einfach\n- **Menschenlesbar**: Gut lesbar\n- **Sprachunabhängig**: Wird von allen modernen Sprachen unterstützt\n- **Standard für REST APIs**: De-facto-Standard\n\n### Syntax\n\n```json\n{\n  \"user\": {\n    \"id\": 123,\n    \"name\": \"Max Mustermann\",\n    \"email\": \"max@example.com\",\n    \"active\": true,\n    \"roles\": [\"admin\", \"user\"],\n    \"address\": {\n      \"street\": \"Hauptstraße 1\",\n      \"city\": \"Berlin\",\n      \"zip\": \"10115\"\n    },\n    \"created_at\": \"2025-01-10T10:00:00Z\"\n  }\n}\n```\n\n### Datentypen\n\n- **String**: `\"text\"`\n- **Number**: `123`, `45.67`\n- **Boolean**: `true`, `false`\n- **Null**: `null`\n- **Array**: `[1, 2, 3]`\n- **Object**: `{\"key\": \"value\"}`\n\n### JSON in verschiedenen Sprachen\n\n**JavaScript:**\n```javascript\n// JSON parsen\nconst obj = JSON.parse('{\"name\": \"Max\"}');\n\n// JSON erstellen\nconst json = JSON.stringify({name: \"Max\"});\n```\n\n**Python:**\n```python\nimport json\n\n# JSON parsen\nobj = json.loads('{\"name\": \"Max\"}')\n\n# JSON erstellen\njson_str = json.dumps({\"name\": \"Max\"})\n```\n\n**Java:**\n```java\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\nObjectMapper mapper = new ObjectMapper();\n\n// JSON parsen\nUser user = mapper.readValue(jsonString, User.class);\n\n// JSON erstellen\nString json = mapper.writeValueAsString(user);\n```\n\n### Vorteile\n\n- Kompakt und effizient\n- Einfach zu parsen\n- Native Unterstützung in JavaScript\n- Gut für APIs geeignet\n\n### Nachteile\n\n- Keine Kommentare möglich\n- Keine Schema-Validierung (ohne zusätzliche Tools)\n- Keine Namespaces\n\n## XML (Extensible Markup Language)\n\n### Eigenschaften\n\n- **Erweiterbar**: Eigene Tags definierbar\n- **Selbstbeschreibend**: Tags beschreiben Daten\n- **Validierbar**: Mit DTD oder XML Schema\n- **Namespaces**: Vermeidung von Namenskonflikten\n\n### Syntax\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<user>\n  <id>123</id>\n  <name>Max Mustermann</name>\n  <email>max@example.com</email>\n  <active>true</active>\n  <roles>\n    <role>admin</role>\n    <role>user</role>\n  </roles>\n  <address>\n    <street>Hauptstraße 1</street>\n    <city>Berlin</city>\n    <zip>10115</zip>\n  </address>\n  <created_at>2025-01-10T10:00:00Z</created_at>\n</user>\n```\n\n### Attribute vs. Elemente\n\n```xml\n<!-- Attribute -->\n<user id=\"123\" name=\"Max\" />\n\n<!-- Elemente -->\n<user>\n  <id>123</id>\n  <name>Max</name>\n</user>\n```\n\n### XML Schema (XSD)\n\n```xml\n<?xml version=\"1.0\"?>\n<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\n  <xs:element name=\"user\">\n    <xs:complexType>\n      <xs:sequence>\n        <xs:element name=\"id\" type=\"xs:integer\"/>\n        <xs:element name=\"name\" type=\"xs:string\"/>\n        <xs:element name=\"email\" type=\"xs:string\"/>\n      </xs:sequence>\n    </xs:complexType>\n  </xs:element>\n</xs:schema>\n```\n\n### XML in verschiedenen Sprachen\n\n**Python:**\n```python\nimport xml.etree.ElementTree as ET\n\n# XML parsen\ntree = ET.parse('user.xml')\nroot = tree.getroot()\n\n# Elemente finden\nname = root.find('name').text\n\n# XML erstellen\nroot = ET.Element('user')\nET.SubElement(root, 'name').text = 'Max'\ntree = ET.ElementTree(root)\ntree.write('output.xml')\n```\n\n**Java:**\n```java\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\n\n// XML parsen\nDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\nDocumentBuilder builder = factory.newDocumentBuilder();\nDocument doc = builder.parse(new File(\"user.xml\"));\n\n// Element lesen\nString name = doc.getElementsByTagName(\"name\").item(0).getTextContent();\n```\n\n### Vorteile\n\n- Schema-Validierung (XSD)\n- Namespaces\n- Kommentare möglich\n- Gut für komplexe Datenstrukturen\n- XSLT für Transformationen\n\n### Nachteile\n\n- Verbose (viel Overhead)\n- Komplexer zu parsen\n- Größere Dateien\n\n## CSV (Comma-Separated Values)\n\n### Eigenschaften\n\n- **Einfach**: Nur Text mit Trennzeichen\n- **Kompakt**: Sehr kleine Dateien\n- **Tabellarisch**: Für tabellarische Daten\n- **Excel-kompatibel**: Einfacher Import/Export\n\n### Syntax\n\n```csv\nid,name,email,active\n123,Max Mustermann,max@example.com,true\n124,Anna Schmidt,anna@example.com,false\n125,Tom Müller,tom@example.com,true\n```\n\n### Varianten\n\n**Semikolon-getrennt:**\n```csv\nid;name;email\n123;Max Mustermann;max@example.com\n```\n\n**Tab-getrennt (TSV):**\n```csv\nid\tname\temail\n123\tMax Mustermann\tmax@example.com\n```\n\n### CSV in verschiedenen Sprachen\n\n**Python:**\n```python\nimport csv\n\n# CSV lesen\nwith open('users.csv', 'r') as file:\n    reader = csv.DictReader(file)\n    for row in reader:\n        print(row['name'], row['email'])\n\n# CSV schreiben\nwith open('output.csv', 'w', newline='') as file:\n    writer = csv.DictWriter(file, fieldnames=['id', 'name', 'email'])\n    writer.writeheader()\n    writer.writerow({'id': 123, 'name': 'Max', 'email': 'max@example.com'})\n```\n\n**Java:**\n```java\nimport java.io.*;\n\n// CSV lesen\nBufferedReader br = new BufferedReader(new FileReader(\"users.csv\"));\nString line;\nwhile ((line = br.readLine()) != null) {\n    String[] values = line.split(\",\");\n    System.out.println(values[1]); // Name\n}\nbr.close();\n```\n\n### Sonderzeichen und Escaping\n\n```csv\nid,name,description\n123,\"Mustermann, Max\",\"Er sagte: \"\"Hallo\"\"\"\n```\n\n- Kommas in Werten: Anführungszeichen verwenden\n- Anführungszeichen in Werten: Verdoppeln\n\n### Vorteile\n\n- Sehr einfach\n- Kompakt\n- Excel-kompatibel\n- Schnell zu verarbeiten\n\n### Nachteile\n\n- Nur tabellarische Daten\n- Keine Hierarchien\n- Keine Datentypen\n- Probleme mit Sonderzeichen\n\n## Format-Vergleich\n\n| Merkmal | JSON | XML | CSV |\n|---------|------|-----|-----|\n| Lesbarkeit | Gut | Mittel | Sehr gut |\n| Größe | Klein | Groß | Sehr klein |\n| Hierarchie | Ja | Ja | Nein |\n| Schema | JSON Schema | XSD | Nein |\n| Kommentare | Nein | Ja | Nein |\n| Datentypen | Ja | Nein | Nein |\n| API-Standard | Ja | Nein | Nein |\n| Excel | Nein | Nein | Ja |\n\n## Anwendungsfälle\n\n### JSON\n- REST APIs\n- Web-Anwendungen\n- Konfigurationsdateien\n- NoSQL-Datenbanken\n\n### XML\n- SOAP Web Services\n- Konfigurationsdateien (Maven, Spring)\n- Dokumentenaustausch\n- RSS/Atom Feeds\n\n### CSV\n- Datenexport/-import\n- Excel-Integration\n- Log-Dateien\n- Einfache Datensätze\n\n## Konvertierung\n\n### JSON zu CSV (Python)\n\n```python\nimport json\nimport csv\n\n# JSON laden\nwith open('users.json', 'r') as f:\n    data = json.load(f)\n\n# CSV schreiben\nwith open('users.csv', 'w', newline='') as f:\n    writer = csv.DictWriter(f, fieldnames=['id', 'name', 'email'])\n    writer.writeheader()\n    for user in data['users']:\n        writer.writerow(user)\n```\n\n### XML zu JSON (Python)\n\n```python\nimport xml.etree.ElementTree as ET\nimport json\n\n# XML parsen\ntree = ET.parse('users.xml')\nroot = tree.getroot()\n\n# In Dictionary konvertieren\nusers = []\nfor user in root.findall('user'):\n    users.append({\n        'id': int(user.find('id').text),\n        'name': user.find('name').text,\n        'email': user.find('email').text\n    })\n\n# JSON schreiben\nwith open('users.json', 'w') as f:\n    json.dump({'users': users}, f, indent=2)\n```\n\n## Prüfungsrelevante Aspekte\n\n- Formate (JSON, XML, CSV) kennen und unterscheiden\n- Syntax der Formate verstehen\n- Vor- und Nachteile benennen\n- Anwendungsfälle zuordnen\n- Grundlegende Verarbeitung in Programmiersprachen\n- Konvertierung zwischen Formaten",
  "codeExamples": [
    {
      "language": "python",
      "code": "import json\nimport csv\n\n# Beispieldaten\nusers = [\n    {\"id\": 1, \"name\": \"Max\", \"email\": \"max@example.com\"},\n    {\"id\": 2, \"name\": \"Anna\", \"email\": \"anna@example.com\"}\n]\n\n# JSON schreiben\nwith open('users.json', 'w') as f:\n    json.dump(users, f, indent=2)\n\n# CSV schreiben\nwith open('users.csv', 'w', newline='') as f:\n    writer = csv.DictWriter(f, fieldnames=['id', 'name', 'email'])\n    writer.writeheader()\n    writer.writerows(users)\n\nprint(\"Daten in JSON und CSV exportiert\")",
      "explanation": "Beispiel für Export von Daten in JSON und CSV",
      "title": "Datenexport in verschiedene Formate"
    }
  ],
  "relatedQuizzes": [],
  "resources": [
    {
      "title": "JSON Specification",
      "url": "https://www.json.org/",
      "type": "documentation"
    },
    {
      "title": "W3C XML Specification",
      "url": "https://www.w3.org/XML/",
      "type": "documentation"
    }
  ],
  "lastUpdated": "2025-01-10T00:00:00Z",
  "version": "1.0"
}
