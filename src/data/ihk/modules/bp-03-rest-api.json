{
  "id": "bp-03-rest-api",
  "title": "REST API-Entwicklung",
  "description": "Entwicklung von RESTful Web Services und APIs",
  "category": "BP-03",
  "subcategory": "API-Entwicklung",
  "difficulty": "intermediate",
  "examRelevance": "high",
  "newIn2025": false,
  "removedIn2025": false,
  "important": true,
  "estimatedTime": 60,
  "prerequisites": [],
  "tags": ["REST", "API", "HTTP", "Web Services"],
  "content": "# REST API-Entwicklung\n\n## Einführung\n\nREST (Representational State Transfer) ist ein Architekturstil für verteilte Systeme, insbesondere für Web Services. RESTful APIs sind der Standard für moderne Web-Anwendungen.\n\n## REST-Prinzipien\n\n### 1. Client-Server-Architektur\n\n- Trennung von Client und Server\n- Unabhängige Entwicklung\n- Skalierbarkeit\n\n### 2. Stateless (Zustandslos)\n\n- Jede Anfrage enthält alle notwendigen Informationen\n- Server speichert keinen Client-Zustand\n- Skalierbarkeit und Zuverlässigkeit\n\n```python\n# Stateless: Jede Anfrage enthält Token\nheaders = {\n    'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'\n}\nresponse = requests.get('https://api.example.com/users', headers=headers)\n```\n\n### 3. Cacheable (Cachefähig)\n\n- Antworten können gecacht werden\n- Performance-Verbesserung\n- Cache-Control-Header\n\n```http\nHTTP/1.1 200 OK\nCache-Control: max-age=3600\nETag: \"33a64df551425fcc55e4d42a148795d9f25f89d4\"\n```\n\n### 4. Uniform Interface (Einheitliche Schnittstelle)\n\n- Standardisierte Kommunikation\n- HTTP-Methoden\n- Ressourcen-basiert\n\n### 5. Layered System (Schichtenarchitektur)\n\n- Zwischenschichten möglich (Load Balancer, Cache, Gateway)\n- Client kennt nur direkte Schicht\n\n### 6. Code on Demand (Optional)\n\n- Server kann ausführbaren Code senden\n- Beispiel: JavaScript für Browser\n\n## HTTP-Methoden\n\n### GET - Ressourcen abrufen\n\n```http\nGET /api/users HTTP/1.1\nHost: api.example.com\n\nResponse:\n200 OK\n[\n  {\"id\": 1, \"name\": \"Max\"},\n  {\"id\": 2, \"name\": \"Anna\"}\n]\n```\n\n**Eigenschaften:**\n- Idempotent (mehrfache Ausführung = gleiches Ergebnis)\n- Safe (keine Änderungen)\n- Cacheable\n\n### POST - Ressourcen erstellen\n\n```http\nPOST /api/users HTTP/1.1\nHost: api.example.com\nContent-Type: application/json\n\n{\n  \"name\": \"Tom\",\n  \"email\": \"tom@example.com\"\n}\n\nResponse:\n201 Created\nLocation: /api/users/3\n{\n  \"id\": 3,\n  \"name\": \"Tom\",\n  \"email\": \"tom@example.com\"\n}\n```\n\n**Eigenschaften:**\n- Nicht idempotent\n- Nicht safe\n- Nicht cacheable\n\n### PUT - Ressourcen aktualisieren (vollständig)\n\n```http\nPUT /api/users/3 HTTP/1.1\nHost: api.example.com\nContent-Type: application/json\n\n{\n  \"name\": \"Tom Müller\",\n  \"email\": \"tom.mueller@example.com\"\n}\n\nResponse:\n200 OK\n{\n  \"id\": 3,\n  \"name\": \"Tom Müller\",\n  \"email\": \"tom.mueller@example.com\"\n}\n```\n\n**Eigenschaften:**\n- Idempotent\n- Nicht safe\n- Ersetzt gesamte Ressource\n\n### PATCH - Ressourcen aktualisieren (teilweise)\n\n```http\nPATCH /api/users/3 HTTP/1.1\nHost: api.example.com\nContent-Type: application/json\n\n{\n  \"email\": \"newemail@example.com\"\n}\n\nResponse:\n200 OK\n{\n  \"id\": 3,\n  \"name\": \"Tom Müller\",\n  \"email\": \"newemail@example.com\"\n}\n```\n\n**Eigenschaften:**\n- Idempotent (meist)\n- Nicht safe\n- Aktualisiert nur angegebene Felder\n\n### DELETE - Ressourcen löschen\n\n```http\nDELETE /api/users/3 HTTP/1.1\nHost: api.example.com\n\nResponse:\n204 No Content\n```\n\n**Eigenschaften:**\n- Idempotent\n- Nicht safe\n\n## HTTP-Status-Codes\n\n### 2xx - Erfolg\n\n- **200 OK**: Erfolgreiche Anfrage\n- **201 Created**: Ressource erstellt\n- **204 No Content**: Erfolg ohne Inhalt\n\n### 3xx - Umleitung\n\n- **301 Moved Permanently**: Permanente Umleitung\n- **302 Found**: Temporäre Umleitung\n- **304 Not Modified**: Ressource nicht geändert (Cache)\n\n### 4xx - Client-Fehler\n\n- **400 Bad Request**: Ungültige Anfrage\n- **401 Unauthorized**: Authentifizierung erforderlich\n- **403 Forbidden**: Zugriff verweigert\n- **404 Not Found**: Ressource nicht gefunden\n- **409 Conflict**: Konflikt (z.B. Duplikat)\n- **422 Unprocessable Entity**: Validierungsfehler\n- **429 Too Many Requests**: Rate Limit überschritten\n\n### 5xx - Server-Fehler\n\n- **500 Internal Server Error**: Serverfehler\n- **502 Bad Gateway**: Gateway-Fehler\n- **503 Service Unavailable**: Service nicht verfügbar\n\n## URL-Design\n\n### Best Practices\n\n**Ressourcen-basiert (Nomen, nicht Verben):**\n```\n✓ GET /api/users\n✓ POST /api/users\n✗ GET /api/getUsers\n✗ POST /api/createUser\n```\n\n**Plural für Kollektionen:**\n```\n✓ GET /api/users\n✓ GET /api/users/123\n✗ GET /api/user\n✗ GET /api/user/123\n```\n\n**Hierarchische Struktur:**\n```\nGET /api/users/123/orders\nGET /api/users/123/orders/456\n```\n\n**Query-Parameter für Filterung:**\n```\nGET /api/users?role=admin&active=true\nGET /api/products?category=electronics&price_max=1000\n```\n\n**Versionierung:**\n```\nGET /api/v1/users\nGET /api/v2/users\n```\n\n## Request/Response-Format\n\n### JSON (Standard)\n\n```json\n{\n  \"data\": {\n    \"id\": 123,\n    \"type\": \"user\",\n    \"attributes\": {\n      \"name\": \"Max Mustermann\",\n      \"email\": \"max@example.com\"\n    }\n  },\n  \"meta\": {\n    \"timestamp\": \"2025-01-10T10:00:00Z\"\n  }\n}\n```\n\n### Fehler-Format\n\n```json\n{\n  \"error\": {\n    \"code\": \"VALIDATION_ERROR\",\n    \"message\": \"Validation failed\",\n    \"details\": [\n      {\n        \"field\": \"email\",\n        \"message\": \"Invalid email format\"\n      }\n    ]\n  }\n}\n```\n\n## Authentifizierung\n\n### Bearer Token (JWT)\n\n```http\nGET /api/users HTTP/1.1\nHost: api.example.com\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n```\n\n### API Key\n\n```http\nGET /api/users HTTP/1.1\nHost: api.example.com\nX-API-Key: your-api-key-here\n```\n\n### OAuth 2.0\n\n```python\n# OAuth 2.0 Flow\n# 1. Authorization Request\nauth_url = 'https://auth.example.com/oauth/authorize'\nparams = {\n    'client_id': 'your-client-id',\n    'redirect_uri': 'https://yourapp.com/callback',\n    'response_type': 'code',\n    'scope': 'read write'\n}\n\n# 2. Token Exchange\ntoken_url = 'https://auth.example.com/oauth/token'\ndata = {\n    'grant_type': 'authorization_code',\n    'code': 'authorization-code',\n    'client_id': 'your-client-id',\n    'client_secret': 'your-client-secret'\n}\n```\n\n## Pagination\n\n### Offset-based\n\n```http\nGET /api/users?limit=20&offset=40\n\nResponse:\n{\n  \"data\": [...],\n  \"pagination\": {\n    \"total\": 150,\n    \"limit\": 20,\n    \"offset\": 40,\n    \"has_more\": true\n  }\n}\n```\n\n### Cursor-based\n\n```http\nGET /api/users?limit=20&cursor=eyJpZCI6MTIzfQ\n\nResponse:\n{\n  \"data\": [...],\n  \"pagination\": {\n    \"next_cursor\": \"eyJpZCI6MTQzfQ\",\n    \"has_more\": true\n  }\n}\n```\n\n## Rate Limiting\n\n```http\nHTTP/1.1 200 OK\nX-RateLimit-Limit: 1000\nX-RateLimit-Remaining: 999\nX-RateLimit-Reset: 1641816000\n\nHTTP/1.1 429 Too Many Requests\nRetry-After: 3600\n```\n\n## CORS (Cross-Origin Resource Sharing)\n\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: https://example.com\nAccess-Control-Allow-Methods: GET, POST, PUT, DELETE\nAccess-Control-Allow-Headers: Content-Type, Authorization\nAccess-Control-Max-Age: 86400\n```\n\n## REST API Beispiel (Python Flask)\n\n```python\nfrom flask import Flask, jsonify, request\n\napp = Flask(__name__)\n\nusers = [\n    {\"id\": 1, \"name\": \"Max\", \"email\": \"max@example.com\"},\n    {\"id\": 2, \"name\": \"Anna\", \"email\": \"anna@example.com\"}\n]\n\n@app.route('/api/users', methods=['GET'])\ndef get_users():\n    \"\"\"Liste aller Benutzer\"\"\"\n    return jsonify(users), 200\n\n@app.route('/api/users/<int:user_id>', methods=['GET'])\ndef get_user(user_id):\n    \"\"\"Einzelner Benutzer\"\"\"\n    user = next((u for u in users if u['id'] == user_id), None)\n    if user:\n        return jsonify(user), 200\n    return jsonify({\"error\": \"User not found\"}), 404\n\n@app.route('/api/users', methods=['POST'])\ndef create_user():\n    \"\"\"Benutzer erstellen\"\"\"\n    data = request.get_json()\n    \n    # Validierung\n    if not data.get('name') or not data.get('email'):\n        return jsonify({\"error\": \"Name and email required\"}), 400\n    \n    # Erstellen\n    new_user = {\n        \"id\": len(users) + 1,\n        \"name\": data['name'],\n        \"email\": data['email']\n    }\n    users.append(new_user)\n    \n    return jsonify(new_user), 201\n\n@app.route('/api/users/<int:user_id>', methods=['PUT'])\ndef update_user(user_id):\n    \"\"\"Benutzer aktualisieren\"\"\"\n    user = next((u for u in users if u['id'] == user_id), None)\n    if not user:\n        return jsonify({\"error\": \"User not found\"}), 404\n    \n    data = request.get_json()\n    user['name'] = data.get('name', user['name'])\n    user['email'] = data.get('email', user['email'])\n    \n    return jsonify(user), 200\n\n@app.route('/api/users/<int:user_id>', methods=['DELETE'])\ndef delete_user(user_id):\n    \"\"\"Benutzer löschen\"\"\"\n    global users\n    users = [u for u in users if u['id'] != user_id]\n    return '', 204\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\n## Prüfungsrelevante Aspekte\n\n- REST-Prinzipien kennen\n- HTTP-Methoden und ihre Eigenschaften verstehen\n- HTTP-Status-Codes kennen\n- URL-Design Best Practices\n- Authentifizierungsmethoden kennen\n- Pagination und Rate Limiting verstehen\n- CORS-Konzept verstehen",
  "codeExamples": [
    {
      "language": "python",
      "code": "from flask import Flask, jsonify, request\nfrom functools import wraps\n\napp = Flask(__name__)\n\n# Authentifizierungs-Decorator\ndef require_auth(f):\n    @wraps(f)\n    def decorated(*args, **kwargs):\n        token = request.headers.get('Authorization')\n        if not token or not token.startswith('Bearer '):\n            return jsonify({\"error\": \"Unauthorized\"}), 401\n        # Token-Validierung hier\n        return f(*args, **kwargs)\n    return decorated\n\n# Geschützte Route\n@app.route('/api/users', methods=['GET'])\n@require_auth\ndef get_users():\n    # Pagination\n    page = request.args.get('page', 1, type=int)\n    per_page = request.args.get('per_page', 20, type=int)\n    \n    # Filterung\n    role = request.args.get('role')\n    \n    # Daten abrufen (simuliert)\n    users = get_users_from_db(page, per_page, role)\n    total = get_total_users(role)\n    \n    return jsonify({\n        \"data\": users,\n        \"pagination\": {\n            \"page\": page,\n            \"per_page\": per_page,\n            \"total\": total,\n            \"pages\": (total + per_page - 1) // per_page\n        }\n    }), 200",
      "explanation": "Vollständiges REST API Beispiel mit Authentifizierung und Pagination",
      "title": "REST API mit Best Practices"
    }
  ],
  "relatedQuizzes": [],
  "resources": [
    {
      "title": "REST API Tutorial",
      "url": "https://restfulapi.net/",
      "type": "article"
    },
    {
      "title": "HTTP Status Codes",
      "url": "https://httpstatuses.com/",
      "type": "documentation"
    }
  ],
  "lastUpdated": "2025-01-10T00:00:00Z",
  "version": "1.0",
  "learningObjectives": [
    "Understand REST",
    "Understand API",
    "Understand HTTP",
    "Understand Web Services"
  ]
}
