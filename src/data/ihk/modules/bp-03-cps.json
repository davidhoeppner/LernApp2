{
  "id": "bp-03-cps",
  "title": "Cyber-physische Systeme (CPS)",
  "description": "Verstehe cyber-physische Systeme, ihre Komponenten (Sensoren, Aktoren) und wie sie in der Softwareentwicklung eingesetzt werden.",
  "category": "BP-03",
  "subcategory": "Entwickeln von Softwareanwendungen",
  "difficulty": "intermediate",
  "examRelevance": "high",
  "newIn2025": true,
  "removedIn2025": false,
  "important": true,
  "estimatedTime": "40 Minuten",
  "prerequisites": [],
  "tags": [
    "CPS",
    "Cyber-physische Systeme",
    "Sensoren",
    "Aktoren",
    "IoT",
    "Embedded Systems",
    "Neu 2025"
  ],
  "content": "# Cyber-physische Systeme (CPS)\n\n## Was sind Cyber-physische Systeme?\n\nCyber-physische Systeme (CPS) sind **Systeme, die physische Prozesse mit digitaler Steuerung verbinden**. Sie bestehen aus mechanischen und elektronischen Komponenten, die über Netzwerke kommunizieren und durch Software gesteuert werden.\n\n### Definition\n\n> Ein cyber-physisches System ist ein Verbund informatischer, softwaretechnischer Komponenten mit mechanischen und elektronischen Teilen, die über eine Dateninfrastruktur kommunizieren.\n\n### Kernmerkmale\n\n- **Eingebettete Systeme:** Software läuft auf spezialisierter Hardware\n- **Sensoren:** Erfassen physische Daten aus der Umgebung\n- **Aktoren:** Führen physische Aktionen aus\n- **Vernetzung:** Kommunikation über Netzwerke\n- **Echtzeitverarbeitung:** Schnelle Reaktion auf Ereignisse\n\n<!-- micro-quiz:bp-03-cps-was-sind-cyber-physische-systeme-micro-1 -->\n## Komponenten von CPS\n\n### 1. Sensoren\n\nSensoren **erfassen physische Größen** und wandeln sie in digitale Signale um.\n\n**Häufige Sensortypen:**\n\n| Sensor | Misst | Beispiel-Anwendung |\n|--------|-------|--------------------|\n| **Temperatursensor** | Temperatur | Klimaanlage, Kühlschrank |\n| **Drucksensor** | Druck | Reifendruckkontrolle |\n| **Bewegungssensor** | Bewegung/Position | Alarmanlagen, Smartphones |\n| **Lichtsensor** | Helligkeit | Automatische Bildschirmhelligkeit |\n| **Abstandssensor** | Entfernung | Einparkhilfe, Roboter |\n| **Beschleunigungssensor** | Beschleunigung | Airbag-Auslösung |\n| **GPS-Sensor** | Position | Navigation |\n| **Feuchtigkeitssensor** | Luftfeuchtigkeit | Wetterstation |\n\n### 2. Aktoren\n\nAktoren **führen physische Aktionen aus** basierend auf digitalen Befehlen.\n\n**Häufige Aktortypen:**\n\n| Aktor | Aktion | Beispiel-Anwendung |\n|-------|--------|--------------------|\n| **Motor** | Drehbewegung | Roboterarm, Ventilator |\n| **Servo** | Präzise Positionierung | Drohnen, Modellbau |\n| **LED** | Licht ausgeben | Anzeigen, Beleuchtung |\n| **Relais** | Schalten von Stromkreisen | Heizungssteuerung |\n| **Ventil** | Flüssigkeits-/Gassteuerung | Bewässerung |\n| **Lautsprecher** | Ton ausgeben | Alarme, Sprachausgabe |\n| **Display** | Informationen anzeigen | Statusanzeigen |\n\n### 3. Steuerungseinheit (Controller)\n\nDie **Steuerungseinheit** verarbeitet Sensordaten und steuert Aktoren.\n\n**Beispiele:**\n- Mikrocontroller (Arduino, ESP32, Raspberry Pi)\n- Embedded Systems\n- Industriesteuerungen (SPS)\n\n### 4. Kommunikationsschnittstellen\n\n**Verbindungstechnologien:**\n- **Kabelgebunden:** USB, Ethernet, I2C, SPI\n- **Drahtlos:** WLAN, Bluetooth, Zigbee, LoRaWAN\n\n## CPS-Architektur\n<!-- micro-quiz:bp-03-cps-komponenten-von-cps-micro-1 -->\n\n\n```\n┌─────────────────────────────────────────┐\n│         Cloud / Backend Server          │\n│    (Datenanalyse, KI, Speicherung)     │\n└──────────────┬──────────────────────────┘\n               │ Internet\n               ↓\n┌─────────────────────────────────────────┐\n│      Steuerungseinheit (Controller)     │\n│         (Mikrocontroller, SPS)          │\n└──────┬──────────────────────────┬───────┘\n       │                          │\n       ↓                          ↓\n┌─────────────┐          ┌─────────────┐\n│  Sensoren   │          │   Aktoren   │\n│ (Eingabe)   │          │  (Ausgabe)  │\n└─────────────┘          └─────────────┘\n       ↓                          ↑\n┌─────────────────────────────────────────┐\n│        Physische Umgebung/Prozess       │\n└─────────────────────────────────────────┘\n```\n\n<!-- micro-quiz:bp-03-cps-cps-architektur-micro-1 -->\n## Beispiele für CPS\n\n### 1. Smart Home\n- **Sensoren:** Temperatur, Bewegung, Tür-/Fensterkontakte\n- **Aktoren:** Heizung, Beleuchtung, Jalousien\n- **Steuerung:** Zentrale Smart-Home-Steuerung\n- **Vernetzung:** WLAN, Zigbee\n\n### 2. Autonome Fahrzeuge\n- **Sensoren:** Kameras, Lidar, Radar, GPS\n- **Aktoren:** Lenkung, Bremsen, Beschleunigung\n- **Steuerung:** Fahrzeugcomputer mit KI\n- **Vernetzung:** 5G, V2X-Kommunikation\n\n### 3. Industrielle Fertigung (Industrie 4.0)\n- **Sensoren:** Qualitätssensoren, Positionssensoren\n- **Aktoren:** Roboter, Förderbänder\n- **Steuerung:** SPS, MES-Systeme\n- **Vernetzung:** Industrial Ethernet\n\n### 4. Medizintechnik\n- **Sensoren:** Herzfrequenz, Blutzucker, EKG\n- **Aktoren:** Insulinpumpen, Defibrillatoren\n- **Steuerung:** Medizinische Gerätesteuerung\n- **Vernetzung:** Bluetooth, Krankenhaus-Netzwerk\n\n## Bibliotheken und Frameworks für CPS\n<!-- micro-quiz:bp-03-cps-beispiele-fur-cps-micro-1 -->\n\n\n### Python\n\n**RPi.GPIO** - Raspberry Pi GPIO-Steuerung\n```python\nimport RPi.GPIO as GPIO\n```\n\n**gpiozero** - Vereinfachte Hardware-Steuerung\n```python\nfrom gpiozero import LED, Button\n```\n\n**pySerial** - Serielle Kommunikation\n```python\nimport serial\n```\n\n### Java\n\n**Pi4J** - Raspberry Pi I/O für Java\n```java\nimport com.pi4j.io.gpio.*;\n```\n\n### C/C++\n\n**Arduino Framework** - Mikrocontroller-Programmierung\n```cpp\n#include <Arduino.h>\n```\n\n**WiringPi** - GPIO für Raspberry Pi\n```c\n#include <wiringPi.h>\n```\n\n### JavaScript/Node.js\n\n**Johnny-Five** - Robotik und IoT\n```javascript\nconst five = require('johnny-five');\n```\n\n**onoff** - GPIO-Zugriff\n```javascript\nconst Gpio = require('onoff').Gpio;\n```\n\n<!-- micro-quiz:bp-03-cps-bibliotheken-und-frameworks-fur-cps-micro-1 -->\n## Abfragerhythmus planen\n\nDie **Polling-Frequenz** bestimmt, wie oft Sensoren abgefragt werden.\n\n### Faktoren für die Frequenzwahl\n\n1. **Prozessgeschwindigkeit:** Wie schnell ändert sich der Wert?\n2. **Reaktionszeit:** Wie schnell muss reagiert werden?\n3. **Ressourcen:** CPU, Speicher, Energie\n4. **Datenvolumen:** Netzwerk-Bandbreite\n\n### Beispiele\n\n| Anwendung | Frequenz | Begründung |\n|-----------|----------|------------|\n| Temperaturüberwachung | 1x/Minute | Langsame Änderungen |\n| Bewegungserkennung | 10x/Sekunde | Schnelle Reaktion nötig |\n| Vibrationssensor | 1000x/Sekunde | Hochfrequente Ereignisse |\n| GPS-Tracking | 1x/Sekunde | Balance zwischen Genauigkeit und Energie |\n\n### Polling vs. Interrupt\n\n**Polling:** Regelmäßige Abfrage\n- ✅ Einfach zu implementieren\n- ❌ Verschwendet Ressourcen\n\n**Interrupt:** Ereignisgesteuert\n- ✅ Effizient\n- ✅ Schnelle Reaktion\n- ❌ Komplexere Implementierung\n\n## Herausforderungen bei CPS\n<!-- micro-quiz:bp-03-cps-abfragerhythmus-planen-micro-1 -->\n\n\n### 1. Echtzeitanforderungen\n- Systeme müssen in definierten Zeitfenstern reagieren\n- Kritisch bei Sicherheitssystemen (Airbag, Bremsen)\n\n### 2. Zuverlässigkeit\n- Hohe Verfügbarkeit erforderlich\n- Fehlertoleranz wichtig\n\n### 3. Sicherheit (Security)\n- Schutz vor Cyberangriffen\n- Verschlüsselte Kommunikation\n\n### 4. Energieeffizienz\n- Batteriebetriebene Geräte\n- Optimierung des Energieverbrauchs\n\n### 5. Skalierbarkeit\n- Viele Geräte im Netzwerk\n- Datenmanagement\n\n<!-- micro-quiz:bp-03-cps-herausforderungen-bei-cps-micro-1 -->\n## Praktische Anwendungsfälle\n\n### Anwendungsfall 1: Automatische Bewässerung\n\n**Komponenten:**\n- Feuchtigkeitssensor im Boden\n- Wasserventil (Aktor)\n- Mikrocontroller (ESP32)\n- WLAN-Verbindung\n\n**Ablauf:**\n1. Sensor misst Bodenfeuchtigkeit alle 10 Minuten\n2. Wenn Feuchtigkeit < 30%: Ventil öffnen\n3. Bewässern für 5 Minuten\n4. Ventil schließen\n5. Daten an Cloud senden für Analyse\n\n### Anwendungsfall 2: Einbruchsalarm\n\n**Komponenten:**\n- Bewegungssensoren\n- Tür-/Fensterkontakte\n- Sirene (Aktor)\n- Smartphone-App\n\n**Ablauf:**\n1. System scharf schalten via App\n2. Sensoren überwachen kontinuierlich\n3. Bei Bewegung: Alarm auslösen\n4. Push-Benachrichtigung an Smartphone\n5. Sirene aktivieren\n\n### Anwendungsfall 3: Temperaturregelung\n\n**Komponenten:**\n- Temperatursensor\n- Heizung (Aktor)\n- Thermostat-Controller\n\n**Ablauf:**\n1. Sensor misst Raumtemperatur\n2. Vergleich mit Solltemperatur\n3. Wenn zu kalt: Heizung einschalten\n4. Wenn Solltemperatur erreicht: Heizung ausschalten\n5. PID-Regelung für präzise Steuerung\n\n## Übungsaufgaben\n<!-- micro-quiz:bp-03-cps-praktische-anwendungsfalle-micro-1 -->\n\n\n### Aufgabe 1: Komponenten zuordnen\n\nOrdne zu, ob es sich um einen Sensor oder Aktor handelt:\n- LED\n- Temperatursensor\n- Motor\n- GPS-Modul\n- Lautsprecher\n- Lichtsensor\n\n### Aufgabe 2: Anwendungsfall entwerfen\n\nEntwirf ein CPS für eine automatische Garagentorsteuerung:\n- Welche Sensoren werden benötigt?\n- Welche Aktoren?\n- Wie ist der Ablauf?\n\n### Aufgabe 3: Abfragefrequenz bestimmen\n\nWelche Abfragefrequenz ist sinnvoll für:\na) Rauchmelder\nb) Fitness-Tracker (Schritte zählen)\nc) Parkplatzsensor\n\n### Aufgabe 4: Bibliothek wählen\n\nDu möchtest mit Python einen Raspberry Pi programmieren, um LEDs zu steuern. Welche Bibliothek würdest du verwenden?\n\n<!-- micro-quiz:bp-03-cps-ubungsaufgaben-micro-1 -->\n## Zusammenfassung\n\nCyber-physische Systeme verbinden die digitale mit der physischen Welt durch Sensoren (Eingabe), Aktoren (Ausgabe) und intelligente Steuerung. Sie sind die Grundlage für IoT, Smart Home, Industrie 4.0 und autonome Systeme. Die Wahl der richtigen Bibliotheken und die Planung des Abfragerhythmus sind entscheidend für effiziente und zuverlässige CPS.\n\n\n<!-- micro-quiz:bp-03-cps-zusammenfassung-micro-1 -->",
  "codeExamples": [
    {
      "language": "python",
      "title": "Raspberry Pi: LED mit Button steuern (gpiozero)",
      "code": "from gpiozero import LED, Button\nfrom signal import pause\n\n# Hardware-Setup\nled = LED(17)  # LED an GPIO Pin 17\nbutton = Button(2)  # Button an GPIO Pin 2\n\n# Event-Handler\ndef button_pressed():\n    print(\"Button gedrückt - LED an\")\n    led.on()\n\ndef button_released():\n    print(\"Button losgelassen - LED aus\")\n    led.off()\n\n# Events registrieren\nbutton.when_pressed = button_pressed\nbutton.when_released = button_released\n\nprint(\"System läuft. Drücke Ctrl+C zum Beenden.\")\npause()  # Programm läuft weiter und wartet auf Events",
      "explanation": "Dieses Beispiel zeigt die ereignisgesteuerte Programmierung mit gpiozero. Die LED wird durch einen Button gesteuert, ohne dass kontinuierlich gepollt werden muss."
    },
    {
      "language": "python",
      "title": "Temperatursensor auslesen und Lüfter steuern",
      "code": "import time\nimport board\nimport adafruit_dht\nfrom gpiozero import OutputDevice\n\n# Hardware-Setup\ndht_sensor = adafruit_dht.DHT22(board.D4)  # Temperatursensor\nfan = OutputDevice(17)  # Lüfter an GPIO 17\n\n# Konfiguration\nTARGET_TEMP = 25.0  # Zieltemperatur in °C\nPOLLING_INTERVAL = 5  # Abfrage alle 5 Sekunden\n\ndef read_temperature():\n    \"\"\"Liest Temperatur vom Sensor\"\"\"\n    try:\n        temperature = dht_sensor.temperature\n        humidity = dht_sensor.humidity\n        return temperature, humidity\n    except RuntimeError as e:\n        print(f\"Fehler beim Auslesen: {e}\")\n        return None, None\n\ndef control_fan(temperature):\n    \"\"\"Steuert Lüfter basierend auf Temperatur\"\"\"\n    if temperature is None:\n        return\n    \n    if temperature > TARGET_TEMP:\n        if not fan.is_active:\n            print(f\"Temperatur {temperature}°C > {TARGET_TEMP}°C - Lüfter AN\")\n            fan.on()\n    else:\n        if fan.is_active:\n            print(f\"Temperatur {temperature}°C <= {TARGET_TEMP}°C - Lüfter AUS\")\n            fan.off()\n\n# Hauptschleife\nprint(\"Temperaturregelung gestartet...\")\ntry:\n    while True:\n        temp, humidity = read_temperature()\n        \n        if temp is not None:\n            print(f\"Temperatur: {temp:.1f}°C, Luftfeuchtigkeit: {humidity:.1f}%\")\n            control_fan(temp)\n        \n        time.sleep(POLLING_INTERVAL)\n        \nexcept KeyboardInterrupt:\n    print(\"\\nProgramm beendet\")\n    fan.off()\n    dht_sensor.exit()",
      "explanation": "Ein praktisches Beispiel für ein CPS: Ein Temperatursensor steuert einen Lüfter. Das System pollt den Sensor alle 5 Sekunden und schaltet den Lüfter basierend auf der Temperatur."
    },
    {
      "language": "java",
      "title": "Arduino: Abstandssensor mit Servo (C++)",
      "code": "#include <Servo.h>\n\n// Hardware-Pins\nconst int TRIG_PIN = 9;\nconst int ECHO_PIN = 10;\nconst int SERVO_PIN = 11;\n\n// Konfiguration\nconst int SAFE_DISTANCE = 20;  // cm\n\nServo myServo;\n\nvoid setup() {\n  Serial.begin(9600);\n  \n  // Ultraschallsensor\n  pinMode(TRIG_PIN, OUTPUT);\n  pinMode(ECHO_PIN, INPUT);\n  \n  // Servo\n  myServo.attach(SERVO_PIN);\n  myServo.write(0);  // Startposition\n  \n  Serial.println(\"Abstandssensor-System gestartet\");\n}\n\nfloat measureDistance() {\n  // Trigger-Impuls senden\n  digitalWrite(TRIG_PIN, LOW);\n  delayMicroseconds(2);\n  digitalWrite(TRIG_PIN, HIGH);\n  delayMicroseconds(10);\n  digitalWrite(TRIG_PIN, LOW);\n  \n  // Echo-Zeit messen\n  long duration = pulseIn(ECHO_PIN, HIGH);\n  \n  // Entfernung berechnen (Schallgeschwindigkeit: 343 m/s)\n  float distance = duration * 0.034 / 2;\n  \n  return distance;\n}\n\nvoid controlServo(float distance) {\n  if (distance < SAFE_DISTANCE) {\n    // Objekt zu nah - Servo auf 90°\n    myServo.write(90);\n    Serial.print(\"WARNUNG: Objekt bei \");\n    Serial.print(distance);\n    Serial.println(\" cm - Servo aktiviert\");\n  } else {\n    // Sicherer Abstand - Servo auf 0°\n    myServo.write(0);\n    Serial.print(\"OK: Abstand \");\n    Serial.print(distance);\n    Serial.println(\" cm\");\n  }\n}\n\nvoid loop() {\n  float distance = measureDistance();\n  controlServo(distance);\n  \n  delay(100);  // 10 Hz Abfragerate\n}",
      "explanation": "Arduino-Beispiel für ein CPS: Ein Ultraschallsensor misst den Abstand und steuert einen Servo-Motor. Bei zu geringem Abstand wird der Servo aktiviert (z.B. für eine Barriere)."
    },
    {
      "language": "javascript",
      "title": "Node.js: Bewegungsmelder mit Benachrichtigung",
      "code": "const Gpio = require('onoff').Gpio;\nconst nodemailer = require('nodemailer');\n\n// Hardware-Setup\nconst motionSensor = new Gpio(4, 'in', 'both');\nconst alarmLED = new Gpio(17, 'out');\n\n// System-Status\nlet systemArmed = true;\nlet lastMotionTime = 0;\nconst COOLDOWN_PERIOD = 30000;  // 30 Sekunden\n\n// E-Mail-Konfiguration\nconst transporter = nodemailer.createTransport({\n  service: 'gmail',\n  auth: {\n    user: 'your-email@gmail.com',\n    pass: 'your-password'\n  }\n});\n\nfunction sendAlert() {\n  const mailOptions = {\n    from: 'your-email@gmail.com',\n    to: 'alert-recipient@gmail.com',\n    subject: '🚨 Bewegung erkannt!',\n    text: `Bewegung wurde um ${new Date().toLocaleString()} erkannt.`\n  };\n  \n  transporter.sendMail(mailOptions, (error, info) => {\n    if (error) {\n      console.log('E-Mail-Fehler:', error);\n    } else {\n      console.log('Alarm-E-Mail gesendet:', info.response);\n    }\n  });\n}\n\nfunction handleMotion(err, value) {\n  if (err) {\n    console.error('Sensor-Fehler:', err);\n    return;\n  }\n  \n  const now = Date.now();\n  \n  // Bewegung erkannt (HIGH) und System scharf\n  if (value === 1 && systemArmed) {\n    // Cooldown-Periode prüfen\n    if (now - lastMotionTime > COOLDOWN_PERIOD) {\n      console.log('🚨 BEWEGUNG ERKANNT!');\n      \n      // LED einschalten\n      alarmLED.writeSync(1);\n      \n      // Benachrichtigung senden\n      sendAlert();\n      \n      lastMotionTime = now;\n      \n      // LED nach 5 Sekunden ausschalten\n      setTimeout(() => {\n        alarmLED.writeSync(0);\n      }, 5000);\n    }\n  }\n}\n\n// Event-Handler registrieren (Interrupt-basiert)\nmotionSensor.watch(handleMotion);\n\nconsole.log('Bewegungsmelder-System aktiv');\nconsole.log('System scharf:', systemArmed);\n\n// Graceful Shutdown\nprocess.on('SIGINT', () => {\n  console.log('\\nSystem wird heruntergefahren...');\n  alarmLED.writeSync(0);\n  motionSensor.unexport();\n  alarmLED.unexport();\n  process.exit();\n});",
      "explanation": "Ein vollständiges CPS-Beispiel mit Node.js: Ein Bewegungsmelder löst einen Alarm aus, schaltet eine LED und sendet eine E-Mail-Benachrichtigung. Das System verwendet Interrupts für effiziente Ereignisverarbeitung."
    }
  ],
  "relatedQuizzes": [],
  "resources": [
    {
      "title": "Raspberry Pi GPIO Dokumentation",
      "url": "https://www.raspberrypi.com/documentation/computers/raspberry-pi.html",
      "type": "documentation"
    },
    {
      "title": "Arduino Reference",
      "url": "https://www.arduino.cc/reference/en/",
      "type": "documentation"
    },
    {
      "title": "gpiozero Documentation",
      "url": "https://gpiozero.readthedocs.io/",
      "type": "documentation"
    }
  ],
  "lastUpdated": "2025-01-10T00:00:00Z",
  "version": "1.0",
  "learningObjectives": [
    "Du kannst cPS erklären",
    "Du kannst cyber-physische Systeme erklären",
    "Du kannst sensoren erklären",
    "Du kannst aktoren erklären",
    "Du kannst ioT erklären"
  ],
  "summary": "Verstehe cyber-physische Systeme, ihre Komponenten (Sensoren, Aktoren) und wie sie in der Softwareentwicklung eingesetzt werden.",
  "contentOutline": [
    {
      "id": "cyber-physische-systeme-cps",
      "title": "Cyber-physische Systeme (CPS)",
      "summary": "Kernaspekt: Cyber-physische Systeme (CPS)"
    },
    {
      "id": "was-sind-cyber-physische-systeme",
      "title": "Was sind Cyber-physische Systeme?",
      "summary": "Kernaspekt: Was sind Cyber-physische Systeme?"
    },
    {
      "id": "komponenten-von-cps",
      "title": "Komponenten von CPS",
      "summary": "Kernaspekt: Komponenten von CPS"
    },
    {
      "id": "cps-architektur",
      "title": "CPS-Architektur",
      "summary": "Kernaspekt: CPS-Architektur"
    },
    {
      "id": "beispiele-fur-cps",
      "title": "Beispiele für CPS",
      "summary": "Kernaspekt: Beispiele für CPS"
    },
    {
      "id": "bibliotheken-und-frameworks-fur-cps",
      "title": "Bibliotheken und Frameworks für CPS",
      "summary": "Kernaspekt: Bibliotheken und Frameworks für CPS"
    },
    {
      "id": "abfragerhythmus-planen",
      "title": "Abfragerhythmus planen",
      "summary": "Kernaspekt: Abfragerhythmus planen"
    },
    {
      "id": "herausforderungen-bei-cps",
      "title": "Herausforderungen bei CPS",
      "summary": "Kernaspekt: Herausforderungen bei CPS"
    },
    {
      "id": "praktische-anwendungsfalle",
      "title": "Praktische Anwendungsfälle",
      "summary": "Kernaspekt: Praktische Anwendungsfälle"
    },
    {
      "id": "ubungsaufgaben",
      "title": "Übungsaufgaben",
      "summary": "Kernaspekt: Übungsaufgaben"
    },
    {
      "id": "zusammenfassung",
      "title": "Zusammenfassung",
      "summary": "Kernaspekt: Zusammenfassung"
    }
  ],
  "accessibilityNotes": "Klare Überschriften, kurze Sätze, keine reine Farb-Codierung.",
  "editorNote": "Automatisch ergänzt: Review erforderlich",
  "microQuizzes": [
    "bp-03-cps-was-sind-cyber-physische-systeme-micro-1",
    "bp-03-cps-komponenten-von-cps-micro-1",
    "bp-03-cps-cps-architektur-micro-1",
    "bp-03-cps-beispiele-fur-cps-micro-1",
    "bp-03-cps-bibliotheken-und-frameworks-fur-cps-micro-1",
    "bp-03-cps-abfragerhythmus-planen-micro-1",
    "bp-03-cps-herausforderungen-bei-cps-micro-1",
    "bp-03-cps-praktische-anwendungsfalle-micro-1",
    "bp-03-cps-ubungsaufgaben-micro-1",
    "bp-03-cps-zusammenfassung-micro-1"
  ]
}