{
  "id": "bp-01-documentation",
  "title": "Programm- und Konfigurationsdokumentation",
  "description": "Best Practices für technische Dokumentation von Software und Konfigurationen (Neu ab 2025)",
  "category": "BP-01",
  "subcategory": "Dokumentation",
  "difficulty": "intermediate",
  "examRelevance": "high",
  "newIn2025": true,
  "removedIn2025": false,
  "important": true,
  "estimatedTime": 45,
  "prerequisites": [],
  "tags": [
    "Dokumentation",
    "Code-Kommentare",
    "API-Docs",
    "README",
    "Neu 2025"
  ],
  "content": "# Programm- und Konfigurationsdokumentation\n\n## Einführung\n\nGute Dokumentation ist essentiell für Wartbarkeit, Zusammenarbeit und Wissenstransfer in Softwareprojekten. Sie hilft Entwicklern, Code zu verstehen, und Nutzern, Software effektiv einzusetzen.\n\n**Neu ab 2025**: Programm- und Konfigurationsdokumentation ist explizit im neuen Prüfungskatalog aufgeführt.\n\n## Arten der Dokumentation\n\n### 1. Code-Dokumentation\n\n**Inline-Kommentare:**\n```java\n// Berechnet die Fakultät einer Zahl rekursiv\npublic int factorial(int n) {\n    // Basisfall: 0! = 1\n    if (n == 0) return 1;\n    \n    // Rekursiver Fall: n! = n * (n-1)!\n    return n * factorial(n - 1);\n}\n```\n\n**Dokumentationskommentare (JavaDoc):**\n```java\n/**\n * Berechnet die Fakultät einer nicht-negativen Ganzzahl.\n * \n * @param n Die Zahl, deren Fakultät berechnet werden soll (n >= 0)\n * @return Die Fakultät von n\n * @throws IllegalArgumentException wenn n negativ ist\n * @example\n * factorial(5) // returns 120\n * factorial(0) // returns 1\n */\npublic int factorial(int n) {\n    if (n < 0) {\n        throw new IllegalArgumentException(\"n must be non-negative\");\n    }\n    if (n == 0) return 1;\n    return n * factorial(n - 1);\n}\n```\n\n### 2. API-Dokumentation\n\n**REST API Beispiel:**\n```markdown\n## GET /api/users/{id}\n\nRuft einen Benutzer anhand seiner ID ab.\n\n### Parameter\n- `id` (path, required): Benutzer-ID (integer)\n\n### Response\n**Status 200 OK:**\n```json\n{\n  \"id\": 123,\n  \"name\": \"Max Mustermann\",\n  \"email\": \"max@example.com\",\n  \"created_at\": \"2025-01-10T10:00:00Z\"\n}\n```\n\n**Status 404 Not Found:**\n```json\n{\n  \"error\": \"User not found\"\n}\n```\n\n### Beispiel\n```bash\ncurl -X GET https://api.example.com/api/users/123 \\\n  -H \"Authorization: Bearer TOKEN\"\n```\n```\n\n### 3. README-Dokumentation\n\n**Struktur:**\n```markdown\n# Projektname\n\nKurze Beschreibung des Projekts\n\n## Features\n- Feature 1\n- Feature 2\n\n## Installation\n```bash\nnpm install\n```\n\n## Verwendung\n```bash\nnpm start\n```\n\n## Konfiguration\nUmgebungsvariablen:\n- `DATABASE_URL`: Datenbank-Verbindungsstring\n- `API_KEY`: API-Schlüssel\n\n## Tests\n```bash\nnpm test\n```\n\n## Lizenz\nMIT\n```\n\n### 4. Konfigurationsdokumentation\n\n**Beispiel: application.yml**\n```yaml\n# Datenbankverbindung\ndatabase:\n  # Hostname des Datenbankservers\n  host: localhost\n  # Port (Standard: 5432 für PostgreSQL)\n  port: 5432\n  # Datenbankname\n  name: myapp_production\n  # Verbindungspool-Größe (min: 5, max: 50)\n  pool_size: 20\n\n# Logging-Konfiguration\nlogging:\n  # Log-Level: DEBUG, INFO, WARN, ERROR\n  level: INFO\n  # Log-Datei-Pfad\n  file: /var/log/myapp/app.log\n  # Maximale Dateigröße vor Rotation (in MB)\n  max_size: 100\n```\n\n## Dokumentations-Standards\n\n### JavaDoc (Java)\n\n**Tags:**\n- `@param`: Parameter-Beschreibung\n- `@return`: Rückgabewert\n- `@throws`: Exceptions\n- `@deprecated`: Veraltete Methoden\n- `@see`: Verweis auf andere Klassen/Methoden\n- `@since`: Version, seit der verfügbar\n- `@author`: Autor\n\n### JSDoc (JavaScript)\n\n```javascript\n/**\n * Addiert zwei Zahlen.\n * @param {number} a - Erste Zahl\n * @param {number} b - Zweite Zahl\n * @returns {number} Die Summe von a und b\n * @example\n * add(2, 3) // returns 5\n */\nfunction add(a, b) {\n    return a + b;\n}\n```\n\n### Python Docstrings\n\n```python\ndef calculate_average(numbers):\n    \"\"\"\n    Berechnet den Durchschnitt einer Liste von Zahlen.\n    \n    Args:\n        numbers (list): Liste von Zahlen (int oder float)\n    \n    Returns:\n        float: Durchschnittswert\n    \n    Raises:\n        ValueError: Wenn die Liste leer ist\n    \n    Example:\n        >>> calculate_average([1, 2, 3, 4, 5])\n        3.0\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"Liste darf nicht leer sein\")\n    return sum(numbers) / len(numbers)\n```\n\n## Best Practices\n\n### 1. Code-Kommentare\n\n**DO:**\n```java\n// Verwende Binary Search für bessere Performance bei großen Arrays\nint index = Arrays.binarySearch(sortedArray, target);\n```\n\n**DON'T:**\n```java\n// Inkrementiere i um 1\ni++;\n```\n\n**Regel**: Erkläre das \"Warum\", nicht das \"Was\"\n\n### 2. Selbstdokumentierender Code\n\n**Schlecht:**\n```java\nint d; // Anzahl Tage\n```\n\n**Gut:**\n```java\nint daysUntilDeadline;\n```\n\n### 3. Aktualität\n\n- Dokumentation bei Code-Änderungen aktualisieren\n- Veraltete Kommentare entfernen\n- Versionierung der Dokumentation\n\n### 4. Zielgruppenorientierung\n\n**Für Entwickler:**\n- Technische Details\n- Code-Beispiele\n- Architektur-Diagramme\n\n**Für Endnutzer:**\n- Einfache Sprache\n- Screenshots\n- Schritt-für-Schritt-Anleitungen\n\n## Dokumentations-Tools\n\n### Swagger/OpenAPI (REST APIs)\n\n```yaml\nopenapi: 3.0.0\ninfo:\n  title: User API\n  version: 1.0.0\npaths:\n  /users/{id}:\n    get:\n      summary: Get user by ID\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n```\n\n### Sphinx (Python)\n\n```python\n# conf.py\nextensions = ['sphinx.ext.autodoc', 'sphinx.ext.napoleon']\n\n# Generiert HTML-Dokumentation aus Docstrings\n```\n\n### Doxygen (C/C++)\n\n```cpp\n/**\n * @brief Berechnet die Summe zweier Zahlen\n * @param a Erste Zahl\n * @param b Zweite Zahl\n * @return Summe von a und b\n */\nint add(int a, int b) {\n    return a + b;\n}\n```\n\n### MkDocs (Markdown)\n\n```yaml\n# mkdocs.yml\nsite_name: My Project\nnav:\n  - Home: index.md\n  - Installation: installation.md\n  - API Reference: api.md\ntheme: material\n```\n\n## Architektur-Dokumentation\n\n### C4-Modell\n\n**Level 1: System Context**\n```\n[Benutzer] -> [System] -> [Datenbank]\n```\n\n**Level 2: Container**\n```\n[Web App] -> [API] -> [Datenbank]\n           -> [Cache]\n```\n\n**Level 3: Component**\n```\n[Controller] -> [Service] -> [Repository]\n```\n\n### UML-Diagramme\n\n- **Klassendiagramm**: Struktur\n- **Sequenzdiagramm**: Ablauf\n- **Komponentendiagramm**: Architektur\n\n## Changelog\n\n```markdown\n# Changelog\n\n## [1.2.0] - 2025-01-10\n### Added\n- Neue Funktion: Benutzer-Export\n- API-Endpoint: GET /api/users/export\n\n### Changed\n- Performance-Verbesserung bei Datenbankabfragen\n- UI-Update für Dashboard\n\n### Fixed\n- Bug #123: Login-Fehler bei Sonderzeichen\n- Bug #124: Speicherleck in Cache\n\n### Deprecated\n- API v1 wird ab 2025-06-01 nicht mehr unterstützt\n\n## [1.1.0] - 2024-12-15\n...\n```\n\n## Deployment-Dokumentation\n\n```markdown\n# Deployment-Anleitung\n\n## Voraussetzungen\n- Node.js 18+\n- PostgreSQL 14+\n- Redis 6+\n\n## Umgebungsvariablen\n```bash\nDATABASE_URL=postgresql://user:pass@localhost:5432/mydb\nREDIS_URL=redis://localhost:6379\nAPI_KEY=your-secret-key\n```\n\n## Installation\n```bash\n# Dependencies installieren\nnpm install\n\n# Datenbank migrieren\nnpm run migrate\n\n# Build erstellen\nnpm run build\n```\n\n## Start\n```bash\n# Production\nnpm start\n\n# Development\nnpm run dev\n```\n\n## Monitoring\n- Logs: `/var/log/myapp/`\n- Metrics: `http://localhost:9090/metrics`\n- Health Check: `http://localhost:3000/health`\n```\n\n## Prüfungsrelevante Aspekte\n\n- Arten der Dokumentation kennen\n- Dokumentations-Standards (JavaDoc, JSDoc, Docstrings) verstehen\n- Best Practices für Code-Kommentare kennen\n- API-Dokumentation erstellen können\n- README-Struktur kennen\n- Konfigurationsdokumentation schreiben\n- Dokumentations-Tools kennen\n- Changelog-Format verstehen",
  "codeExamples": [
    {
      "language": "java",
      "code": "/**\n * Service für Benutzerverwaltung.\n * \n * Diese Klasse bietet Methoden zum Erstellen, Lesen, Aktualisieren\n * und Löschen von Benutzern.\n * \n * @author Max Mustermann\n * @version 1.0\n * @since 2025-01-10\n */\npublic class UserService {\n    \n    /**\n     * Erstellt einen neuen Benutzer.\n     * \n     * @param username Benutzername (3-20 Zeichen, alphanumerisch)\n     * @param email E-Mail-Adresse (muss gültig sein)\n     * @param password Passwort (min. 8 Zeichen)\n     * @return Der erstellte Benutzer mit generierter ID\n     * @throws IllegalArgumentException wenn Parameter ungültig sind\n     * @throws DuplicateUserException wenn Benutzername bereits existiert\n     */\n    public User createUser(String username, String email, String password) {\n        // Validierung\n        if (username == null || username.length() < 3) {\n            throw new IllegalArgumentException(\"Username zu kurz\");\n        }\n        \n        // Prüfe auf Duplikate\n        if (userRepository.existsByUsername(username)) {\n            throw new DuplicateUserException(\"Username bereits vergeben\");\n        }\n        \n        // Erstelle Benutzer\n        User user = new User(username, email, hashPassword(password));\n        return userRepository.save(user);\n    }\n}",
      "explanation": "Vollständig dokumentierte Java-Klasse mit JavaDoc",
      "title": "JavaDoc Beispiel"
    }
  ],
  "relatedQuizzes": [],
  "resources": [
    {
      "title": "Oracle JavaDoc Guide",
      "url": "https://www.oracle.com/technical-resources/articles/java/javadoc-tool.html",
      "type": "documentation"
    },
    {
      "title": "Swagger/OpenAPI Specification",
      "url": "https://swagger.io/specification/",
      "type": "documentation"
    }
  ],
  "lastUpdated": "2025-01-10T00:00:00Z",
  "version": "1.0"
}
