{
  "id": "fue-02-development",
  "title": "FÜ-02: Entwickeln und Bereitstellen von Softwareanwendungen",
  "description": "Kontrollstrukturen mit Aktivitätsdiagrammen und Pseudocode, Datenbank-Anomalien und Redundanzen erkennen. Wichtig: Struktogramme und PAP sind ab 2025 nicht mehr prüfungsrelevant.",
  "category": "FÜ-02",
  "subcategory": "Entwickeln und Bereitstellen",
  "difficulty": "intermediate",
  "examRelevance": "high",
  "newIn2025": false,
  "removedIn2025": false,
  "important": true,
  "estimatedTime": "120 Minuten",
  "prerequisites": [],
  "tags": [
    "Kontrollstrukturen",
    "Aktivitätsdiagramm",
    "Pseudocode",
    "Datenbank-Anomalien",
    "Normalisierung",
    "Redundanzen"
  ],
  "content": "# FÜ-02: Entwickeln und Bereitstellen von Softwareanwendungen\n\n## Einführung\n\nDieses Modul behandelt grundlegende Konzepte der Softwareentwicklung, insbesondere Kontrollstrukturen und Datenbankdesign. **Wichtig für die Prüfung ab 2025**: Struktogramme (Nassi-Shneiderman-Diagramme) und Programmablaufpläne (PAP) sind nicht mehr prüfungsrelevant. Stattdessen werden **Aktivitätsdiagramme** und **Pseudocode** verwendet.\n\n<!-- micro-quiz:fue-02-development-einfuhrung-micro-1 -->\n## 1. Kontrollstrukturen\n\n### 1.1 Grundlegende Kontrollstrukturen\n\nEs gibt drei grundlegende Kontrollstrukturen in der Programmierung:\n\n1. **Sequenz**: Befehle werden nacheinander ausgeführt\n2. **Selektion (Verzweigung)**: Bedingte Ausführung von Code\n3. **Iteration (Schleife)**: Wiederholte Ausführung von Code\n\n### 1.2 Aktivitätsdiagramme (UML)\n\n**NEU AB 2025**: Aktivitätsdiagramme sind die bevorzugte Methode zur Darstellung von Kontrollflüssen.\n\n#### Grundelemente eines Aktivitätsdiagramms:\n\n- **Startknoten**: Gefüllter Kreis (●)\n- **Endknoten**: Gefüllter Kreis mit Ring (◉)\n- **Aktivität**: Abgerundetes Rechteck\n- **Entscheidungsknoten**: Raute (◇)\n- **Merge-Knoten**: Raute (◇)\n- **Fork/Join**: Horizontaler/vertikaler Balken\n- **Kontrollfluss**: Pfeil (→)\n\n#### Beispiel: Benutzer-Login\n\n```\n    (●) Start\n     |\n     v\n[Benutzername eingeben]\n     |\n     v\n[Passwort eingeben]\n     |\n     v\n    <◇> Korrekt?\n   /   \\\n Ja     Nein\n /       \\\nv         v\n[Dashboard]  [Fehlermeldung]\n |         |\n v         v\n(◉)       (◉)\n```\n\n#### Beispiel: Schleife mit Aktivitätsdiagramm\n\n```\n    (●) Start\n     |\n     v\n[i = 0]\n     |\n     v\n    <◇> i < 10?\n   /   \\\n Nein   Ja\n /       \\\nv         v\n(◉)    [Ausgabe i]\n         |\n         v\n       [i++]\n         |\n         +--→ (zurück zur Bedingung)\n```\n\n### 1.3 Pseudocode\n\n**NEU AB 2025**: Pseudocode ist eine weitere akzeptierte Methode zur Darstellung von Algorithmen.\n\nPseudocode ist eine informelle Beschreibung eines Algorithmus in natürlicher Sprache mit programmiersprachlichen Elementen.\n\n#### Beispiel: Benutzer-Login in Pseudocode\n\n```\nFUNKTION login(benutzername, passwort)\n    WENN benutzername IST LEER ODER passwort IST LEER DANN\n        RÜCKGABE \"Fehler: Felder dürfen nicht leer sein\"\n    ENDE WENN\n    \n    benutzer = findeBenutzer(benutzername)\n    \n    WENN benutzer NICHT EXISTIERT DANN\n        RÜCKGABE \"Fehler: Benutzer nicht gefunden\"\n    ENDE WENN\n    \n    WENN passwort STIMMT ÜBEREIN MIT benutzer.passwort DANN\n        erstelleSession(benutzer)\n        RÜCKGABE \"Erfolg\"\n    SONST\n        RÜCKGABE \"Fehler: Falsches Passwort\"\n    ENDE WENN\nENDE FUNKTION\n```\n\n#### Beispiel: Bubble Sort in Pseudocode\n\n```\nFUNKTION bubbleSort(array)\n    n = LÄNGE(array)\n    \n    FÜR i VON 0 BIS n-1\n        FÜR j VON 0 BIS n-i-2\n            WENN array[j] > array[j+1] DANN\n                // Tausche Elemente\n                temp = array[j]\n                array[j] = array[j+1]\n                array[j+1] = temp\n            ENDE WENN\n        ENDE FÜR\n    ENDE FÜR\n    \n    RÜCKGABE array\nENDE FUNKTION\n```\n\n### 1.4 Veraltete Darstellungsformen (NICHT mehr prüfungsrelevant ab 2025)\n\n⚠️ **WICHTIG**: Die folgenden Darstellungsformen sind ab 2025 NICHT mehr Teil des Prüfungskatalogs:\n\n- **Struktogramm (Nassi-Shneiderman-Diagramm)**\n- **Programmablaufplan (PAP / Flussdiagramm)**\n\nFalls Sie diese in älteren Unterlagen finden, konzentrieren Sie sich stattdessen auf **Aktivitätsdiagramme** und **Pseudocode**.\n\n## 2. Datenbank-Anomalien und Redundanzen\n<!-- micro-quiz:fue-02-development-1-kontrollstrukturen-micro-1 -->\n\n\n**NEU AB 2025**: Erkennen von Anomalien und Redundanzen in Datenbanken ist explizit prüfungsrelevant.\n\n### 2.1 Was sind Anomalien?\n\nAnomalien sind Probleme, die bei schlecht strukturierten Datenbanken auftreten können. Sie entstehen durch Redundanzen und fehlende Normalisierung.\n\n### 2.2 Arten von Anomalien\n\n#### 2.2.1 Einfüge-Anomalie (Insert Anomaly)\n\nEin neuer Datensatz kann nicht eingefügt werden, ohne dass zusätzliche, möglicherweise unbekannte Daten eingegeben werden müssen.\n\n**Beispiel:**\n\n```\nTabelle: Mitarbeiter_Projekte\n+---------------+------------+----------------+------------------+\n| MitarbeiterID | Name       | ProjektID      | Projektname      |\n+---------------+------------+----------------+------------------+\n| 1             | Anna Meyer | P001           | Website Relaunch |\n| 2             | Tom Müller | P002           | CRM System       |\n+---------------+------------+----------------+------------------+\n```\n\n**Problem**: Ein neues Projekt kann nicht angelegt werden, ohne dass ein Mitarbeiter zugewiesen wird.\n\n#### 2.2.2 Änderungs-Anomalie (Update Anomaly)\n\nBei Änderung eines Wertes müssen mehrere Datensätze aktualisiert werden, sonst entstehen Inkonsistenzen.\n\n**Beispiel:**\n\n```\nTabelle: Bestellungen\n+-------------+---------------+------------------+\n| BestellungID| KundenName    | KundenAdresse    |\n+-------------+---------------+------------------+\n| 1           | Max Mustermann| Hauptstr. 1      |\n| 2           | Max Mustermann| Hauptstr. 1      |\n| 3           | Max Mustermann| Hauptstr. 1      |\n+-------------+---------------+------------------+\n```\n\n**Problem**: Wenn Max Mustermann umzieht, müssen alle drei Datensätze geändert werden. Wird einer vergessen, entstehen Inkonsistenzen.\n\n#### 2.2.3 Lösch-Anomalie (Delete Anomaly)\n\nBeim Löschen eines Datensatzes gehen ungewollt weitere Informationen verloren.\n\n**Beispiel:**\n\n```\nTabelle: Mitarbeiter_Abteilungen\n+---------------+------------+-------------+------------------+\n| MitarbeiterID | Name       | AbteilungID | Abteilungsname   |\n+---------------+------------+-------------+------------------+\n| 1             | Anna Meyer | A01         | IT               |\n| 2             | Tom Müller | A02         | Marketing        |\n+---------------+------------+-------------+------------------+\n```\n\n**Problem**: Wenn Tom Müller (der einzige Mitarbeiter im Marketing) gelöscht wird, geht die Information über die Marketing-Abteilung verloren.\n\n### 2.3 Redundanzen\n\nRedundanz bedeutet, dass dieselbe Information mehrfach in der Datenbank gespeichert wird.\n\n**Beispiel für Redundanz:**\n\n```\nTabelle: Bestellungen\n+-------------+---------------+------------------+-------------+\n| BestellungID| KundenName    | KundenEmail      | Produkt     |\n+-------------+---------------+------------------+-------------+\n| 1           | Max Mustermann| max@example.com  | Laptop      |\n| 2           | Max Mustermann| max@example.com  | Maus        |\n| 3           | Max Mustermann| max@example.com  | Tastatur    |\n+-------------+---------------+------------------+-------------+\n```\n\n**Problem**: Name und E-Mail von Max Mustermann werden dreimal gespeichert.\n\n**Nachteile von Redundanzen:**\n- Verschwendung von Speicherplatz\n- Erhöhtes Risiko für Inkonsistenzen\n- Höherer Wartungsaufwand\n- Langsamere Datenbank-Performance\n\n### 2.4 Normalisierung als Lösung\n\nNormalisierung ist der Prozess, Redundanzen zu eliminieren und Anomalien zu vermeiden.\n\n#### Erste Normalform (1NF)\n\n**Regel**: Jedes Attribut muss atomar sein (keine Listen oder Mehrfachwerte).\n\n**Nicht in 1NF:**\n```\nTabelle: Kunden\n+----------+----------------+-------------------------+\n| KundenID | Name           | Telefonnummern          |\n+----------+----------------+-------------------------+\n| 1        | Max Mustermann | 0123-456, 0789-012      |\n+----------+----------------+-------------------------+\n```\n\n**In 1NF:**\n```\nTabelle: Kunden\n+----------+----------------+\n| KundenID | Name           |\n+----------+----------------+\n| 1        | Max Mustermann |\n+----------+----------------+\n\nTabelle: Telefonnummern\n+----------+----------------+\n| KundenID | Telefonnummer  |\n+----------+----------------+\n| 1        | 0123-456       |\n| 1        | 0789-012       |\n+----------+----------------+\n```\n\n#### Zweite Normalform (2NF)\n\n**Regel**: 1NF + Alle Nicht-Schlüssel-Attribute sind voll funktional abhängig vom Primärschlüssel.\n\n**Nicht in 2NF:**\n```\nTabelle: Bestellpositionen\n+-------------+----------+---------------+------------+\n| BestellungID| ProduktID| Produktname   | Menge      |\n+-------------+----------+---------------+------------+\n| 1           | 101      | Laptop        | 2          |\n+-------------+----------+---------------+------------+\n```\n\n**Problem**: Produktname hängt nur von ProduktID ab, nicht von der Kombination BestellungID + ProduktID.\n\n**In 2NF:**\n```\nTabelle: Bestellpositionen\n+-------------+----------+------------+\n| BestellungID| ProduktID| Menge      |\n+-------------+----------+------------+\n| 1           | 101      | 2          |\n+-------------+----------+------------+\n\nTabelle: Produkte\n+----------+---------------+\n| ProduktID| Produktname   |\n+----------+---------------+\n| 101      | Laptop        |\n+----------+---------------+\n```\n\n#### Dritte Normalform (3NF)\n\n**Regel**: 2NF + Keine transitiven Abhängigkeiten (Nicht-Schlüssel-Attribute dürfen nicht von anderen Nicht-Schlüssel-Attributen abhängen).\n\n**Nicht in 3NF:**\n```\nTabelle: Mitarbeiter\n+---------------+------------+-------------+------------------+\n| MitarbeiterID | Name       | AbteilungID | Abteilungsname   |\n+---------------+------------+-------------+------------------+\n| 1             | Anna Meyer | A01         | IT               |\n+---------------+------------+-------------+------------------+\n```\n\n**Problem**: Abteilungsname hängt von AbteilungID ab, nicht direkt von MitarbeiterID.\n\n**In 3NF:**\n```\nTabelle: Mitarbeiter\n+---------------+------------+-------------+\n| MitarbeiterID | Name       | AbteilungID |\n+---------------+------------+-------------+\n| 1             | Anna Meyer | A01         |\n+---------------+------------+-------------+\n\nTabelle: Abteilungen\n+-------------+------------------+\n| AbteilungID | Abteilungsname   |\n+-------------+------------------+\n| A01         | IT               |\n+-------------+------------------+\n```\n\n### 2.5 Anomalien erkennen - Prüfungstipps\n\n**Checkliste für die Prüfung:**\n\n1. **Einfüge-Anomalie prüfen:**\n   - Kann ich einen neuen Datensatz einfügen, ohne unbekannte Daten eingeben zu müssen?\n\n2. **Änderungs-Anomalie prüfen:**\n   - Muss ich bei einer Änderung mehrere Datensätze aktualisieren?\n   - Gibt es redundante Daten?\n\n3. **Lösch-Anomalie prüfen:**\n   - Gehen beim Löschen eines Datensatzes ungewollt andere Informationen verloren?\n\n4. **Redundanzen identifizieren:**\n   - Werden dieselben Daten mehrfach gespeichert?\n   - Können Daten in separate Tabellen ausgelagert werden?\n\n<!-- micro-quiz:fue-02-development-2-datenbank-anomalien-und-redundanzen-micro-1 -->\n## 3. Praktische Übungen\n\n### Übung 1: Aktivitätsdiagramm erstellen\n\n**Aufgabe**: Erstellen Sie ein Aktivitätsdiagramm für den folgenden Prozess:\n\n\"Ein Benutzer möchte ein Produkt kaufen. Zuerst prüft das System, ob das Produkt auf Lager ist. Wenn ja, wird der Preis berechnet. Wenn der Benutzer genug Guthaben hat, wird die Bestellung abgeschlossen. Andernfalls wird eine Fehlermeldung angezeigt.\"\n\n### Übung 2: Pseudocode schreiben\n\n**Aufgabe**: Schreiben Sie Pseudocode für eine Funktion, die prüft, ob eine Zahl eine Primzahl ist.\n\n### Übung 3: Anomalien identifizieren\n\n**Aufgabe**: Analysieren Sie die folgende Tabelle und identifizieren Sie alle Anomalien:\n\n```\nTabelle: Kurse\n+--------+------------+----------+---------------+------------------+\n| KursID | Kursname   | DozentenID| Dozentenname  | Raum             |\n+--------+------------+----------+---------------+------------------+\n| K01    | Java       | D01      | Dr. Schmidt   | R101             |\n| K02    | Python     | D01      | Dr. Schmidt   | R102             |\n| K03    | JavaScript | D02      | Prof. Müller  | R101             |\n+--------+------------+----------+---------------+------------------+\n```\n\n## Prüfungsrelevante Punkte\n<!-- micro-quiz:fue-02-development-3-praktische-ubungen-micro-1 -->\n\n\n✓ Aktivitätsdiagramme lesen und erstellen können\n✓ Pseudocode schreiben und verstehen\n✓ Einfüge-, Änderungs- und Lösch-Anomalien erkennen\n✓ Redundanzen in Datenbanken identifizieren\n✓ Normalformen (1NF, 2NF, 3NF) anwenden\n✓ **NICHT mehr relevant**: Struktogramme und PAP\n\n<!-- micro-quiz:fue-02-development-prufungsrelevante-punkte-micro-1 -->\n## Zusammenfassung\n\n**Kontrollstrukturen ab 2025:**\n- Aktivitätsdiagramme (UML) sind die bevorzugte Darstellungsform\n- Pseudocode ist eine akzeptierte Alternative\n- Struktogramme und PAP sind nicht mehr prüfungsrelevant\n\n**Datenbank-Anomalien:**\n- Einfüge-Anomalie: Neue Daten können nicht ohne zusätzliche Informationen eingefügt werden\n- Änderungs-Anomalie: Änderungen müssen an mehreren Stellen durchgeführt werden\n- Lösch-Anomalie: Beim Löschen gehen ungewollt Informationen verloren\n- Lösung: Normalisierung (1NF, 2NF, 3NF)\n\n\n\n<!-- micro-quiz:fue-02-development-quiz -->\n<!-- micro-quiz:fue-02-development-zusammenfassung-micro-1 -->\n",
  "codeExamples": [
    {
      "language": "pseudocode",
      "title": "Beispiel: Primzahl-Prüfung in Pseudocode",
      "code": "FUNKTION istPrimzahl(zahl)\n    WENN zahl <= 1 DANN\n        RÜCKGABE FALSCH\n    ENDE WENN\n    \n    WENN zahl == 2 DANN\n        RÜCKGABE WAHR\n    ENDE WENN\n    \n    WENN zahl MODULO 2 == 0 DANN\n        RÜCKGABE FALSCH\n    ENDE WENN\n    \n    FÜR i VON 3 BIS WURZEL(zahl) SCHRITT 2\n        WENN zahl MODULO i == 0 DANN\n            RÜCKGABE FALSCH\n        ENDE WENN\n    ENDE FÜR\n    \n    RÜCKGABE WAHR\nENDE FUNKTION",
      "explanation": "Dieser Pseudocode prüft, ob eine Zahl eine Primzahl ist. Er testet Teilbarkeit durch 2 und dann durch alle ungeraden Zahlen bis zur Wurzel der Zahl."
    },
    {
      "language": "sql",
      "title": "Beispiel: Normalisierung - Vorher und Nachher",
      "code": "-- VORHER: Nicht normalisiert (Redundanzen und Anomalien)\nCREATE TABLE Bestellungen_Unnormalisiert (\n    BestellungID INT PRIMARY KEY,\n    KundenName VARCHAR(100),\n    KundenEmail VARCHAR(100),\n    KundenAdresse VARCHAR(200),\n    ProduktName VARCHAR(100),\n    ProduktPreis DECIMAL(10,2),\n    Menge INT\n);\n\n-- NACHHER: Normalisiert (3NF)\nCREATE TABLE Kunden (\n    KundenID INT PRIMARY KEY,\n    Name VARCHAR(100),\n    Email VARCHAR(100),\n    Adresse VARCHAR(200)\n);\n\nCREATE TABLE Produkte (\n    ProduktID INT PRIMARY KEY,\n    Name VARCHAR(100),\n    Preis DECIMAL(10,2)\n);\n\nCREATE TABLE Bestellungen (\n    BestellungID INT PRIMARY KEY,\n    KundenID INT,\n    Bestelldatum DATE,\n    FOREIGN KEY (KundenID) REFERENCES Kunden(KundenID)\n);\n\nCREATE TABLE Bestellpositionen (\n    BestellungID INT,\n    ProduktID INT,\n    Menge INT,\n    PRIMARY KEY (BestellungID, ProduktID),\n    FOREIGN KEY (BestellungID) REFERENCES Bestellungen(BestellungID),\n    FOREIGN KEY (ProduktID) REFERENCES Produkte(ProduktID)\n);",
      "explanation": "Durch Normalisierung werden Redundanzen eliminiert und Anomalien vermieden. Jede Entität hat ihre eigene Tabelle, und Beziehungen werden über Fremdschlüssel hergestellt."
    }
  ],
  "relatedQuizzes": [
    "fue-02-development-quiz"
  ],
  "resources": [
    {
      "title": "UML Aktivitätsdiagramme",
      "url": "https://www.uml-diagrams.org/activity-diagrams.html",
      "type": "documentation"
    },
    {
      "title": "Datenbank-Normalisierung",
      "url": "https://www.datenbanken-verstehen.de/normalisierung",
      "type": "article"
    }
  ],
  "lastUpdated": "2025-01-10T00:00:00Z",
  "version": "1.0",
  "learningObjectives": [
    "Du kannst kontrollstrukturen erklären",
    "Du kannst aktivitätsdiagramm erklären",
    "Du kannst pseudocode erklären",
    "Du kannst datenbank-Anomalien erklären",
    "Du kannst normalisierung erklären"
  ],
  "summary": "Kontrollstrukturen mit Aktivitätsdiagrammen und Pseudocode, Datenbank-Anomalien und Redundanzen erkennen.",
  "contentOutline": [
    {
      "id": "fu-02-entwickeln-und-bereitstellen-von-softwareanw",
      "title": "FÜ-02: Entwickeln und Bereitstellen von Softwareanwendungen",
      "summary": "Kernaspekt: FÜ-02: Entwickeln und Bereitstellen von Softwareanwendungen"
    },
    {
      "id": "einfuhrung",
      "title": "Einführung",
      "summary": "Kernaspekt: Einführung"
    },
    {
      "id": "1-kontrollstrukturen",
      "title": "1. Kontrollstrukturen",
      "summary": "Kernaspekt: 1. Kontrollstrukturen"
    },
    {
      "id": "2-datenbank-anomalien-und-redundanzen",
      "title": "2. Datenbank-Anomalien und Redundanzen",
      "summary": "Kernaspekt: 2. Datenbank-Anomalien und Redundanzen"
    },
    {
      "id": "3-praktische-ubungen",
      "title": "3. Praktische Übungen",
      "summary": "Kernaspekt: 3. Praktische Übungen"
    },
    {
      "id": "prufungsrelevante-punkte",
      "title": "Prüfungsrelevante Punkte",
      "summary": "Kernaspekt: Prüfungsrelevante Punkte"
    },
    {
      "id": "zusammenfassung",
      "title": "Zusammenfassung",
      "summary": "Kernaspekt: Zusammenfassung"
    }
  ],
  "accessibilityNotes": "Klare Überschriften, kurze Sätze, keine reine Farb-Codierung.",
  "editorNote": "Automatisch ergänzt: Review erforderlich",
  "microQuizzes": [
    "fue-02-development-einfuhrung-micro-1",
    "fue-02-development-1-kontrollstrukturen-micro-1",
    "fue-02-development-2-datenbank-anomalien-und-redundanzen-micro-1",
    "fue-02-development-3-praktische-ubungen-micro-1",
    "fue-02-development-prufungsrelevante-punkte-micro-1",
    "fue-02-development-quiz",
    "fue-02-development-zusammenfassung-micro-1"
  ]
}