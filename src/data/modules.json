[
  {
    "id": "module-1",
    "title": "Introduction to JavaScript",
    "description": "Learn the fundamentals of JavaScript programming, including variables, data types, and basic syntax.",
    "category": "Programming",
    "duration": 30,
    "prerequisites": [],
    "content": "# Introduction to JavaScript\n\nJavaScript is a versatile programming language that powers the web. Let's explore the basics!\n\n## Variables and Data Types\n\nIn JavaScript, you can declare variables using `let`, `const`, or `var`:\n\n```javascript\nlet name = 'Alice';\nconst age = 25;\nvar isStudent = true;\n```\n\n### Primitive Data Types\n\n- **String**: Text data\n- **Number**: Numeric values\n- **Boolean**: true or false\n- **Undefined**: Variable declared but not assigned\n- **Null**: Intentional absence of value\n\n## Functions\n\nFunctions are reusable blocks of code:\n\n```javascript\nfunction greet(name) {\n  return `Hello, ${name}!`;\n}\n\nconsole.log(greet('World')); // Output: Hello, World!\n```\n\n## Arrays\n\nArrays store multiple values:\n\n```javascript\nconst fruits = ['apple', 'banana', 'orange'];\nconsole.log(fruits[0]); // Output: apple\n```\n\n<!-- micro-quiz:demo-mq1 -->\n\n## Objects\n\nObjects store key-value pairs:\n\n```javascript\nconst person = {\n  name: 'John',\n  age: 30,\n  greet() {\n    console.log(`Hi, I'm ${this.name}`);\n  }\n};\n```\n\n<!-- micro-quiz:demo-mq2 -->\n\n## Practice Exercise\n\nTry creating a function that takes an array of numbers and returns their sum!",
    "completed": false,
    "lastAccessed": null,
    "microQuizzes": ["demo-mq1"],
    "requiredSections": []
  },
  {
    "id": "module-2",
    "title": "Working with Arrays",
    "description": "Master array methods and learn how to manipulate collections of data effectively.",
    "category": "Programming",
    "duration": 45,
    "prerequisites": ["module-1"],
    "content": "# Working with Arrays\n\nArrays are one of the most important data structures in JavaScript. Let's dive deep!\n\n## Array Methods\n\n### map()\n\nTransform each element in an array:\n\n```javascript\nconst numbers = [1, 2, 3, 4, 5];\nconst doubled = numbers.map(num => num * 2);\nconsole.log(doubled); // [2, 4, 6, 8, 10]\n```\n\n### filter()\n\nSelect elements that meet a condition:\n\n```javascript\nconst numbers = [1, 2, 3, 4, 5, 6];\nconst evens = numbers.filter(num => num % 2 === 0);\nconsole.log(evens); // [2, 4, 6]\n```\n\n### reduce()\n\nReduce an array to a single value:\n\n```javascript\nconst numbers = [1, 2, 3, 4, 5];\nconst sum = numbers.reduce((acc, num) => acc + num, 0);\nconsole.log(sum); // 15\n```\n\n### find() and findIndex()\n\nFind specific elements:\n\n```javascript\nconst users = [\n  { id: 1, name: 'Alice' },\n  { id: 2, name: 'Bob' }\n];\n\nconst user = users.find(u => u.id === 2);\nconsole.log(user); // { id: 2, name: 'Bob' }\n```\n\n## Chaining Methods\n\nCombine multiple array methods:\n\n```javascript\nconst numbers = [1, 2, 3, 4, 5, 6];\nconst result = numbers\n  .filter(num => num % 2 === 0)\n  .map(num => num * 2)\n  .reduce((acc, num) => acc + num, 0);\n\nconsole.log(result); // 24\n```\n\n## Spread Operator\n\nCopy and merge arrays:\n\n```javascript\nconst arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\nconst combined = [...arr1, ...arr2];\nconsole.log(combined); // [1, 2, 3, 4, 5, 6]\n```",
    "completed": false,
    "lastAccessed": null
  },
  {
    "id": "module-3",
    "title": "Asynchronous JavaScript",
    "description": "Understand promises, async/await, and how to handle asynchronous operations.",
    "category": "Programming",
    "duration": 60,
    "prerequisites": ["module-1"],
    "content": "# Asynchronous JavaScript\n\nJavaScript is single-threaded, but it can handle asynchronous operations efficiently!\n\n## Callbacks\n\nThe traditional way to handle async operations:\n\n```javascript\nfunction fetchData(callback) {\n  setTimeout(() => {\n    callback('Data loaded!');\n  }, 1000);\n}\n\nfetchData(data => {\n  console.log(data);\n});\n```\n\n## Promises\n\nA better way to handle async code:\n\n```javascript\nfunction fetchData() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve('Data loaded!');\n    }, 1000);\n  });\n}\n\nfetchData()\n  .then(data => console.log(data))\n  .catch(error => console.error(error));\n```\n\n## Async/Await\n\nThe modern, cleaner syntax:\n\n```javascript\nasync function loadData() {\n  try {\n    const data = await fetchData();\n    console.log(data);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nloadData();\n```\n\n## Fetching Data from APIs\n\n```javascript\nasync function getUsers() {\n  try {\n    const response = await fetch('https://api.example.com/users');\n    const users = await response.json();\n    return users;\n  } catch (error) {\n    console.error('Failed to fetch users:', error);\n  }\n}\n```\n\n## Promise.all()\n\nRun multiple promises in parallel:\n\n```javascript\nconst promise1 = fetch('/api/users');\nconst promise2 = fetch('/api/posts');\n\nconst [users, posts] = await Promise.all([promise1, promise2]);\n```\n\n## Error Handling\n\nAlways handle errors in async code:\n\n```javascript\nasync function safeOperation() {\n  try {\n    const result = await riskyOperation();\n    return result;\n  } catch (error) {\n    console.error('Operation failed:', error);\n    return null;\n  }\n}\n```",
    "completed": false,
    "lastAccessed": null
  },
  {
    "id": "module-4",
    "title": "DOM Manipulation",
    "description": "Learn how to interact with and modify HTML elements using JavaScript.",
    "category": "Web Development",
    "duration": 40,
    "prerequisites": ["module-1"],
    "content": "# DOM Manipulation\n\nThe Document Object Model (DOM) allows JavaScript to interact with HTML!\n\n## Selecting Elements\n\n```javascript\n// By ID\nconst header = document.getElementById('header');\n\n// By class\nconst buttons = document.getElementsByClassName('btn');\n\n// By CSS selector\nconst firstButton = document.querySelector('.btn');\nconst allButtons = document.querySelectorAll('.btn');\n```\n\n## Modifying Elements\n\n### Changing Content\n\n```javascript\nconst heading = document.querySelector('h1');\nheading.textContent = 'New Title';\nheading.innerHTML = '<strong>Bold Title</strong>';\n```\n\n### Changing Styles\n\n```javascript\nconst box = document.querySelector('.box');\nbox.style.backgroundColor = 'blue';\nbox.style.padding = '20px';\n```\n\n### Adding/Removing Classes\n\n```javascript\nconst element = document.querySelector('.item');\nelement.classList.add('active');\nelement.classList.remove('hidden');\nelement.classList.toggle('selected');\n```\n\n## Creating Elements\n\n```javascript\nconst newDiv = document.createElement('div');\nnewDiv.textContent = 'Hello!';\nnewDiv.classList.add('message');\n\nconst container = document.querySelector('.container');\ncontainer.appendChild(newDiv);\n```\n\n## Event Listeners\n\n```javascript\nconst button = document.querySelector('#myButton');\n\nbutton.addEventListener('click', () => {\n  console.log('Button clicked!');\n});\n\n// Remove event listener\nfunction handleClick() {\n  console.log('Clicked!');\n}\n\nbutton.addEventListener('click', handleClick);\nbutton.removeEventListener('click', handleClick);\n```\n\n## Event Delegation\n\nHandle events on multiple elements efficiently:\n\n```javascript\nconst list = document.querySelector('#myList');\n\nlist.addEventListener('click', (event) => {\n  if (event.target.tagName === 'LI') {\n    console.log('List item clicked:', event.target.textContent);\n  }\n});\n```",
    "completed": false,
    "lastAccessed": null
  },
  {
    "id": "module-5",
    "title": "ES6+ Features",
    "description": "Explore modern JavaScript features including destructuring, spread operator, and more.",
    "category": "Programming",
    "duration": 50,
    "prerequisites": ["module-1", "module-2"],
    "content": "# ES6+ Features\n\nModern JavaScript includes many powerful features that make code cleaner and more efficient!\n\n## Destructuring\n\n### Array Destructuring\n\n```javascript\nconst colors = ['red', 'green', 'blue'];\nconst [first, second] = colors;\nconsole.log(first); // 'red'\n```\n\n### Object Destructuring\n\n```javascript\nconst user = { name: 'Alice', age: 25, city: 'NYC' };\nconst { name, age } = user;\nconsole.log(name); // 'Alice'\n```\n\n## Template Literals\n\n```javascript\nconst name = 'World';\nconst greeting = `Hello, ${name}!`;\n\n// Multi-line strings\nconst message = `\n  This is a\n  multi-line\n  string\n`;\n```\n\n## Arrow Functions\n\n```javascript\n// Traditional function\nfunction add(a, b) {\n  return a + b;\n}\n\n// Arrow function\nconst add = (a, b) => a + b;\n\n// With single parameter\nconst double = x => x * 2;\n```\n\n## Default Parameters\n\n```javascript\nfunction greet(name = 'Guest') {\n  return `Hello, ${name}!`;\n}\n\nconsole.log(greet()); // 'Hello, Guest!'\n```\n\n## Rest and Spread\n\n### Rest Parameters\n\n```javascript\nfunction sum(...numbers) {\n  return numbers.reduce((acc, num) => acc + num, 0);\n}\n\nconsole.log(sum(1, 2, 3, 4)); // 10\n```\n\n### Spread Operator\n\n```javascript\nconst arr1 = [1, 2, 3];\nconst arr2 = [...arr1, 4, 5];\n\nconst obj1 = { a: 1, b: 2 };\nconst obj2 = { ...obj1, c: 3 };\n```\n\n## Optional Chaining\n\n```javascript\nconst user = { profile: { name: 'Alice' } };\nconsole.log(user?.profile?.name); // 'Alice'\nconsole.log(user?.address?.city); // undefined\n```\n\n## Nullish Coalescing\n\n```javascript\nconst value = null ?? 'default';\nconsole.log(value); // 'default'\n\nconst count = 0 ?? 10;\nconsole.log(count); // 0 (not 10!)\n```\n\n## Modules\n\n```javascript\n// export.js\nexport const PI = 3.14159;\nexport function square(x) {\n  return x * x;\n}\n\n// import.js\nimport { PI, square } from './export.js';\n```",
    "completed": false,
    "lastAccessed": null
  },
  {
    "id": "module-6",
    "title": "Object-Oriented JavaScript",
    "description": "Learn about classes, inheritance, and object-oriented programming patterns in JavaScript.",
    "category": "Programming",
    "duration": 55,
    "prerequisites": ["module-1", "module-5"],
    "content": "# Object-Oriented JavaScript\n\nJavaScript supports object-oriented programming with classes and prototypes!\n\n## Classes\n\n### Basic Class\n\n```javascript\nclass Person {\n  constructor(name, age) {\n    this.name = name;\n    this.age = age;\n  }\n\n  greet() {\n    return `Hi, I'm ${this.name}`;\n  }\n\n  get info() {\n    return `${this.name} is ${this.age} years old`;\n  }\n}\n\nconst person = new Person('Alice', 25);\nconsole.log(person.greet());\n```\n\n## Inheritance\n\n```javascript\nclass Animal {\n  constructor(name) {\n    this.name = name;\n  }\n\n  speak() {\n    return `${this.name} makes a sound`;\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name, breed) {\n    super(name);\n    this.breed = breed;\n  }\n\n  speak() {\n    return `${this.name} barks!`;\n  }\n}\n\nconst dog = new Dog('Rex', 'Labrador');\nconsole.log(dog.speak()); // 'Rex barks!'\n```\n\n## Static Methods\n\n```javascript\nclass MathUtils {\n  static add(a, b) {\n    return a + b;\n  }\n\n  static multiply(a, b) {\n    return a * b;\n  }\n}\n\nconsole.log(MathUtils.add(5, 3)); // 8\n```\n\n## Private Fields\n\n```javascript\nclass BankAccount {\n  #balance = 0;\n\n  deposit(amount) {\n    this.#balance += amount;\n  }\n\n  getBalance() {\n    return this.#balance;\n  }\n}\n\nconst account = new BankAccount();\naccount.deposit(100);\nconsole.log(account.getBalance()); // 100\n```\n\n## Composition over Inheritance\n\n```javascript\nconst canEat = {\n  eat(food) {\n    return `Eating ${food}`;\n  }\n};\n\nconst canWalk = {\n  walk() {\n    return 'Walking...';\n  }\n};\n\nclass Person {\n  constructor(name) {\n    this.name = name;\n    Object.assign(this, canEat, canWalk);\n  }\n}\n\nconst person = new Person('Alice');\nconsole.log(person.eat('pizza'));\nconsole.log(person.walk());\n```\n\n## Design Patterns\n\n### Singleton\n\n```javascript\nclass Database {\n  static instance = null;\n\n  constructor() {\n    if (Database.instance) {\n      return Database.instance;\n    }\n    Database.instance = this;\n  }\n}\n```\n\n### Factory\n\n```javascript\nclass UserFactory {\n  static createUser(type, name) {\n    if (type === 'admin') {\n      return new Admin(name);\n    }\n    return new RegularUser(name);\n  }\n}\n```",
    "completed": false,
    "lastAccessed": null
  }
]
