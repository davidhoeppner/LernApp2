{"version":3,"mappings":"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","names":["CategoryMappingService","specializationService","threeTierCategoriesData","error","categoryMappingRulesData","rule","__spreadProps","__spreadValues","a","b","contentItem","sourceCategory","matchingRule","targetCategory","cat","applicableRules","condition","categoryId","specializationId","expectedRelevance","actualRelevance","itemTags","tag","itemTag","reason","categoryInfo","category","_a","contentItems","items","validationResult","item","itemValidation","result","conflicts","relevanceIssues","mappingError","mappingResult","originalCategory","warnings","aeRelevance","dpaRelevance","categoryDistribution","ruleUsage","conflictCount","detail","ruleId","w","priorities","targetCategories","ruleValidation","missingCategories","regexError","StorageService","prefix","test","key","value","prefixedKey","serialized","quotaError","used","total","percentage","ExamProgressService","stateManager","ihkContentService","__async","categories","progress","completed","inProgress","allModules","categoryProgress","mainCategory","subcategory","categoryModules","m","totalModules","completedModules","inProgressModules","completionPercentage","relevanceOrder","relevanceDiff","quizAttempts","weakAreas","quizPerformanceByCategory","attempt","categoryMatch","score","scores","avgScore","sum","uncompletedNewTopics","severityOrder","totalWeight","completedWeight","relevanceWeights","module","weight","moduleReadiness","quizReadiness","newTopics","completedNewTopics","newTopicsReadiness","overallReadiness","readinessLevel","recommendation","recommendations","weak","highRelevanceIncomplete","modulesWithMetPrerequisites","prereq","priorityOrder","completedCount","examReadiness","exportData","_b","rec","jsonString","blob","url","link","IHKContentService","storageService","categoryMappingService","performanceOptimizationService","performanceMonitoringService","categoriesData","examChangesData","modules","newModules","_0","query","filters","results","searchTerm","pathId","path","ap2Path","sqlPath","newTopicsPath","oopPath","continueModules","highRelevance","fue01","fue02dev","fue02anom","fue02ctrl","fue03","fue03load","fue04","fue04threats","bp01conc","bp01doc","bp01kerb","bp01mon","bp02cloud","bp02data","bp02nas","bp03cps","bp03rest","bp03sq","bp03tdd","bp04arch","bp04design","bp04prog","bp04scrum","bp05data","bp05enc","bp05sort","bp05sql","sqlDdl","sqlDml","sqlDql","bpDpa01","bpDpa02","bpDpa03","bpDpa03Adv","bpDpa04","flattenedModules","moduleData","enhancedModule","moduleId","quizId","quiz","__variableDynamicImportRuntimeHelper","__vitePreload","bp01ConceptionQuiz$1","bp01DocumentationQuiz$1","bp01MonitoringQuiz$1","bp01OdbcQuiz$1","bp02CloudModelsQuiz$1","bp02DataFormatsQuiz$1","bp02QualityAssuranceQuiz$1","bp03CpsQuiz$1","bp03RestApiQuiz$1","bp03SoftwareQualityQuiz$1","bp03TddQuiz$1","bp04DesignPatternsQuiz$1","bp04ProgrammingParadigmsQuiz$1","bp04ScrumQuiz$1","bp05DataStructuresQuiz$1","bp05SqlReferenceQuiz$1","bpDpa01ErModelingQuiz$1","bpDpa01NormalizationQuiz$1","bpDpa02EtlQuiz$1","bpDpa03AutomationOrchestrationQuiz$1","bpDpa03BpmnQuiz$1","bpDpa03KpiMeasurementQuiz$1","bpDpa03LeanSixSigmaQuiz$1","bpDpa03ProcessMiningQuiz$1","bpDpa04BiQuiz$1","bpDpa05DataWarehousingQuiz$1","bpDpa06DataQualityQuiz$1","bpDpa07StatisticalAnalysisQuiz$1","bpDpa08ProcessOptimizationQuiz$1","bpDpa09AdvancedBiQuiz$1","fue01PlanningQuiz$1","fue02AnomaliesRedundanciesQuiz$1","fue02ControlStructuresQuiz$1","fue03LoadPerformanceTestsQuiz$1","fue03QualityQuiz$1","fue04SecurityQuiz$1","fue04SecurityThreatsQuiz$1","scrumQuiz$1","sortingAlgorithmsQuiz$1","sqlComprehensiveQuiz$1","sqlDdl2025Quiz$1","sqlDml2025Quiz$1","tddQuiz$1","bp01ConceptionQuiz","bp01DocumentationQuiz","bp01MonitoringQuiz","bp01OdbcQuiz","bp02CloudModelsQuiz","bp02DataFormatsQuiz","bp02NasSanQuiz","bp02QualityAssuranceQuiz","bp03CpsQuiz","bp03RestApiQuiz","bp03SoftwareQualityQuiz","bp03TddQuiz","bp04ArchitecturePatternsQuiz","bp04DesignPatternsQuiz","bp04ProgrammingParadigmsQuiz","bp04ScrumQuiz","bp05DataStructuresQuiz","bp05EncapsulationQuiz","bp05SortingQuiz","bp05SqlReferenceQuiz","fue01PlanningQuiz","fue02AnomaliesRedundanciesQuiz","fue02ControlStructuresQuiz","fue02DevelopmentQuiz","fue03LoadPerformanceTestsQuiz","fue03QualityQuiz","fue04SecurityQuiz","fue04SecurityThreatsQuiz","kerberosQuiz","scrumQuiz","sortingAlgorithmsQuiz","sqlComprehensiveQuiz","sqlDdl2025Quiz","sqlDml2025Quiz","tddQuiz","bpDpa01ErModelingQuiz","bpDpa01NormalizationQuiz","bpDpa02EtlQuiz","bpDpa03BpmnQuiz","bpDpa04BiQuiz","bpDpa05DataWarehousingQuiz","bpDpa06DataQualityQuiz","bpDpa07StatisticalAnalysisQuiz","bpDpa08ProcessOptimizationQuiz","bpDpa09AdvancedBiQuiz","bpDpa03ProcessMiningQuiz","bpDpa03KpiMeasurementQuiz","bpDpa03LeanSixSigmaQuiz","bpDpa03AutomationOrchestrationQuiz","enhancedQuiz","options","includeSpecializationRelevance","includeDifficultyDistribution","includeContentTypes","includeProgressStats","allQuizzes","allContent","stats","categoryContent","categoryQuizzes","categoryStats","filteredModules","relevance","validCategories","cacheKey","contentIds","categorizedContent","contentId","enrichedContent","question","contentTypes","maxResultsPerCategory","minRelevanceScore","includeMetadata","sortBy","filteredResults","itemType","categoryData","categoryError","maxResults","groupByCategory","includeEmptyCategories","searchResults","allResults","groupedResults","categoryOrder","suggestions","similarTerms","word","term","metadata","tagMatches","questionMatches","q","boostedScore","difficultyOrder","aDiff","bDiff","content","distribution","difficulty","percentages","level","breakdown","type","relevanceBreakdown","specId","counts","attempts","bestScore","totalQuestions","moduleTotal","quizTotal","insights","maxContent","count","average","variance","standardDeviation","coefficientOfVariation","mostDiverse","lowestVariance","diffCounts","diffTotal","diffAverage","diffVariance","maxBeginnerPercentage","beginnerPercentage","categoryScores","sortedCategories","totalContent","index","ranking","relevanceScore","highRelevanceCount","categoryIndexes","threeTierCategory","combinedIds","contentType","map","bytes","validCacheKeys","contentStats","searchOptions","__objRest","filteredCategories","maxRelatedPerCategory","includeAllCategories","relationshipTypes","sourceModule","sourceQuiz","sourceContent","sourceTags","itemCategory","commonTags","relationshipScore","categoryRelated","newOptions","startTime","_1","config","ModuleService","modulesData","ihkModules","validModules","id","modulesCompleted","modulesInProgress","updatedModule","categorizedModules","currentSpecialization","HTTP_STATUS","EXAM","PROGRESS_WEIGHTS","TIME","UI","RETRY","PROGRESS_STATUS","ProgressService","moduleService","quizService","totalQuizzes","relevantModules","relevantQuizzes","quizzes","relevantModuleIds","relevantQuizIds","relevantCompletedModules","relevantQuizAttempts","moduleCompletionPercentage","averageQuizScore","totalScore","isCompleted","isInProgress","data","savedProgress","currentProgress","availableSpecializations","comparison","specialization","fromSpecialization","toSpecialization","generalModules","generalInProgress","generalQuizzes","general","moduleIds","categoryBreakdown","categoryCompletion","overallProgress","specializationProgress","QuizService","questionId","answer","isCorrect","answers","correctCount","categorizedQuizzes","allAttempts","quizCategoryMap","AccessibilityHelper","region","message","priority","element","el","container","focusableElements","firstElement","lastElement","handleTabKey","e","itemSelector","targetIndex","i","callback","defaultDuration","accessibilityHelper","Router","appContainer","viewFactory","params","preserveSpecialization","hash","queryString","route","searchParams","pathParams","spec","currentHash","cleanQueryString","cleanHash","routePath","pattern","match","name","matches","viewResult","view","rendered","resolvedRender","scrollBehavior","mainContent","pageName","activeLink","includeSpecialization","urlParams","pageNames","SpecializationService","specializationState","preserveProgress","previousSpecialization","progressSnapshot","progressData","idLower","threeTierBreakdown","changeLog","currentLogs","sessionId","useThreeTierCategories","threeTierRelevance","categoryLower","includeScore","includeReason","scoreMap","categoryIds","specializationIds","includeScores","mapping","relevanceOptions","originalRelevance","relevanceScores","originalScore","threeTierScore","scoreDifference","minRelevance","includeGeneral","relevanceLevels","includeProgress","itemId","preferences","currentPreferences","updatedPreferences","defaultSpecialization","migrationStatus","hasExistingProgress","hasExistingSettings","migrationResult","themePreference","storedState","sessionData","analyticsData","examProgress","context","progressAnalysis","threeTierMigration","migration","threeTierProgress","mockItem","patterns","parts","specializationModules","specializationQuizzes","migrationRecord","migrationHistory","legacyOptions","migrationInfo","validation","testSpecialization","specializations","current","mockContent","filtered","failedTests","threeTierCategories","threeTierFiltered","StateManager","keys","k","target","lastKey","oldValue","newValue","savedState","minimalState","ThemeManager","savedTheme","theme","newTheme","ErrorBoundary","renderFn","args","errorMessage","isStorageError","isNetworkError","_c","_d","isNotFoundError","_e","_f","userMessage","actionButton","icon","baseDelay","backoffMultiplier","milliseconds","resolve","fn","maxRetries","delay","backoff","onRetry","lastError","waitTime","ToastNotification","duration","dismissible","action","toast","dismissBtn","actionBtn","icons","_error","contextMsg","toastNotification","Navigation","themeManager","router","specializationSelector","currentTheme","themeIcon","themeLabel","navMenu","navToggle","navLogo","clickedLink","themeIconEl","themeToggle","srText","firstLink","navActions","existingIndicator","newIndicatorHTML","tempDiv","newIndicator","currentPath","linkPath","formatDate","dateString","locale","date","formatTime","diffMs","diffMinutes","diffHours","diffDays","HomeView","services","recentActivity","greeting","quizzesTaken","averageScore","inProgressCount","activities","activity","hour","startLearning","takeQuiz","viewProgress","EmptyState","title","filter","messages","_filter","filterName","LoadingSpinner","size","fullscreen","overlay","spinner","previousContent","asyncFn","_options","span","button","loading","skeletons","ModuleListView","loadingSpinner","errorState","description","statusBadge","categoryIndicator","prerequisites","actionText","threeTierCategoryId","categoryConfigs","btn","card","existingModuleGrid","newModuleGridHTML","newModuleGrid","ModuleDetailView","markedModule","hljsModule","code","lang","err","md","out","p","isFeatureEnabled","MicroQuizPanel","sidebarActions","mqHost","mq","quizObj","contentEl","host","afterNode","inlineHosts","_","mod","panel","text","t","div","raw","normalized","replaced","toc","headings","tocItems","heading","indent","targetId","updateProgress","windowHeight","documentHeight","scrollPercent","clampedPercent","progressBar","progressFill","activeId","scrollPos","headingId","backBtn","completeBtn","quizBtn","relatedQuiz","notification","debounce","func","wait","immediate","timeout","later","callNow","IHKQuizListView","friendlyMessage","validationReport","lastAttempt","header","quizGrid","filteredQuizzes","countDisplay","filtersContainer","statusFilters","categoryFilters","statusButtons","status","isActive","categoryButtons","grid","emptyState","filterStartTime","statusError","filterDuration","categoryErrors","scoreDisplay","fallbackIndicator","operationId","previousState","availableStatuses","visualError","gridError","a11yError","fallbackError","availableCategories","categoryFilterButtons","updates","update","btnError","quizGridContainer","fallbackState","errorType","guidance","preservedStatusFilter","newContainer","reloadError","hasThreeTierCategory","hasLegacyCategory","hasLegacyCategoryId","report","warning","errorCount","warningCount","baseMessage","renderError","statusFilterButtons","categoryName","statusName","filterParts","filterDescription","otherCategories","otherStatuses","statuses","filteredCount","totalCount","newCountDisplay","operation","filterButtons","filterType","resultCount","announcement","preservedCategoryFilter","QuizResultsDisplay","totalPoints","badge","targetWidth","AnswerReviewSection","questions","userAnswers","userAnswer","statusClass","questionDiv","option","optionClass","userSelected","questionsContainer","questionElement","QuizActionButtons","reviewSection","shareText","primaryActions","retakeBtn","continueBtn","secondaryActions","reviewBtn","relatedBtn","shareBtn","encouragement","IHKQuizView","breadcrumb","navigation","nav","badges","section","questionNumber","savedAnswer","savedAnswers","isFirst","isLast","passed","timeTaken","resultsDisplay","answerReview","actionButtons","checked","v","scoreData","answersArray","newContent","earned","correct","incorrect","timerElement","minutes","seconds","timeString","ProgressView","quizHistory","specializationStats","lastActivity","specializationInfo","completionRate","relevanceColor","colors","notStartedModules","categoryKey","tab","tabName","exportBtn","activeStatusTab","WheelModuleValidator","isValid","fallbacks","validFallbacks","WheelView","currentContainer","retryError","rawModules","loadingSource","serviceError","validationError","criticalError","lastModule","clearError","wheelContainer","controls","selectedDisplay","wheelSVG","spinOverlay","modulesToRender","segmentAngle","radius","centerX","centerY","segments","startAngle","endAngle","color","startRad","endRad","x1","y1","x2","y2","largeArc","pathData","midAngle","midRad","textRadius","textX","textY","againBtn","gotoBtn","display","selectedIndex","animationIndex","indexToUse","finalIndex","wheelGroup","resultDisplay","targetSegmentCenter","targetAngle","totalRotation","winnerModule","finalRotation","segment0CenterAfterRotation","segmentAtPointer","actualSegmentAtPointer","resultContainer","newResultContainer","currentResultDisplay","ms","selectedText","selectedContainer","clickHint","stateData","errorInfo","NotFoundView","goHomeBtn","goBackBtn","SpecializationSelector","onSelectionChange","modal","modalContent","subtitle","optionsContainer","footer","cancelButton","closeButton","selectSpecialization","iconContainer","contentContainer","fullName","examCode","indicator","isFirstTime","existingModal","firstOption","newSpecializationId","confirmDialog","handleConfirm","cleanup","handleCancel","handleEscape","currentSpec","newSpec","dialog","closeBtn","exploreBtn","removeNotification","styles","event","App","navElement","main","demoContainer","fixture","_event","app"],"ignoreList":[],"sources":["../../../src/services/CategoryMappingService.js","../../../src/services/StorageService.js","../../../src/services/ExamProgressService.js","../../../src/services/IHKContentService.js","../../../src/services/ModuleService.js","../../../src/utils/constants.js","../../../src/services/ProgressService.js","../../../src/services/QuizService.js","../../../src/utils/AccessibilityHelper.js","../../../src/services/Router.js","../../../src/services/SpecializationService.js","../../../src/services/StateManager.js","../../../src/services/ThemeManager.js","../../../src/components/ErrorBoundary.js","../../../src/components/ToastNotification.js","../../../src/components/Navigation.js","../../../src/utils/formatUtils.js","../../../src/components/HomeView.js","../../../src/components/EmptyState.js","../../../src/components/LoadingSpinner.js","../../../src/components/ModuleListView.js","../../../src/components/ModuleDetailView.js","../../../src/utils/eventUtils.js","../../../src/components/IHKQuizListView.js","../../../src/components/QuizResultsDisplay.js","../../../src/components/AnswerReviewSection.js","../../../src/components/QuizActionButtons.js","../../../src/components/IHKQuizView.js","../../../src/components/ProgressView.js","../../../src/utils/WheelModuleValidator.js","../../../src/components/WheelView.js","../../../src/components/NotFoundView.js","../../../src/components/SpecializationSelector.js","../../../src/app.js"],"sourcesContent":["import threeTierCategoriesData from '../data/ihk/metadata/three-tier-categories.json';\nimport categoryMappingRulesData from '../data/ihk/metadata/category-mapping-rules.json';\n\n/**\n * CategoryMappingService - Maps existing content categories to three-tier system\n * Handles the transformation from complex hierarchical categories to simplified\n * three-tier structure: \"Daten und Prozessanalyse\", \"Anwendungsentwicklung\", \"Allgemein\"\n */\nclass CategoryMappingService {\n  constructor(specializationService) {\n    this.specializationService = specializationService;\n    this.threeTierCategories = this._loadThreeTierCategories();\n    this.mappingRules = this._loadMappingRules();\n    this.configuration = threeTierCategoriesData.mappingConfiguration;\n  }\n\n  /**\n   * Load the three-tier category definitions from configuration\n   * @private\n   * @returns {Array} Array of three-tier category objects\n   */\n  _loadThreeTierCategories() {\n    try {\n      return threeTierCategoriesData.categories || [];\n    } catch (error) {\n      console.error('Error loading three-tier categories:', error);\n      return this._getFallbackCategories();\n    }\n  }\n\n  /**\n   * Get fallback categories if configuration loading fails\n   * @private\n   * @returns {Array} Array of fallback category objects\n   */\n  _getFallbackCategories() {\n    return [\n      {\n        id: 'daten-prozessanalyse',\n        name: 'Daten und Prozessanalyse',\n        description:\n          'Inhalte mit hoher Relevanz für die Fachrichtung Daten- und Prozessanalyse',\n        color: '#3b82f6',\n        icon: '📊',\n      },\n      {\n        id: 'anwendungsentwicklung',\n        name: 'Anwendungsentwicklung',\n        description:\n          'Inhalte mit hoher Relevanz für die Fachrichtung Anwendungsentwicklung',\n        color: '#10b981',\n        icon: '💻',\n      },\n      {\n        id: 'allgemein',\n        name: 'Allgemein',\n        description:\n          'Fachrichtungsübergreifende Inhalte und Grundlagen für beide Spezialisierungen',\n        color: '#6b7280',\n        icon: '📚',\n      },\n    ];\n  }\n\n  /**\n   * Load category mapping rules from configuration\n   * @private\n   * @returns {Array} Array of mapping rule objects with compiled regex patterns\n   */\n  _loadMappingRules() {\n    try {\n      const rules = categoryMappingRulesData.mappingRules || [];\n\n      // Convert string patterns to RegExp objects and filter active rules\n      return rules\n        .filter(rule => rule.active !== false)\n        .map(rule => ({\n          ...rule,\n          sourcePattern: new RegExp(rule.sourcePattern, 'i'),\n          condition: rule.conditions, // Note: 'conditions' in JSON, 'condition' in code\n        }))\n        .sort((a, b) => b.priority - a.priority); // Sort by priority descending\n    } catch (error) {\n      console.error('Error loading mapping rules:', error);\n      return this._getFallbackMappingRules();\n    }\n  }\n\n  /**\n   * Get fallback mapping rules if configuration loading fails\n   * @private\n   * @returns {Array} Array of fallback mapping rule objects\n   */\n  _getFallbackMappingRules() {\n    return [\n      // Explicit DPA content (highest priority)\n      {\n        id: 'dpa-explicit-fallback',\n        sourcePattern: /^(BP-DPA-|bp-dpa-)/i,\n        targetCategory: 'daten-prozessanalyse',\n        priority: 100,\n        description: 'Fallback: DPA-specific content with BP-DPA prefix',\n      },\n      // Explicit AE content (highest priority)\n      {\n        id: 'ae-explicit-fallback',\n        sourcePattern: /^(BP-AE-|bp-ae-)/i,\n        targetCategory: 'anwendungsentwicklung',\n        priority: 100,\n        description: 'Fallback: AE-specific content with BP-AE prefix',\n      },\n      // General content (FÜ prefix)\n      {\n        id: 'general-fue-fallback',\n        sourcePattern: /^(FÜ-|FUE-|fue-)/i,\n        targetCategory: 'allgemein',\n        priority: 90,\n        description: 'Fallback: General content with FÜ/FUE prefix',\n      },\n      // Default fallback (lowest priority)\n      {\n        id: 'default-fallback',\n        sourcePattern: /.*/,\n        targetCategory: 'allgemein',\n        priority: 1,\n        description: 'Fallback: Default for unmapped content',\n      },\n    ];\n  }\n\n  /**\n   * Map a content item to the appropriate three-tier category\n   * @param {Object} contentItem - The content item to map\n   * @returns {Object} Three-tier category assignment result\n   */\n  mapToThreeTierCategory(contentItem) {\n    try {\n      if (!contentItem || typeof contentItem !== 'object') {\n        throw new Error('Invalid content item provided');\n      }\n\n      const sourceCategory =\n        contentItem.category || contentItem.categoryId || '';\n\n      // Find the highest priority matching rule\n      const matchingRule = this._findMatchingRule(sourceCategory, contentItem);\n\n      if (!matchingRule) {\n        console.warn(\n          `No mapping rule found for content item: ${contentItem.id || 'unknown'}`\n        );\n        return this._createMappingResult(\n          'allgemein',\n          null,\n          'No matching rule found'\n        );\n      }\n\n      const targetCategory = this.threeTierCategories.find(\n        cat => cat.id === matchingRule.targetCategory\n      );\n\n      return this._createMappingResult(\n        matchingRule.targetCategory,\n        matchingRule,\n        'Successfully mapped using rule',\n        targetCategory\n      );\n    } catch (error) {\n      console.error(\n        'Error mapping content item to three-tier category:',\n        error\n      );\n      return this._createMappingResult(\n        'allgemein',\n        null,\n        `Error: ${error.message}`\n      );\n    }\n  }\n\n  /**\n   * Find the matching rule with highest priority for a content item\n   * @private\n   * @param {string} sourceCategory - The source category identifier\n   * @param {Object} contentItem - The content item being mapped\n   * @returns {Object|null} The matching rule or null if none found\n   */\n  _findMatchingRule(sourceCategory, contentItem) {\n    const applicableRules = this.mappingRules\n      .filter(rule => this._ruleMatches(rule, sourceCategory, contentItem))\n      .sort((a, b) => b.priority - a.priority); // Sort by priority descending\n\n    return applicableRules.length > 0 ? applicableRules[0] : null;\n  }\n\n  /**\n   * Check if a mapping rule matches the given content\n   * @private\n   * @param {Object} rule - The mapping rule to check\n   * @param {string} sourceCategory - The source category identifier\n   * @param {Object} contentItem - The content item being evaluated\n   * @returns {boolean} True if the rule matches\n   */\n  _ruleMatches(rule, sourceCategory, contentItem) {\n    // Check pattern match\n    if (!rule.sourcePattern.test(sourceCategory)) {\n      return false;\n    }\n\n    // Check additional conditions if present\n    if (rule.condition) {\n      return this._evaluateRuleCondition(rule.condition, contentItem);\n    }\n\n    return true;\n  }\n\n  /**\n   * Evaluate additional conditions for a mapping rule\n   * @private\n   * @param {Object} condition - The condition to evaluate\n   * @param {Object} contentItem - The content item being evaluated\n   * @returns {boolean} True if condition is met\n   */\n  _evaluateRuleCondition(condition, contentItem) {\n    if (condition.specializationRelevance && this.specializationService) {\n      const categoryId = contentItem.category || contentItem.categoryId;\n\n      for (const [specializationId, expectedRelevance] of Object.entries(\n        condition.specializationRelevance\n      )) {\n        const actualRelevance = this.specializationService.getCategoryRelevance(\n          categoryId,\n          specializationId\n        );\n\n        if (Array.isArray(expectedRelevance)) {\n          // Multiple acceptable relevance levels\n          if (!expectedRelevance.includes(actualRelevance)) {\n            return false;\n          }\n        } else {\n          // Single expected relevance level\n          if (actualRelevance !== expectedRelevance) {\n            return false;\n          }\n        }\n      }\n    }\n\n    // Add more condition types here as needed\n    if (condition.contentType) {\n      const itemType = this._inferContentType(contentItem);\n      if (itemType !== condition.contentType) {\n        return false;\n      }\n    }\n\n    if (condition.tags && Array.isArray(condition.tags)) {\n      const itemTags = contentItem.tags || [];\n      const hasRequiredTag = condition.tags.some(tag =>\n        itemTags.some(itemTag =>\n          itemTag.toLowerCase().includes(tag.toLowerCase())\n        )\n      );\n      if (!hasRequiredTag) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Infer content type from content item structure\n   * @private\n   * @param {Object} contentItem - The content item to analyze\n   * @returns {string} Inferred content type ('module' or 'quiz')\n   */\n  _inferContentType(contentItem) {\n    if (contentItem.questions && Array.isArray(contentItem.questions)) {\n      return 'quiz';\n    }\n    if (contentItem.content || contentItem.sections) {\n      return 'module';\n    }\n    return 'unknown';\n  }\n\n  /**\n   * Create a standardized mapping result object\n   * @private\n   * @param {string} categoryId - The target category ID\n   * @param {Object|null} rule - The applied mapping rule\n   * @param {string} reason - Reason for the mapping decision\n   * @param {Object|null} categoryInfo - Full category information\n   * @returns {Object} Mapping result object\n   */\n  _createMappingResult(categoryId, rule, reason, categoryInfo = null) {\n    const category =\n      categoryInfo ||\n      this.threeTierCategories.find(cat => cat.id === categoryId);\n\n    return {\n      threeTierCategory: categoryId,\n      categoryInfo: category,\n      appliedRule: rule\n        ? {\n            priority: rule.priority,\n            description: rule.description,\n            pattern: rule.sourcePattern.toString(),\n          }\n        : null,\n      reason: reason,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  /**\n   * Get category relevance for a specific specialization\n   * @param {string} categoryId - The three-tier category ID\n   * @param {string} specializationId - The specialization ID\n   * @returns {string} Relevance level: 'high', 'medium', 'low', 'none'\n   */\n  getCategoryRelevance(categoryId, specializationId) {\n    if (!categoryId || !specializationId) {\n      return 'none';\n    }\n\n    // Define relevance mapping for three-tier categories\n    const relevanceMap = {\n      'daten-prozessanalyse': {\n        'daten-prozessanalyse': 'high',\n        anwendungsentwicklung: 'low',\n      },\n      anwendungsentwicklung: {\n        anwendungsentwicklung: 'high',\n        'daten-prozessanalyse': 'low',\n      },\n      allgemein: {\n        anwendungsentwicklung: 'high',\n        'daten-prozessanalyse': 'high',\n      },\n    };\n\n    return relevanceMap[categoryId]?.[specializationId] || 'none';\n  }\n\n  /**\n   * Get all three-tier categories\n   * @returns {Array} Array of three-tier category objects\n   */\n  getThreeTierCategories() {\n    return [...this.threeTierCategories];\n  }\n\n  /**\n   * Get a specific three-tier category by ID\n   * @param {string} categoryId - The category ID to retrieve\n   * @returns {Object|null} Category object or null if not found\n   */\n  getThreeTierCategory(categoryId) {\n    return this.threeTierCategories.find(cat => cat.id === categoryId) || null;\n  }\n\n  /**\n   * Validate category mapping for a single content item or array of items\n   * @param {Object|Array} contentItems - Content item(s) to validate\n   * @returns {Object} Validation result with status, errors, and warnings\n   */\n  validateCategoryMapping(contentItems) {\n    try {\n      const items = Array.isArray(contentItems) ? contentItems : [contentItems];\n      const validationResult = {\n        status: 'success',\n        totalItems: items.length,\n        validItems: 0,\n        invalidItems: 0,\n        warnings: [],\n        errors: [],\n        details: [],\n      };\n\n      for (const item of items) {\n        const itemValidation = this._validateSingleItem(item);\n        validationResult.details.push(itemValidation);\n\n        if (itemValidation.isValid) {\n          validationResult.validItems++;\n        } else {\n          validationResult.invalidItems++;\n          validationResult.errors.push(...itemValidation.errors);\n        }\n\n        if (itemValidation.warnings.length > 0) {\n          validationResult.warnings.push(...itemValidation.warnings);\n        }\n      }\n\n      // Set overall status\n      if (validationResult.invalidItems > 0) {\n        validationResult.status = 'error';\n      } else if (validationResult.warnings.length > 0) {\n        validationResult.status = 'warning';\n      }\n\n      // Add summary statistics\n      validationResult.summary =\n        this._generateValidationSummary(validationResult);\n\n      return validationResult;\n    } catch (error) {\n      console.error('Error validating category mapping:', error);\n      return {\n        status: 'error',\n        totalItems: 0,\n        validItems: 0,\n        invalidItems: 0,\n        warnings: [],\n        errors: [`Validation failed: ${error.message}`],\n        details: [],\n      };\n    }\n  }\n\n  /**\n   * Validate a single content item\n   * @private\n   * @param {Object} item - Content item to validate\n   * @returns {Object} Item validation result\n   */\n  _validateSingleItem(item) {\n    // Basic item structure validation first\n    if (!item || typeof item !== 'object') {\n      return {\n        itemId: 'unknown',\n        isValid: false,\n        errors: ['Invalid item structure: item must be an object'],\n        warnings: [],\n        mappingResult: null,\n        originalCategory: null,\n      };\n    }\n\n    const result = {\n      itemId: item.id || 'unknown',\n      isValid: true,\n      errors: [],\n      warnings: [],\n      mappingResult: null,\n      originalCategory: item.category || item.categoryId || null,\n    };\n\n    // Validate item has required fields\n    if (!item.id) {\n      result.warnings.push('Item missing ID field');\n    }\n\n    // Perform category mapping\n    try {\n      result.mappingResult = this.mapToThreeTierCategory(item);\n\n      // Validate mapping result\n      if (!result.mappingResult.threeTierCategory) {\n        result.isValid = false;\n        result.errors.push('Mapping failed: no target category assigned');\n      } else if (\n        !this._isValidThreeTierCategory(result.mappingResult.threeTierCategory)\n      ) {\n        result.isValid = false;\n        result.errors.push(\n          `Invalid target category: ${result.mappingResult.threeTierCategory}`\n        );\n      }\n\n      // Check for mapping conflicts\n      const conflicts = this._checkMappingConflicts(item, result.mappingResult);\n      if (conflicts.length > 0) {\n        result.warnings.push(...conflicts);\n      }\n\n      // Validate specialization relevance consistency\n      const relevanceIssues = this._validateRelevanceConsistency(\n        item,\n        result.mappingResult\n      );\n      if (relevanceIssues.length > 0) {\n        result.warnings.push(...relevanceIssues);\n      }\n    } catch (mappingError) {\n      result.isValid = false;\n      result.errors.push(`Mapping error: ${mappingError.message}`);\n    }\n\n    return result;\n  }\n\n  /**\n   * Check if a category ID is a valid three-tier category\n   * @private\n   * @param {string} categoryId - Category ID to validate\n   * @returns {boolean} True if valid\n   */\n  _isValidThreeTierCategory(categoryId) {\n    const validCategories = [\n      'daten-prozessanalyse',\n      'anwendungsentwicklung',\n      'allgemein',\n    ];\n    return validCategories.includes(categoryId);\n  }\n\n  /**\n   * Check for potential mapping conflicts\n   * @private\n   * @param {Object} item - Content item\n   * @param {Object} mappingResult - Mapping result to check\n   * @returns {Array} Array of conflict warning messages\n   */\n  _checkMappingConflicts(item, mappingResult) {\n    const conflicts = [];\n    const originalCategory = item.category || item.categoryId || '';\n    const targetCategory = mappingResult.threeTierCategory;\n\n    // Check for obvious mismatches\n    if (\n      originalCategory.toLowerCase().includes('dpa') &&\n      targetCategory !== 'daten-prozessanalyse'\n    ) {\n      conflicts.push(\n        `Potential conflict: DPA content mapped to ${targetCategory}`\n      );\n    }\n\n    if (\n      originalCategory.toLowerCase().includes('ae') &&\n      targetCategory !== 'anwendungsentwicklung'\n    ) {\n      conflicts.push(\n        `Potential conflict: AE content mapped to ${targetCategory}`\n      );\n    }\n\n    if (\n      originalCategory.toLowerCase().includes('fue') &&\n      targetCategory !== 'allgemein'\n    ) {\n      conflicts.push(\n        `Potential conflict: General content mapped to ${targetCategory}`\n      );\n    }\n\n    // Check for low-priority rule usage on important content\n    if (\n      mappingResult.appliedRule &&\n      mappingResult.appliedRule.priority < 50 &&\n      item.important\n    ) {\n      conflicts.push('Important content mapped using low-priority rule');\n    }\n\n    return conflicts;\n  }\n\n  /**\n   * Validate specialization relevance consistency\n   * @private\n   * @param {Object} item - Content item\n   * @param {Object} mappingResult - Mapping result to check\n   * @returns {Array} Array of relevance warning messages\n   */\n  _validateRelevanceConsistency(item, mappingResult) {\n    const warnings = [];\n\n    if (!this.specializationService) {\n      return warnings;\n    }\n\n    const targetCategory = mappingResult.threeTierCategory;\n    const originalCategory = item.category || item.categoryId;\n\n    if (originalCategory) {\n      // Check relevance for both specializations\n      const aeRelevance = this.specializationService.getCategoryRelevance(\n        originalCategory,\n        'anwendungsentwicklung'\n      );\n      const dpaRelevance = this.specializationService.getCategoryRelevance(\n        originalCategory,\n        'daten-prozessanalyse'\n      );\n\n      // Validate mapping consistency with relevance\n      if (\n        targetCategory === 'anwendungsentwicklung' &&\n        aeRelevance === 'none'\n      ) {\n        warnings.push('Content mapped to AE category but has no AE relevance');\n      }\n\n      if (\n        targetCategory === 'daten-prozessanalyse' &&\n        dpaRelevance === 'none'\n      ) {\n        warnings.push(\n          'Content mapped to DPA category but has no DPA relevance'\n        );\n      }\n\n      if (\n        targetCategory === 'allgemein' &&\n        aeRelevance === 'none' &&\n        dpaRelevance === 'none'\n      ) {\n        warnings.push(\n          'Content mapped to general category but has no relevance for either specialization'\n        );\n      }\n    }\n\n    return warnings;\n  }\n\n  /**\n   * Generate validation summary statistics\n   * @private\n   * @param {Object} validationResult - Validation result to summarize\n   * @returns {Object} Summary statistics\n   */\n  _generateValidationSummary(validationResult) {\n    const categoryDistribution = {};\n    const ruleUsage = {};\n    let conflictCount = 0;\n\n    validationResult.details.forEach(detail => {\n      if (detail.mappingResult && detail.mappingResult.threeTierCategory) {\n        const category = detail.mappingResult.threeTierCategory;\n        categoryDistribution[category] =\n          (categoryDistribution[category] || 0) + 1;\n\n        if (detail.mappingResult.appliedRule) {\n          const ruleId =\n            detail.mappingResult.appliedRule.description || 'unknown';\n          ruleUsage[ruleId] = (ruleUsage[ruleId] || 0) + 1;\n        }\n      }\n\n      if (detail.warnings.some(w => w.includes('conflict'))) {\n        conflictCount++;\n      }\n    });\n\n    return {\n      categoryDistribution,\n      ruleUsage,\n      conflictCount,\n      successRate:\n        validationResult.totalItems > 0\n          ? (\n              (validationResult.validItems / validationResult.totalItems) *\n              100\n            ).toFixed(2) + '%'\n          : '0%',\n    };\n  }\n\n  /**\n   * Validate mapping rules configuration\n   * @returns {Object} Rule validation result\n   */\n  validateMappingRules() {\n    try {\n      const result = {\n        status: 'success',\n        totalRules: this.mappingRules.length,\n        validRules: 0,\n        invalidRules: 0,\n        errors: [],\n        warnings: [],\n        details: [],\n      };\n\n      const priorities = new Set();\n      const targetCategories = new Set();\n\n      for (const rule of this.mappingRules) {\n        const ruleValidation = this._validateSingleRule(rule);\n        result.details.push(ruleValidation);\n\n        if (ruleValidation.isValid) {\n          result.validRules++;\n          priorities.add(rule.priority);\n          targetCategories.add(rule.targetCategory);\n        } else {\n          result.invalidRules++;\n          result.errors.push(...ruleValidation.errors);\n        }\n\n        if (ruleValidation.warnings.length > 0) {\n          result.warnings.push(...ruleValidation.warnings);\n        }\n      }\n\n      // Check for priority conflicts\n      if (priorities.size !== this.mappingRules.length) {\n        result.warnings.push(\n          'Some rules have duplicate priorities - this may cause non-deterministic behavior'\n        );\n      }\n\n      // Check category coverage\n      const expectedCategories = [\n        'daten-prozessanalyse',\n        'anwendungsentwicklung',\n        'allgemein',\n      ];\n      const missingCategories = expectedCategories.filter(\n        cat => !targetCategories.has(cat)\n      );\n      if (missingCategories.length > 0) {\n        result.warnings.push(\n          `No rules target these categories: ${missingCategories.join(', ')}`\n        );\n      }\n\n      // Set overall status\n      if (result.invalidRules > 0) {\n        result.status = 'error';\n      } else if (result.warnings.length > 0) {\n        result.status = 'warning';\n      }\n\n      return result;\n    } catch (error) {\n      console.error('Error validating mapping rules:', error);\n      return {\n        status: 'error',\n        totalRules: 0,\n        validRules: 0,\n        invalidRules: 0,\n        errors: [`Rule validation failed: ${error.message}`],\n        warnings: [],\n        details: [],\n      };\n    }\n  }\n\n  /**\n   * Validate a single mapping rule\n   * @private\n   * @param {Object} rule - Mapping rule to validate\n   * @returns {Object} Rule validation result\n   */\n  _validateSingleRule(rule) {\n    const result = {\n      ruleId: rule.id || 'unknown',\n      isValid: true,\n      errors: [],\n      warnings: [],\n    };\n\n    // Required fields validation\n    if (!rule.sourcePattern) {\n      result.isValid = false;\n      result.errors.push('Rule missing sourcePattern');\n    }\n\n    if (!rule.targetCategory) {\n      result.isValid = false;\n      result.errors.push('Rule missing targetCategory');\n    }\n\n    if (typeof rule.priority !== 'number') {\n      result.isValid = false;\n      result.errors.push('Rule missing or invalid priority');\n    }\n\n    // Validate target category\n    if (\n      rule.targetCategory &&\n      !this._isValidThreeTierCategory(rule.targetCategory)\n    ) {\n      result.isValid = false;\n      result.errors.push(`Invalid target category: ${rule.targetCategory}`);\n    }\n\n    // Validate priority range\n    if (\n      typeof rule.priority === 'number' &&\n      (rule.priority < 1 || rule.priority > 100)\n    ) {\n      result.warnings.push(\n        `Priority ${rule.priority} outside recommended range (1-100)`\n      );\n    }\n\n    // Validate regex pattern\n    if (rule.sourcePattern && !(rule.sourcePattern instanceof RegExp)) {\n      try {\n        new RegExp(rule.sourcePattern);\n      } catch (regexError) {\n        result.isValid = false;\n        result.errors.push(`Invalid regex pattern: ${regexError.message}`);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Get mapping rules for debugging and validation\n   * @returns {Array} Array of mapping rule objects\n   */\n  getMappingRules() {\n    return [...this.mappingRules];\n  }\n\n  /**\n   * Get validation configuration\n   * @returns {Object} Validation configuration object\n   */\n  getValidationConfiguration() {\n    return {\n      ...this.configuration,\n      validationRules: categoryMappingRulesData.validationRules || [],\n      threeTierCategories: this.threeTierCategories.map(cat => cat.id),\n    };\n  }\n}\n\nexport default CategoryMappingService;\n","/**\n * StorageService - Handles localStorage operations with error handling\n */\nclass StorageService {\n  constructor(prefix = 'learning-app') {\n    this.prefix = prefix;\n    this.isAvailable = this._checkAvailability();\n    this.fallbackStorage = new Map(); // In-memory fallback\n  }\n\n  /**\n   * Check if localStorage is available\n   */\n  _checkAvailability() {\n    try {\n      const test = '__storage_test__';\n      localStorage.setItem(test, test);\n      localStorage.removeItem(test);\n      return true;\n    } catch {\n      console.warn('localStorage is not available, using in-memory storage');\n      return false;\n    }\n  }\n\n  /**\n   * Get a prefixed key\n   */\n  _getKey(key) {\n    return `${this.prefix}:${key}`;\n  }\n\n  /**\n   * Get value from localStorage\n   */\n  get(key) {\n    try {\n      if (!this.isAvailable) {\n        return this.fallbackStorage.get(this._getKey(key)) || null;\n      }\n\n      const item = localStorage.getItem(this._getKey(key));\n      if (item === null) {\n        return null;\n      }\n      return JSON.parse(item);\n    } catch (error) {\n      console.error(`Error getting item \"${key}\" from storage:`, error);\n      // Try fallback storage\n      return this.fallbackStorage.get(this._getKey(key)) || null;\n    }\n  }\n\n  /**\n   * Set value in localStorage with automatic fallback to in-memory storage\n   * Throws QuotaExceededError if localStorage is full\n   * @param {string} key - Storage key\n   * @param {*} value - Value to store (will be JSON serialized)\n   * @returns {boolean} True if successful\n   * @throws {Error} QuotaExceededError if storage quota exceeded\n   */\n  set(key, value) {\n    const prefixedKey = this._getKey(key);\n\n    try {\n      if (!this.isAvailable) {\n        this.fallbackStorage.set(prefixedKey, value);\n        return true;\n      }\n\n      const serialized = JSON.stringify(value);\n      localStorage.setItem(prefixedKey, serialized);\n\n      // Also update fallback storage\n      this.fallbackStorage.set(prefixedKey, value);\n\n      return true;\n    } catch (error) {\n      if (error.name === 'QuotaExceededError') {\n        console.error('Storage quota exceeded. Unable to save data.');\n\n        // Try to save to fallback storage\n        this.fallbackStorage.set(prefixedKey, value);\n\n        const quotaError = new Error(\n          'Storage quota exceeded. Please export your progress or clear some data.'\n        );\n        quotaError.name = 'QuotaExceededError';\n        throw quotaError;\n      }\n      console.error(`Error setting item \"${key}\" in storage:`, error);\n\n      // Try fallback storage\n      this.fallbackStorage.set(prefixedKey, value);\n      throw error;\n    }\n  }\n\n  /**\n   * Remove item from localStorage\n   */\n  remove(key) {\n    const prefixedKey = this._getKey(key);\n\n    try {\n      if (this.isAvailable) {\n        localStorage.removeItem(prefixedKey);\n      }\n      this.fallbackStorage.delete(prefixedKey);\n      return true;\n    } catch (error) {\n      console.error(`Error removing item \"${key}\" from storage:`, error);\n      this.fallbackStorage.delete(prefixedKey);\n      return false;\n    }\n  }\n\n  /**\n   * Clear all items with the prefix\n   */\n  clear() {\n    try {\n      if (this.isAvailable) {\n        const keys = Object.keys(localStorage);\n        const prefixedKeys = keys.filter(key =>\n          key.startsWith(`${this.prefix}:`)\n        );\n        prefixedKeys.forEach(key => localStorage.removeItem(key));\n      }\n\n      // Clear fallback storage\n      const fallbackKeys = Array.from(this.fallbackStorage.keys());\n      fallbackKeys.forEach(key => {\n        if (key.startsWith(`${this.prefix}:`)) {\n          this.fallbackStorage.delete(key);\n        }\n      });\n\n      return true;\n    } catch (error) {\n      console.error('Error clearing storage:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Check if key exists in localStorage\n   */\n  has(key) {\n    const prefixedKey = this._getKey(key);\n\n    if (this.isAvailable) {\n      return localStorage.getItem(prefixedKey) !== null;\n    }\n\n    return this.fallbackStorage.has(prefixedKey);\n  }\n\n  /**\n   * Get storage usage information\n   * Calculates used space and percentage based on estimated 5MB limit\n   * @returns {Object} Storage info with available, used, total, and percentage\n   */\n  getStorageInfo() {\n    if (!this.isAvailable) {\n      return {\n        available: false,\n        used: 0,\n        total: 0,\n        percentage: 0,\n      };\n    }\n\n    try {\n      let used = 0;\n      for (let key in localStorage) {\n        if (Object.prototype.hasOwnProperty.call(localStorage, key)) {\n          used += localStorage[key].length + key.length;\n        }\n      }\n\n      // Most browsers have 5-10MB limit, we'll estimate 5MB\n      const total = 5 * 1024 * 1024;\n      const percentage = (used / total) * 100;\n\n      return {\n        available: true,\n        used,\n        total,\n        percentage: Math.round(percentage),\n      };\n    } catch (error) {\n      console.error('Error getting storage info:', error);\n      return {\n        available: true,\n        used: 0,\n        total: 0,\n        percentage: 0,\n      };\n    }\n  }\n}\n\nexport default StorageService;\n","/* global URL */\nimport StorageService from './StorageService.js';\n\n/**\n * ExamProgressService - Tracks and analyzes exam preparation progress\n * Provides insights into weak areas, exam readiness, and personalized recommendations\n */\nclass ExamProgressService {\n  constructor(stateManager, ihkContentService) {\n    this.stateManager = stateManager;\n    this.ihkContentService = ihkContentService;\n    this.storage = new StorageService('exam-progress');\n  }\n\n  /**\n   * Get progress breakdown by exam category (FÜ-01, BP-01, etc.)\n   */\n  async getProgressByCategory() {\n    try {\n      // Load categories\n      const categories = await this.ihkContentService.loadCategories();\n      const progress = this.stateManager.getState('progress') || {};\n      const completed = progress.modulesCompleted || [];\n      const inProgress = progress.modulesInProgress || [];\n\n      // Load all modules\n      await this.ihkContentService._loadAllModules();\n      const allModules = Array.from(this.ihkContentService.modules.values());\n\n      const categoryProgress = [];\n\n      // Process each main category (FÜ and BP)\n      for (const mainCategory of categories.categories) {\n        // Process each subcategory\n        for (const subcategory of mainCategory.subcategories) {\n          const categoryModules = allModules.filter(\n            m => m.category === subcategory.id\n          );\n\n          const totalModules = categoryModules.length;\n          const completedModules = categoryModules.filter(m =>\n            completed.includes(m.id)\n          ).length;\n          const inProgressModules = categoryModules.filter(m =>\n            inProgress.includes(m.id)\n          ).length;\n\n          const completionPercentage =\n            totalModules > 0\n              ? Math.round((completedModules / totalModules) * 100)\n              : 0;\n\n          categoryProgress.push({\n            categoryId: subcategory.id,\n            categoryCode: subcategory.code,\n            categoryName: subcategory.name,\n            mainCategory: mainCategory.code,\n            examRelevance: subcategory.examRelevance,\n            totalModules,\n            completedModules,\n            inProgressModules,\n            notStartedModules:\n              totalModules - completedModules - inProgressModules,\n            completionPercentage,\n            status:\n              completionPercentage === 100\n                ? 'completed'\n                : completionPercentage > 0\n                  ? 'in-progress'\n                  : 'not-started',\n          });\n        }\n      }\n\n      // Sort by exam relevance and completion\n      categoryProgress.sort((a, b) => {\n        const relevanceOrder = { high: 0, medium: 1, low: 2 };\n        const relevanceDiff =\n          relevanceOrder[a.examRelevance] - relevanceOrder[b.examRelevance];\n        if (relevanceDiff !== 0) return relevanceDiff;\n        return b.completionPercentage - a.completionPercentage;\n      });\n\n      return categoryProgress;\n    } catch (error) {\n      console.error('Error getting progress by category:', error);\n      throw new Error('Failed to calculate category progress');\n    }\n  }\n\n  /**\n   * Identify weak areas based on quiz performance and incomplete modules\n   * Analyzes three types of weaknesses:\n   * 1. Low quiz performance (< 70% average score)\n   * 2. Incomplete high-relevance categories\n   * 3. Uncompleted new 2025 topics\n   * @returns {Promise<Array>} Array of weak areas with severity and recommendations\n   */\n  async getWeakAreas() {\n    try {\n      const progress = this.stateManager.getState('progress') || {};\n      const quizAttempts = progress.quizAttempts || [];\n      const completed = progress.modulesCompleted || [];\n\n      const weakAreas = [];\n\n      // Analyze quiz performance by category\n      const quizPerformanceByCategory = new Map();\n\n      for (const attempt of quizAttempts) {\n        // Get quiz details to find category\n        const quizId = attempt.quizId;\n        const categoryMatch = quizId.match(/^(fue|bp)-\\d+/i);\n\n        if (categoryMatch) {\n          const category = categoryMatch[0].toUpperCase();\n          const score = attempt.score;\n\n          if (!quizPerformanceByCategory.has(category)) {\n            quizPerformanceByCategory.set(category, []);\n          }\n          quizPerformanceByCategory.get(category).push(score);\n        }\n      }\n\n      // Identify categories with low quiz scores (< 70%)\n      for (const [category, scores] of quizPerformanceByCategory) {\n        const avgScore =\n          scores.reduce((sum, score) => sum + score, 0) / scores.length;\n\n        if (avgScore < 70) {\n          weakAreas.push({\n            type: 'quiz-performance',\n            category,\n            averageScore: Math.round(avgScore),\n            attempts: scores.length,\n            severity: avgScore < 50 ? 'high' : avgScore < 60 ? 'medium' : 'low',\n            recommendation: `Wiederhole die Module in ${category} und übe mehr Quizzes`,\n          });\n        }\n      }\n\n      // Identify high-relevance categories with low completion\n      const categoryProgress = await this.getProgressByCategory();\n\n      for (const cat of categoryProgress) {\n        if (cat.examRelevance === 'high' && cat.completionPercentage < 50) {\n          weakAreas.push({\n            type: 'incomplete-category',\n            category: cat.categoryCode,\n            categoryName: cat.categoryName,\n            completionPercentage: cat.completionPercentage,\n            severity:\n              cat.completionPercentage === 0\n                ? 'high'\n                : cat.completionPercentage < 25\n                  ? 'medium'\n                  : 'low',\n            recommendation: `Fokussiere dich auf ${cat.categoryName} - hohe Prüfungsrelevanz!`,\n          });\n        }\n      }\n\n      // Identify new 2025 topics not yet completed\n      const newTopics = await this.ihkContentService.getNewTopics2025();\n      const uncompletedNewTopics = newTopics.filter(\n        m => !completed.includes(m.id)\n      );\n\n      if (uncompletedNewTopics.length > 0) {\n        weakAreas.push({\n          type: 'new-topics-2025',\n          count: uncompletedNewTopics.length,\n          topics: uncompletedNewTopics.map(m => m.title),\n          severity: 'high',\n          recommendation:\n            'Neue Themen ab 2025 sind besonders prüfungsrelevant - starte hier!',\n        });\n      }\n\n      // Sort by severity\n      const severityOrder = { high: 0, medium: 1, low: 2 };\n      weakAreas.sort(\n        (a, b) => severityOrder[a.severity] - severityOrder[b.severity]\n      );\n\n      return weakAreas;\n    } catch (error) {\n      console.error('Error identifying weak areas:', error);\n      throw new Error('Failed to identify weak areas');\n    }\n  }\n\n  /**\n   * Calculate overall exam readiness score (0-100)\n   * Uses weighted formula: 50% module completion + 30% quiz performance + 20% new topics coverage\n   * Module completion is weighted by exam relevance (high=3, medium=2, low=1)\n   * @returns {Promise<Object>} Readiness object with score, level, recommendation, and breakdown\n   */\n  async getExamReadiness() {\n    try {\n      const progress = this.stateManager.getState('progress') || {};\n      const completed = progress.modulesCompleted || [];\n      const quizAttempts = progress.quizAttempts || [];\n\n      // Load all modules\n      await this.ihkContentService._loadAllModules();\n      const allModules = Array.from(this.ihkContentService.modules.values());\n\n      // Calculate weighted completion by exam relevance\n      let totalWeight = 0;\n      let completedWeight = 0;\n\n      const relevanceWeights = { high: 3, medium: 2, low: 1 };\n\n      for (const module of allModules) {\n        const weight = relevanceWeights[module.examRelevance] || 1;\n        totalWeight += weight;\n\n        if (completed.includes(module.id)) {\n          completedWeight += weight;\n        }\n      }\n\n      const moduleReadiness =\n        totalWeight > 0 ? (completedWeight / totalWeight) * 100 : 0;\n\n      // Calculate quiz readiness (average score)\n      let quizReadiness = 0;\n      if (quizAttempts.length > 0) {\n        const totalScore = quizAttempts.reduce(\n          (sum, attempt) => sum + attempt.score,\n          0\n        );\n        quizReadiness = totalScore / quizAttempts.length;\n      }\n\n      // Check new 2025 topics coverage\n      const newTopics = await this.ihkContentService.getNewTopics2025();\n      const completedNewTopics = newTopics.filter(m =>\n        completed.includes(m.id)\n      ).length;\n      const newTopicsReadiness =\n        newTopics.length > 0\n          ? (completedNewTopics / newTopics.length) * 100\n          : 100;\n\n      // Overall readiness: 50% modules, 30% quizzes, 20% new topics\n      const overallReadiness = Math.round(\n        moduleReadiness * 0.5 + quizReadiness * 0.3 + newTopicsReadiness * 0.2\n      );\n\n      // Determine readiness level\n      let readinessLevel;\n      let recommendation;\n\n      if (overallReadiness >= 85) {\n        readinessLevel = 'excellent';\n        recommendation =\n          'Du bist sehr gut vorbereitet! Wiederhole schwierige Themen und mache Prüfungssimulationen.';\n      } else if (overallReadiness >= 70) {\n        readinessLevel = 'good';\n        recommendation =\n          'Gute Vorbereitung! Fokussiere dich auf deine Schwachstellen und übe mehr Quizzes.';\n      } else if (overallReadiness >= 50) {\n        readinessLevel = 'moderate';\n        recommendation =\n          'Du bist auf einem guten Weg. Arbeite systematisch die fehlenden Module durch.';\n      } else if (overallReadiness >= 30) {\n        readinessLevel = 'needs-improvement';\n        recommendation =\n          'Du brauchst noch mehr Vorbereitung. Erstelle einen Lernplan und arbeite täglich daran.';\n      } else {\n        readinessLevel = 'insufficient';\n        recommendation =\n          'Starte jetzt mit deiner Vorbereitung! Beginne mit den wichtigsten Themen (hohe Prüfungsrelevanz).';\n      }\n\n      return {\n        overallReadiness,\n        readinessLevel,\n        recommendation,\n        breakdown: {\n          moduleReadiness: Math.round(moduleReadiness),\n          quizReadiness: Math.round(quizReadiness),\n          newTopicsReadiness: Math.round(newTopicsReadiness),\n        },\n        statistics: {\n          totalModules: allModules.length,\n          completedModules: completed.length,\n          quizzesTaken: quizAttempts.length,\n          newTopicsCompleted: completedNewTopics,\n          totalNewTopics: newTopics.length,\n        },\n      };\n    } catch (error) {\n      console.error('Error calculating exam readiness:', error);\n      throw new Error('Failed to calculate exam readiness');\n    }\n  }\n\n  /**\n   * Get personalized module recommendations based on weak areas\n   */\n  async getRecommendedModules() {\n    try {\n      const weakAreas = await this.getWeakAreas();\n      const progress = this.stateManager.getState('progress') || {};\n      const completed = progress.modulesCompleted || [];\n      const inProgress = progress.modulesInProgress || [];\n\n      const recommendations = [];\n\n      // Load all modules\n      await this.ihkContentService._loadAllModules();\n      const allModules = Array.from(this.ihkContentService.modules.values());\n\n      // 1. Recommend modules for weak quiz performance categories\n      for (const weak of weakAreas) {\n        if (weak.type === 'quiz-performance') {\n          const categoryModules = allModules\n            .filter(\n              m =>\n                m.category.startsWith(weak.category) &&\n                !completed.includes(m.id)\n            )\n            .slice(0, 3);\n\n          if (categoryModules.length > 0) {\n            recommendations.push({\n              reason: `Schwache Quiz-Performance in ${weak.category}`,\n              priority: weak.severity,\n              modules: categoryModules,\n            });\n          }\n        }\n      }\n\n      // 2. Recommend incomplete high-relevance modules\n      const highRelevanceIncomplete = allModules\n        .filter(\n          m =>\n            m.examRelevance === 'high' &&\n            !completed.includes(m.id) &&\n            !inProgress.includes(m.id)\n        )\n        .slice(0, 5);\n\n      if (highRelevanceIncomplete.length > 0) {\n        recommendations.push({\n          reason: 'Hohe Prüfungsrelevanz',\n          priority: 'high',\n          modules: highRelevanceIncomplete,\n        });\n      }\n\n      // 3. Recommend new 2025 topics\n      const newTopics = await this.ihkContentService.getNewTopics2025();\n      const uncompletedNewTopics = newTopics\n        .filter(m => !completed.includes(m.id))\n        .slice(0, 5);\n\n      if (uncompletedNewTopics.length > 0) {\n        recommendations.push({\n          reason: 'Neue Themen ab 2025',\n          priority: 'high',\n          modules: uncompletedNewTopics,\n        });\n      }\n\n      // 4. Recommend modules with prerequisites met\n      const modulesWithMetPrerequisites = allModules.filter(m => {\n        if (completed.includes(m.id) || inProgress.includes(m.id)) {\n          return false;\n        }\n\n        // Check if all prerequisites are completed\n        if (m.prerequisites && m.prerequisites.length > 0) {\n          return m.prerequisites.every(prereq => completed.includes(prereq));\n        }\n\n        return false;\n      });\n\n      if (modulesWithMetPrerequisites.length > 0) {\n        recommendations.push({\n          reason: 'Voraussetzungen erfüllt',\n          priority: 'medium',\n          modules: modulesWithMetPrerequisites.slice(0, 3),\n        });\n      }\n\n      // Sort by priority\n      const priorityOrder = { high: 0, medium: 1, low: 2 };\n      recommendations.sort(\n        (a, b) => priorityOrder[a.priority] - priorityOrder[b.priority]\n      );\n\n      return recommendations;\n    } catch (error) {\n      console.error('Error getting recommended modules:', error);\n      throw new Error('Failed to generate module recommendations');\n    }\n  }\n\n  /**\n   * Get progress for a specific category\n   */\n  getCategoryProgress(categoryId) {\n    try {\n      const progress = this.stateManager.getState('progress') || {};\n      const completed = progress.modulesCompleted || [];\n\n      // Load all modules synchronously from cache\n      const allModules = Array.from(this.ihkContentService.modules.values());\n      const categoryModules = allModules.filter(m => m.category === categoryId);\n\n      if (categoryModules.length === 0) {\n        return 0;\n      }\n\n      const completedCount = categoryModules.filter(m =>\n        completed.includes(m.id)\n      ).length;\n\n      return Math.round((completedCount / categoryModules.length) * 100);\n    } catch (error) {\n      console.error(\n        `Error getting category progress for ${categoryId}:`,\n        error\n      );\n      return 0;\n    }\n  }\n\n  /**\n   * Export comprehensive exam progress report as JSON file\n   * Includes readiness score, category progress, weak areas, and recommendations\n   * Automatically triggers browser download of the JSON file\n   * @returns {Promise<Object>} The exported data object\n   */\n  async exportProgress() {\n    try {\n      const progress = this.stateManager.getState('progress') || {};\n      const categoryProgress = await this.getProgressByCategory();\n      const weakAreas = await this.getWeakAreas();\n      const examReadiness = await this.getExamReadiness();\n      const recommendations = await this.getRecommendedModules();\n\n      const exportData = {\n        exportDate: new Date().toISOString(),\n        examType: 'IHK Fachinformatiker Anwendungsentwicklung AP2',\n        examVersion: '2025',\n        summary: {\n          examReadiness: examReadiness.overallReadiness,\n          readinessLevel: examReadiness.readinessLevel,\n          totalModulesCompleted: progress.modulesCompleted?.length || 0,\n          totalQuizzesTaken: progress.quizAttempts?.length || 0,\n          lastActivity: progress.lastActivity,\n        },\n        examReadiness,\n        categoryProgress,\n        weakAreas,\n        recommendations: recommendations.map(rec => ({\n          reason: rec.reason,\n          priority: rec.priority,\n          moduleCount: rec.modules.length,\n          modules: rec.modules.map(m => ({\n            id: m.id,\n            title: m.title,\n            category: m.category,\n            examRelevance: m.examRelevance,\n          })),\n        })),\n        detailedProgress: {\n          modulesCompleted: progress.modulesCompleted || [],\n          modulesInProgress: progress.modulesInProgress || [],\n          quizAttempts: (progress.quizAttempts || []).map(attempt => ({\n            quizId: attempt.quizId,\n            score: attempt.score,\n            date: attempt.date,\n            passed: attempt.score >= 70,\n          })),\n        },\n      };\n\n      // Convert to JSON string with formatting\n      const jsonString = JSON.stringify(exportData, null, 2);\n\n      // Create blob and download link\n      const blob = new Blob([jsonString], { type: 'application/json' });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `ihk-exam-progress-${new Date().toISOString().split('T')[0]}.json`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n\n      return exportData;\n    } catch (error) {\n      console.error('Error exporting exam progress:', error);\n      throw new Error('Failed to export exam progress');\n    }\n  }\n}\n\nexport default ExamProgressService;\n","import StorageService from './StorageService.js';\n\n// Import metadata\nimport categoriesData from '../data/ihk/metadata/categories.json';\nimport examChangesData from '../data/ihk/metadata/exam-changes-2025.json';\n\n// Import learning paths\nimport ap2Path from '../data/ihk/learning-paths/ap2-complete-path.json';\nimport sqlPath from '../data/ihk/learning-paths/sql-mastery-path.json';\nimport newTopicsPath from '../data/ihk/learning-paths/new-topics-2025-path.json';\nimport oopPath from '../data/ihk/learning-paths/oop-fundamentals-path.json';\n\n// Import all IHK modules directly\nimport fue01 from '../data/ihk/modules/fue-01-planning.json';\nimport fue02dev from '../data/ihk/modules/fue-02-development.json';\nimport fue02anom from '../data/ihk/modules/fue-02-anomalies-redundancies.json';\nimport fue02ctrl from '../data/ihk/modules/fue-02-control-structures.json';\nimport fue03 from '../data/ihk/modules/fue-03-quality.json';\nimport fue03load from '../data/ihk/modules/fue-03-load-performance-tests.json';\nimport fue04 from '../data/ihk/modules/fue-04-security.json';\nimport fue04threats from '../data/ihk/modules/fue-04-security-threats.json';\nimport bp01conc from '../data/ihk/modules/bp-01-conception.json';\nimport bp01doc from '../data/ihk/modules/bp-01-documentation.json';\nimport bp01kerb from '../data/ihk/modules/bp-01-kerberos.json';\nimport bp01mon from '../data/ihk/modules/bp-01-monitoring.json';\nimport bp02cloud from '../data/ihk/modules/bp-02-cloud-models.json';\nimport bp02data from '../data/ihk/modules/bp-02-data-formats.json';\nimport bp02nas from '../data/ihk/modules/bp-02-nas-san.json';\nimport bp03cps from '../data/ihk/modules/bp-03-cps.json';\nimport bp03rest from '../data/ihk/modules/bp-03-rest-api.json';\nimport bp03sq from '../data/ihk/modules/bp-03-software-quality.json';\nimport bp03tdd from '../data/ihk/modules/bp-03-tdd.json';\nimport bp04arch from '../data/ihk/modules/bp-04-architecture-patterns.json';\nimport bp04design from '../data/ihk/modules/bp-04-design-patterns.json';\nimport bp04prog from '../data/ihk/modules/bp-04-programming-paradigms.json';\nimport bp04scrum from '../data/ihk/modules/bp-04-scrum.json';\nimport bp05data from '../data/ihk/modules/bp-05-data-structures.json';\nimport bp05enc from '../data/ihk/modules/bp-05-encapsulation.json';\nimport bp05sort from '../data/ihk/modules/bp-05-sorting.json';\nimport bp05sql from '../data/ihk/modules/bp-05-sql-reference.json';\nimport sqlDdl from '../data/ihk/modules/sql-ddl.json';\nimport sqlDml from '../data/ihk/modules/sql-dml.json';\nimport sqlDql from '../data/ihk/modules/sql-dql.json';\n\n// Import DPA-specific modules\nimport bpDpa01 from '../data/ihk/modules/bp-dpa-01-data-modeling.json';\nimport bpDpa02 from '../data/ihk/modules/bp-dpa-02-etl-processes.json';\nimport bpDpa03 from '../data/ihk/modules/bp-dpa-03-bpmn-modeling.json';\nimport bpDpa03Adv from '../data/ihk/modules/bp-dpa-03-advanced-process-topics.json';\nimport bpDpa04 from '../data/ihk/modules/bp-dpa-04-business-intelligence.json';\n\n// Import all IHK quizzes (including migrated ones)\nimport bp01ConceptionQuiz from '../data/ihk/quizzes/bp-01-conception-quiz.json';\nimport bp01DocumentationQuiz from '../data/ihk/quizzes/bp-01-documentation-quiz.json';\nimport bp01MonitoringQuiz from '../data/ihk/quizzes/bp-01-monitoring-quiz.json';\nimport bp01OdbcQuiz from '../data/ihk/quizzes/bp-01-odbc-quiz.json';\nimport bp02CloudModelsQuiz from '../data/ihk/quizzes/bp-02-cloud-models-quiz.json';\nimport bp02DataFormatsQuiz from '../data/ihk/quizzes/bp-02-data-formats-quiz.json';\nimport bp02NasSanQuiz from '../data/ihk/quizzes/bp-02-nas-san-quiz.json';\nimport bp02QualityAssuranceQuiz from '../data/ihk/quizzes/bp-02-quality-assurance-quiz.json';\nimport bp03CpsQuiz from '../data/ihk/quizzes/bp-03-cps-quiz.json';\nimport bp03RestApiQuiz from '../data/ihk/quizzes/bp-03-rest-api-quiz.json';\nimport bp03SoftwareQualityQuiz from '../data/ihk/quizzes/bp-03-software-quality-quiz.json';\nimport bp03TddQuiz from '../data/ihk/quizzes/bp-03-tdd-quiz.json';\nimport bp04ArchitecturePatternsQuiz from '../data/ihk/quizzes/bp-04-architecture-patterns-quiz.json';\nimport bp04DesignPatternsQuiz from '../data/ihk/quizzes/bp-04-design-patterns-quiz.json';\nimport bp04ProgrammingParadigmsQuiz from '../data/ihk/quizzes/bp-04-programming-paradigms-quiz.json';\nimport bp04ScrumQuiz from '../data/ihk/quizzes/bp-04-scrum-quiz.json';\nimport bp05DataStructuresQuiz from '../data/ihk/quizzes/bp-05-data-structures-quiz.json';\nimport bp05EncapsulationQuiz from '../data/ihk/quizzes/bp-05-encapsulation-quiz.json';\nimport bp05SortingQuiz from '../data/ihk/quizzes/bp-05-sorting-quiz.json';\nimport bp05SqlReferenceQuiz from '../data/ihk/quizzes/bp-05-sql-reference-quiz.json';\nimport fue01PlanningQuiz from '../data/ihk/quizzes/fue-01-planning-quiz.json';\nimport fue02AnomaliesRedundanciesQuiz from '../data/ihk/quizzes/fue-02-anomalies-redundancies-quiz.json';\nimport fue02ControlStructuresQuiz from '../data/ihk/quizzes/fue-02-control-structures-quiz.json';\nimport fue02DevelopmentQuiz from '../data/ihk/quizzes/fue-02-development-quiz.json';\nimport fue03LoadPerformanceTestsQuiz from '../data/ihk/quizzes/fue-03-load-performance-tests-quiz.json';\nimport fue03QualityQuiz from '../data/ihk/quizzes/fue-03-quality-quiz.json';\nimport fue04SecurityQuiz from '../data/ihk/quizzes/fue-04-security-quiz.json';\nimport fue04SecurityThreatsQuiz from '../data/ihk/quizzes/fue-04-security-threats-quiz.json';\nimport kerberosQuiz from '../data/ihk/quizzes/kerberos-quiz.json';\nimport scrumQuiz from '../data/ihk/quizzes/scrum-quiz.json';\nimport sortingAlgorithmsQuiz from '../data/ihk/quizzes/sorting-algorithms-quiz.json';\nimport sqlComprehensiveQuiz from '../data/ihk/quizzes/sql-comprehensive-quiz.json';\nimport sqlDdl2025Quiz from '../data/ihk/quizzes/sql-ddl-2025-quiz.json';\nimport sqlDml2025Quiz from '../data/ihk/quizzes/sql-dml-2025-quiz.json';\nimport tddQuiz from '../data/ihk/quizzes/tdd-quiz.json';\n\n// Import DPA-specific quizzes\nimport bpDpa01ErModelingQuiz from '../data/ihk/quizzes/bp-dpa-01-er-modeling-quiz.json';\nimport bpDpa01NormalizationQuiz from '../data/ihk/quizzes/bp-dpa-01-normalization-quiz.json';\nimport bpDpa02EtlQuiz from '../data/ihk/quizzes/bp-dpa-02-etl-quiz.json';\nimport bpDpa03BpmnQuiz from '../data/ihk/quizzes/bp-dpa-03-bpmn-quiz.json';\nimport bpDpa04BiQuiz from '../data/ihk/quizzes/bp-dpa-04-bi-quiz.json';\nimport bpDpa05DataWarehousingQuiz from '../data/ihk/quizzes/bp-dpa-05-data-warehousing-quiz.json';\nimport bpDpa06DataQualityQuiz from '../data/ihk/quizzes/bp-dpa-06-data-quality-quiz.json';\nimport bpDpa07StatisticalAnalysisQuiz from '../data/ihk/quizzes/bp-dpa-07-statistical-analysis-quiz.json';\nimport bpDpa08ProcessOptimizationQuiz from '../data/ihk/quizzes/bp-dpa-08-process-optimization-quiz.json';\nimport bpDpa09AdvancedBiQuiz from '../data/ihk/quizzes/bp-dpa-09-advanced-bi-quiz.json';\n// Newly added DPA 2025 quizzes\nimport bpDpa03ProcessMiningQuiz from '../data/ihk/quizzes/bp-dpa-03-process-mining-quiz.json';\nimport bpDpa03KpiMeasurementQuiz from '../data/ihk/quizzes/bp-dpa-03-kpi-measurement-quiz.json';\nimport bpDpa03LeanSixSigmaQuiz from '../data/ihk/quizzes/bp-dpa-03-lean-six-sigma-quiz.json';\nimport bpDpa03AutomationOrchestrationQuiz from '../data/ihk/quizzes/bp-dpa-03-automation-orchestration-quiz.json';\n\n/**\n * IHKContentService - Manages IHK exam content (modules, quizzes, learning paths)\n * Handles loading, filtering, and searching of IHK-specific content\n */\nclass IHKContentService {\n  constructor(\n    stateManager,\n    storageService,\n    specializationService,\n    categoryMappingService,\n    performanceOptimizationService,\n    performanceMonitoringService\n  ) {\n    this.stateManager = stateManager;\n    this.storage = storageService || new StorageService('ihk-content');\n    this.specializationService = specializationService;\n    this.categoryMappingService = categoryMappingService;\n    this.performanceOptimizationService = performanceOptimizationService;\n    this.performanceMonitoringService = performanceMonitoringService;\n    this.categories = null;\n    this.examChanges = null;\n    this.modules = new Map();\n    this.quizzes = new Map();\n    this.learningPaths = new Map();\n    // Cache for categorized content\n    this.categorizedContentCache = new Map();\n    this.categoryIndexCache = new Map();\n  }\n\n  /**\n   * Load category taxonomy from metadata\n   */\n  async loadCategories() {\n    if (!this.categories) {\n      this.categories = categoriesData;\n    }\n    return this.categories;\n  }\n\n  /**\n   * Load exam changes metadata\n   */\n  async loadExamChanges() {\n    if (!this.examChanges) {\n      this.examChanges = examChangesData;\n    }\n    return this.examChanges;\n  }\n\n  /**\n   * Get all modules for a specific category\n   */\n  async getModulesByCategory(categoryId) {\n    try {\n      if (!categoryId || typeof categoryId !== 'string') {\n        throw new Error('Invalid category ID');\n      }\n\n      // Ensure categories are loaded\n      if (!this.categories) {\n        await this.loadCategories();\n      }\n\n      // Load all modules if not already loaded\n      await this._loadAllModules();\n\n      // Filter modules by category\n      const modules = Array.from(this.modules.values()).filter(\n        module => module.categoryId === categoryId\n      );\n\n      // Enrich with progress data\n      return this._enrichModulesWithProgress(modules);\n    } catch (error) {\n      console.error(`Error getting modules for category ${categoryId}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get all new topics introduced in 2025\n   */\n  async getNewTopics2025() {\n    try {\n      // Load all modules if not already loaded\n      await this._loadAllModules();\n\n      // Filter modules marked as new in 2025\n      const newModules = Array.from(this.modules.values()).filter(\n        module => module.newIn2025 === true && module.categoryId !== undefined\n      );\n\n      // Sort by importance and exam relevance\n      newModules.sort((a, b) => {\n        // Important modules first\n        if (a.important && !b.important) return -1;\n        if (!a.important && b.important) return 1;\n\n        // Then by exam relevance\n        const relevanceOrder = { high: 0, medium: 1, low: 2 };\n        return (\n          relevanceOrder[a.examRelevance] - relevanceOrder[b.examRelevance]\n        );\n      });\n\n      // Enrich with progress data\n      return this._enrichModulesWithProgress(newModules);\n    } catch (error) {\n      console.error('Error getting new topics 2025:', error);\n      throw new Error('Failed to load new topics for 2025');\n    }\n  }\n\n  /**\n   * Get all topics removed in 2025\n   */\n  async getRemovedTopics2025() {\n    try {\n      // Ensure exam changes are loaded\n      if (!this.examChanges) {\n        await this.loadExamChanges();\n      }\n\n      // Return removed topics from metadata\n      return this.examChanges.removedTopics || [];\n    } catch (error) {\n      console.error('Error getting removed topics 2025:', error);\n      throw new Error('Failed to load removed topics for 2025');\n    }\n  }\n\n  /**\n   * Search content with filters\n   */\n  async searchContent(query, filters = {}) {\n    try {\n      // Load all modules if not already loaded\n      await this._loadAllModules();\n\n      let results = Array.from(this.modules.values());\n\n      // Apply text search if query provided\n      if (query && query.trim()) {\n        const searchTerm = query.toLowerCase().trim();\n        results = results.filter(module => {\n          return (\n            module.title.toLowerCase().includes(searchTerm) ||\n            module.description.toLowerCase().includes(searchTerm) ||\n            module.tags.some(tag => tag.toLowerCase().includes(searchTerm)) ||\n            module.content.toLowerCase().includes(searchTerm)\n          );\n        });\n      }\n\n      // Apply filters\n      if (filters.category) {\n        results = results.filter(m => m.category === filters.category);\n      }\n\n      if (filters.difficulty) {\n        results = results.filter(m => m.difficulty === filters.difficulty);\n      }\n\n      if (filters.examRelevance) {\n        results = results.filter(\n          m => m.examRelevance === filters.examRelevance\n        );\n      }\n\n      if (filters.newIn2025 !== undefined) {\n        results = results.filter(m => m.newIn2025 === filters.newIn2025);\n      }\n\n      if (filters.important !== undefined) {\n        results = results.filter(m => m.important === filters.important);\n      }\n\n      // Apply learning status filter\n      if (filters.learningStatus) {\n        const progress = this.stateManager.getState('progress') || {};\n        const completed = progress.modulesCompleted || [];\n        const inProgress = progress.modulesInProgress || [];\n\n        results = results.filter(module => {\n          switch (filters.learningStatus) {\n            case 'completed':\n              return completed.includes(module.id);\n            case 'in-progress':\n              return inProgress.includes(module.id);\n            case 'not-started':\n              return (\n                !completed.includes(module.id) &&\n                !inProgress.includes(module.id)\n              );\n            default:\n              return true;\n          }\n        });\n      }\n\n      // Enrich with progress data\n      return this._enrichModulesWithProgress(results);\n    } catch (error) {\n      console.error('Error searching content:', error);\n      throw new Error('Failed to search content');\n    }\n  }\n\n  /**\n   * Get a learning path by ID\n   */\n  async getLearningPath(pathId) {\n    const paths = {\n      'ap2-complete': ap2Path,\n      'sql-mastery': sqlPath,\n      'new-topics-2025': newTopicsPath,\n      'oop-fundamentals': oopPath,\n    };\n\n    const path = paths[pathId];\n    if (!path) {\n      throw new Error(`Learning path \"${pathId}\" not found`);\n    }\n\n    return path;\n  }\n\n  /**\n   * Get personalized module recommendations based on user progress\n   * Returns up to 3 recommendation groups:\n   * 1. Continue in-progress modules\n   * 2. New topics introduced in 2025\n   * 3. High exam relevance modules not yet started\n   * @returns {Promise<Array>} Array of recommendation groups with type, title, and modules\n   */\n  async getRecommendations() {\n    try {\n      const progress = this.stateManager.getState('progress') || {};\n      const completed = progress.modulesCompleted || [];\n      const inProgress = progress.modulesInProgress || [];\n\n      // Load all modules\n      await this._loadAllModules();\n\n      const recommendations = [];\n\n      // 1. Continue in-progress modules\n      const continueModules = Array.from(this.modules.values())\n        .filter(m => inProgress.includes(m.id))\n        .slice(0, 3);\n\n      if (continueModules.length > 0) {\n        recommendations.push({\n          type: 'continue',\n          title: 'Fortsetzen',\n          modules: continueModules,\n        });\n      }\n\n      // 2. High priority new topics 2025\n      const newTopics = await this.getNewTopics2025();\n      const uncompletedNewTopics = newTopics\n        .filter(m => !completed.includes(m.id) && !inProgress.includes(m.id))\n        .slice(0, 3);\n\n      if (uncompletedNewTopics.length > 0) {\n        recommendations.push({\n          type: 'new-2025',\n          title: 'Neue Themen 2025',\n          modules: uncompletedNewTopics,\n        });\n      }\n\n      // 3. High exam relevance modules\n      const highRelevance = Array.from(this.modules.values())\n        .filter(\n          m =>\n            m.examRelevance === 'high' &&\n            !completed.includes(m.id) &&\n            !inProgress.includes(m.id)\n        )\n        .slice(0, 3);\n\n      if (highRelevance.length > 0) {\n        recommendations.push({\n          type: 'high-relevance',\n          title: 'Hohe Prüfungsrelevanz',\n          modules: highRelevance,\n        });\n      }\n\n      return recommendations;\n    } catch (error) {\n      console.error('Error getting recommendations:', error);\n      throw new Error('Failed to generate recommendations');\n    }\n  }\n\n  /**\n   * Load all IHK modules into memory cache\n   * Modules are statically imported at the top of this file for optimal bundling\n   * Enhanced to apply three-tier category mapping during load\n   * @private\n   */\n  async _loadAllModules() {\n    // If already loaded, return cached modules\n    if (this.modules.size > 0) {\n      return;\n    }\n\n    try {\n      // Add all statically imported modules to the cache\n      const allModules = [\n        fue01,\n        fue02dev,\n        fue02anom,\n        fue02ctrl,\n        fue03,\n        fue03load,\n        fue04,\n        fue04threats,\n        bp01conc,\n        bp01doc,\n        bp01kerb,\n        bp01mon,\n        bp02cloud,\n        bp02data,\n        bp02nas,\n        bp03cps,\n        bp03rest,\n        bp03sq,\n        bp03tdd,\n        bp04arch,\n        bp04design,\n        bp04prog,\n        bp04scrum,\n        bp05data,\n        bp05enc,\n        bp05sort,\n        bp05sql,\n        sqlDdl,\n        sqlDml,\n        sqlDql,\n        // DPA-specific modules\n        bpDpa01,\n        bpDpa02,\n        bpDpa03,\n        bpDpa03Adv,\n        bpDpa04,\n      ];\n\n      // Flatten modules - some files contain { modules: [...] } structure\n      const flattenedModules = [];\n      allModules.forEach(moduleData => {\n        if (moduleData.modules && Array.isArray(moduleData.modules)) {\n          // File contains { modules: [...] } structure\n          flattenedModules.push(...moduleData.modules);\n        } else if (moduleData.id) {\n          // Direct module object\n          flattenedModules.push(moduleData);\n        } else {\n          console.warn('Invalid module structure:', moduleData);\n        }\n      });\n\n      // Apply three-tier category mapping to each module\n      flattenedModules.forEach(module => {\n        // Preserve original category for backward compatibility\n        const originalCategory = module.category || module.categoryId;\n\n        // Apply three-tier category mapping if service is available\n        if (this.categoryMappingService) {\n          try {\n            const mappingResult =\n              this.categoryMappingService.mapToThreeTierCategory(module);\n\n            // Add three-tier category information while preserving original\n            const enhancedModule = {\n              ...module,\n              // Preserve original category fields for backward compatibility\n              category: originalCategory,\n              categoryId: originalCategory,\n              // Add new three-tier category information\n              threeTierCategory: mappingResult.threeTierCategory,\n              categoryMapping: {\n                threeTierCategory: mappingResult.threeTierCategory,\n                categoryInfo: mappingResult.categoryInfo,\n                mappingRule: mappingResult.appliedRule,\n                mappingReason: mappingResult.reason,\n                mappingTimestamp: mappingResult.timestamp,\n              },\n            };\n\n            this.modules.set(module.id, enhancedModule);\n          } catch (mappingError) {\n            console.warn(\n              `Failed to map module ${module.id} to three-tier category:`,\n              mappingError\n            );\n            // Fallback: store module with original category only\n            this.modules.set(module.id, {\n              ...module,\n              category: originalCategory,\n              categoryId: originalCategory,\n              threeTierCategory: 'allgemein', // Default fallback\n              categoryMapping: {\n                threeTierCategory: 'allgemein',\n                mappingRule: null,\n                mappingReason: 'Mapping failed, using default',\n                mappingTimestamp: new Date().toISOString(),\n              },\n            });\n          }\n        } else {\n          // No category mapping service available - preserve original structure\n          this.modules.set(module.id, {\n            ...module,\n            category: originalCategory,\n            categoryId: originalCategory,\n          });\n        }\n      });\n\n      // Clear categorized content cache since modules have been reloaded\n      this.clearCategorizedContentCache();\n    } catch (error) {\n      console.error('Error loading modules:', error);\n      throw new Error('Failed to load IHK modules');\n    }\n  }\n\n  /**\n   * Enrich modules with user progress data (completion status)\n   * Adds completed, inProgress, and status fields to each module\n   * @private\n   * @param {Array} modules - Array of module objects to enrich\n   * @returns {Array} Enriched modules with progress information\n   */\n  _enrichModulesWithProgress(modules) {\n    const progress = this.stateManager.getState('progress') || {};\n    const completed = progress.modulesCompleted || [];\n    const inProgress = progress.modulesInProgress || [];\n\n    return modules.map(module => ({\n      ...module,\n      completed: completed.includes(module.id),\n      inProgress: inProgress.includes(module.id),\n      status: completed.includes(module.id)\n        ? 'completed'\n        : inProgress.includes(module.id)\n          ? 'in-progress'\n          : 'not-started',\n    }));\n  }\n\n  /**\n   * Get all categories\n   */\n  getCategories() {\n    if (!this.categories) {\n      return [];\n    }\n    return this.categories.categories || [];\n  }\n\n  /**\n   * Get recommended learning paths\n   */\n  getRecommendedLearningPaths() {\n    return [\n      {\n        id: 'ap2-complete',\n        title: 'AP2 Komplett',\n        description:\n          'Vollständige Vorbereitung auf die Abschlussprüfung Teil 2',\n        difficulty: 'intermediate',\n        estimatedDuration: 120,\n      },\n      {\n        id: 'sql-mastery',\n        title: 'SQL Mastery',\n        description: 'Alle SQL-Befehle aus dem Prüfungsbeiblatt meistern',\n        difficulty: 'beginner',\n        estimatedDuration: 20,\n      },\n      {\n        id: 'new-topics-2025',\n        title: 'Neue Themen 2025',\n        description:\n          'Alle neuen Themen ab 2025 (TDD, Scrum, Sortierverfahren, etc.)',\n        difficulty: 'intermediate',\n        estimatedDuration: 30,\n      },\n      {\n        id: 'oop-fundamentals',\n        title: 'OOP Fundamentals',\n        description: 'Objektorientierte Programmierung von Grund auf',\n        difficulty: 'beginner',\n        estimatedDuration: 25,\n      },\n    ];\n  }\n\n  /**\n   * Get a single module by ID\n   */\n  async getModuleById(moduleId) {\n    // Load all modules if not already loaded\n    await this._loadAllModules();\n\n    // Get module from cache\n    const module = this.modules.get(moduleId);\n    if (!module) {\n      return null;\n    }\n\n    // Enrich with progress data\n    const enriched = this._enrichModulesWithProgress([module]);\n    return enriched[0];\n  }\n\n  /**\n   * Get all modules\n   */\n  async getAllModules() {\n    // Load all modules if not already loaded\n    await this._loadAllModules();\n    return Array.from(this.modules.values());\n  }\n\n  /**\n   * Get all quizzes\n   */\n  async getAllQuizzes() {\n    // Load all quizzes if not already loaded\n    if (this.quizzes.size === 0) {\n      await this._loadAllQuizzes();\n    }\n\n    return Array.from(this.quizzes.values());\n  }\n\n  /**\n   * Get a single quiz by ID\n   */\n  async getQuizById(quizId) {\n    try {\n      // Load all quizzes if not already loaded\n      if (this.quizzes.size === 0) {\n        await this._loadAllQuizzes();\n      }\n\n      // Check cache\n      if (this.quizzes.has(quizId)) {\n        return this.quizzes.get(quizId);\n      }\n\n      // Try dynamic import as fallback\n      const quizData = await import(`../data/ihk/quizzes/${quizId}.json`);\n      const quiz = quizData.default;\n      this.quizzes.set(quiz.id, quiz);\n\n      return quiz;\n    } catch (error) {\n      console.error(`Error getting quiz ${quizId}:`, error);\n      return null;\n    }\n  }\n\n  /**\n   * Get quizzes related to a module\n   */\n  getRelatedQuizzes(moduleId) {\n    const allQuizzes = Array.from(this.quizzes.values());\n    return allQuizzes.filter(quiz => quiz.moduleId === moduleId);\n  }\n\n  /**\n   * Load all IHK quizzes into memory cache\n   * Quizzes are statically imported at the top of this file for optimal bundling\n   * Enhanced to apply three-tier category mapping during load\n   * @private\n   */\n  async _loadAllQuizzes() {\n    const allQuizzes = [\n      bp01ConceptionQuiz,\n      bp01DocumentationQuiz,\n      bp01MonitoringQuiz,\n      bp01OdbcQuiz,\n      bp02CloudModelsQuiz,\n      bp02DataFormatsQuiz,\n      bp02NasSanQuiz,\n      bp02QualityAssuranceQuiz,\n      bp03CpsQuiz,\n      bp03RestApiQuiz,\n      bp03SoftwareQualityQuiz,\n      bp03TddQuiz,\n      bp04ArchitecturePatternsQuiz,\n      bp04DesignPatternsQuiz,\n      bp04ProgrammingParadigmsQuiz,\n      bp04ScrumQuiz,\n      bp05DataStructuresQuiz,\n      bp05EncapsulationQuiz,\n      bp05SortingQuiz,\n      bp05SqlReferenceQuiz,\n      fue01PlanningQuiz,\n      fue02AnomaliesRedundanciesQuiz,\n      fue02ControlStructuresQuiz,\n      fue02DevelopmentQuiz,\n      fue03LoadPerformanceTestsQuiz,\n      fue03QualityQuiz,\n      fue04SecurityQuiz,\n      fue04SecurityThreatsQuiz,\n      kerberosQuiz,\n      scrumQuiz,\n      sortingAlgorithmsQuiz,\n      sqlComprehensiveQuiz,\n      sqlDdl2025Quiz,\n      sqlDml2025Quiz,\n      tddQuiz,\n      // DPA-specific quizzes\n      bpDpa01ErModelingQuiz,\n      bpDpa01NormalizationQuiz,\n      bpDpa02EtlQuiz,\n      bpDpa03BpmnQuiz,\n      bpDpa04BiQuiz,\n      bpDpa05DataWarehousingQuiz,\n      bpDpa06DataQualityQuiz,\n      bpDpa07StatisticalAnalysisQuiz,\n      bpDpa08ProcessOptimizationQuiz,\n      bpDpa09AdvancedBiQuiz,\n      // Newly added DPA 2025 quizzes\n      bpDpa03ProcessMiningQuiz,\n      bpDpa03KpiMeasurementQuiz,\n      bpDpa03LeanSixSigmaQuiz,\n      bpDpa03AutomationOrchestrationQuiz,\n    ];\n\n    // Apply three-tier category mapping to each quiz\n    allQuizzes.forEach(quiz => {\n      // Preserve original category for backward compatibility\n      const originalCategory = quiz.category || quiz.categoryId;\n\n      // Apply three-tier category mapping if service is available\n      if (this.categoryMappingService) {\n        try {\n          const mappingResult =\n            this.categoryMappingService.mapToThreeTierCategory(quiz);\n\n          // Add three-tier category information while preserving original\n          const enhancedQuiz = {\n            ...quiz,\n            // Preserve original category fields for backward compatibility\n            category: originalCategory,\n            categoryId: originalCategory,\n            // Add new three-tier category information\n            threeTierCategory: mappingResult.threeTierCategory,\n            categoryMapping: {\n              threeTierCategory: mappingResult.threeTierCategory,\n              categoryInfo: mappingResult.categoryInfo,\n              mappingRule: mappingResult.appliedRule,\n              mappingReason: mappingResult.reason,\n              mappingTimestamp: mappingResult.timestamp,\n            },\n          };\n\n          this.quizzes.set(quiz.id, enhancedQuiz);\n        } catch (mappingError) {\n          console.warn(\n            `Failed to map quiz ${quiz.id} to three-tier category:`,\n            mappingError\n          );\n          // Fallback: store quiz with original category only\n          this.quizzes.set(quiz.id, {\n            ...quiz,\n            category: originalCategory,\n            categoryId: originalCategory,\n            threeTierCategory: 'allgemein', // Default fallback\n            categoryMapping: {\n              threeTierCategory: 'allgemein',\n              mappingRule: null,\n              mappingReason: 'Mapping failed, using default',\n              mappingTimestamp: new Date().toISOString(),\n            },\n          });\n        }\n      } else {\n        // No category mapping service available - preserve original structure\n        this.quizzes.set(quiz.id, {\n          ...quiz,\n          category: originalCategory,\n          categoryId: originalCategory,\n        });\n      }\n    });\n\n    // Clear categorized content cache since quizzes have been reloaded\n    this.clearCategorizedContentCache();\n  }\n\n  /**\n   * Get content statistics\n   */\n  getContentStats() {\n    return {\n      totalModules: this.modules.size,\n      totalQuizzes: this.quizzes.size,\n      totalLearningPaths: 4,\n    };\n  }\n\n  /**\n   * Get comprehensive statistics for three-tier categories\n   * @param {Object} options - Options for statistics calculation\n   * @returns {Promise<Object>} Detailed statistics for each three-tier category\n   */\n  async getThreeTierCategoryStats(options = {}) {\n    try {\n      const {\n        includeSpecializationRelevance = true,\n        includeDifficultyDistribution = true,\n        includeContentTypes = true,\n        includeProgressStats = false,\n        specializationId = null,\n      } = options;\n\n      // Ensure all content is loaded\n      await this._loadAllModules();\n      await this._loadAllQuizzes();\n\n      const allModules = Array.from(this.modules.values());\n      const allQuizzes = Array.from(this.quizzes.values());\n      const allContent = [...allModules, ...allQuizzes];\n\n      const stats = {\n        overview: {\n          totalContent: allContent.length,\n          totalModules: allModules.length,\n          totalQuizzes: allQuizzes.length,\n          generatedAt: new Date().toISOString(),\n        },\n        categories: {},\n      };\n\n      // Calculate stats for each three-tier category\n      const categories = [\n        'daten-prozessanalyse',\n        'anwendungsentwicklung',\n        'allgemein',\n      ];\n\n      for (const categoryId of categories) {\n        const categoryContent = allContent.filter(\n          item => item.threeTierCategory === categoryId\n        );\n\n        const categoryModules = categoryContent.filter(\n          item => item.type === 'module' || !item.questions\n        );\n\n        const categoryQuizzes = categoryContent.filter(\n          item => item.type === 'quiz' || item.questions\n        );\n\n        const categoryStats = {\n          metadata: this._getCategoryMetadata(categoryId),\n          contentCounts: {\n            total: categoryContent.length,\n            modules: categoryModules.length,\n            quizzes: categoryQuizzes.length,\n            percentage:\n              allContent.length > 0\n                ? Math.round((categoryContent.length / allContent.length) * 100)\n                : 0,\n          },\n        };\n\n        // Add difficulty distribution if requested\n        if (includeDifficultyDistribution) {\n          categoryStats.difficultyDistribution =\n            this._calculateDifficultyDistribution(categoryContent);\n        }\n\n        // Add content type breakdown if requested\n        if (includeContentTypes) {\n          categoryStats.contentTypes =\n            this._calculateContentTypeBreakdown(categoryContent);\n        }\n\n        // Add specialization relevance if requested\n        if (includeSpecializationRelevance) {\n          categoryStats.specializationRelevance =\n            this._calculateSpecializationRelevance(\n              categoryContent,\n              specializationId\n            );\n        }\n\n        // Add progress statistics if requested and specialization provided\n        if (includeProgressStats && specializationId) {\n          categoryStats.progressStats = await this._calculateProgressStats(\n            categoryContent,\n            specializationId\n          );\n        }\n\n        stats.categories[categoryId] = categoryStats;\n      }\n\n      // Add cross-category insights\n      stats.insights = this._generateCategoryInsights(stats.categories);\n\n      return stats;\n    } catch (error) {\n      console.error('Error calculating three-tier category stats:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get category statistics for a specific specialization\n   * @param {string} specializationId - Specialization ID\n   * @returns {Promise<Object>} Category statistics tailored for specialization\n   */\n  async getCategoryStatsForSpecialization(specializationId) {\n    try {\n      if (!specializationId || typeof specializationId !== 'string') {\n        throw new Error('Invalid specialization ID');\n      }\n\n      const stats = await this.getThreeTierCategoryStats({\n        includeSpecializationRelevance: true,\n        includeDifficultyDistribution: true,\n        includeContentTypes: true,\n        includeProgressStats: true,\n        specializationId: specializationId,\n      });\n\n      // Add specialization-specific insights\n      stats.specializationInsights = this._generateSpecializationInsights(\n        stats.categories,\n        specializationId\n      );\n\n      // Rank categories by relevance for this specialization\n      stats.categoryRanking = this._rankCategoriesByRelevance(\n        stats.categories,\n        specializationId\n      );\n\n      return stats;\n    } catch (error) {\n      console.error('Error calculating specialization category stats:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get modules filtered by specialization\n   * @param {string} specializationId - The specialization ID to filter for\n   * @param {Object} options - Filtering options\n   * @returns {Promise<Array>} Filtered modules array\n   */\n  async getModulesBySpecialization(specializationId, options = {}) {\n    try {\n      if (!specializationId || typeof specializationId !== 'string') {\n        throw new Error('Invalid specialization ID');\n      }\n\n      // Load all modules\n      await this._loadAllModules();\n      const allModules = Array.from(this.modules.values());\n\n      // If no specialization service available, return all modules\n      if (!this.specializationService) {\n        console.warn(\n          'SpecializationService not available, returning all modules'\n        );\n        return this._enrichModulesWithProgress(allModules);\n      }\n\n      // Filter modules by specialization\n      const filteredModules =\n        this.specializationService.filterContentBySpecialization(\n          allModules,\n          specializationId,\n          {\n            minRelevance: options.minRelevance || 'low',\n            includeGeneral: options.includeGeneral !== false,\n          }\n        );\n\n      return this._enrichModulesWithProgress(filteredModules);\n    } catch (error) {\n      console.error(\n        `Error getting modules by specialization ${specializationId}:`,\n        error\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Get quizzes filtered by specialization\n   * @param {string} specializationId - The specialization ID to filter for\n   * @param {Object} options - Filtering options\n   * @returns {Promise<Array>} Filtered quizzes array\n   */\n  async getQuizzesBySpecialization(specializationId, options = {}) {\n    try {\n      if (!specializationId || typeof specializationId !== 'string') {\n        throw new Error('Invalid specialization ID');\n      }\n\n      // Load all quizzes\n      await this._loadAllQuizzes();\n      const allQuizzes = Array.from(this.quizzes.values());\n\n      // If no specialization service available, return all quizzes\n      if (!this.specializationService) {\n        console.warn(\n          'SpecializationService not available, returning all quizzes'\n        );\n        return allQuizzes;\n      }\n\n      // Filter quizzes by specialization\n      const filteredQuizzes =\n        this.specializationService.filterContentBySpecialization(\n          allQuizzes,\n          specializationId,\n          {\n            minRelevance: options.minRelevance || 'low',\n            includeGeneral: options.includeGeneral !== false,\n          }\n        );\n\n      return filteredQuizzes;\n    } catch (error) {\n      console.error(\n        `Error getting quizzes by specialization ${specializationId}:`,\n        error\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Get content statistics by specialization\n   * @param {string} specializationId - The specialization ID\n   * @returns {Promise<Object>} Statistics object with counts by category and relevance\n   */\n  async getContentStatsBySpecialization(specializationId) {\n    try {\n      if (!specializationId || typeof specializationId !== 'string') {\n        throw new Error('Invalid specialization ID');\n      }\n\n      // Load all content\n      await this._loadAllModules();\n      await this._loadAllQuizzes();\n\n      const allModules = Array.from(this.modules.values());\n      const allQuizzes = Array.from(this.quizzes.values());\n\n      const stats = {\n        specialization: specializationId,\n        modules: {\n          total: allModules.length,\n          byRelevance: { high: 0, medium: 0, low: 0, none: 0 },\n          byCategory: {},\n        },\n        quizzes: {\n          total: allQuizzes.length,\n          byRelevance: { high: 0, medium: 0, low: 0, none: 0 },\n          byCategory: {},\n        },\n      };\n\n      if (!this.specializationService) {\n        console.warn(\n          'SpecializationService not available, returning basic statistics'\n        );\n        return stats;\n      }\n\n      // Calculate module statistics\n      allModules.forEach(module => {\n        const categoryId = module.category || module.categoryId;\n        if (categoryId) {\n          const relevance = this.specializationService.getCategoryRelevance(\n            categoryId,\n            specializationId\n          );\n\n          // Count by relevance\n          if (stats.modules.byRelevance[relevance] !== undefined) {\n            stats.modules.byRelevance[relevance]++;\n          }\n\n          // Count by category\n          if (!stats.modules.byCategory[categoryId]) {\n            stats.modules.byCategory[categoryId] = {\n              count: 0,\n              relevance: relevance,\n            };\n          }\n          stats.modules.byCategory[categoryId].count++;\n        } else {\n          stats.modules.byRelevance.none++;\n        }\n      });\n\n      // Calculate quiz statistics\n      allQuizzes.forEach(quiz => {\n        const categoryId = quiz.category || quiz.categoryId;\n        if (categoryId) {\n          const relevance = this.specializationService.getCategoryRelevance(\n            categoryId,\n            specializationId\n          );\n\n          // Count by relevance\n          if (stats.quizzes.byRelevance[relevance] !== undefined) {\n            stats.quizzes.byRelevance[relevance]++;\n          }\n\n          // Count by category\n          if (!stats.quizzes.byCategory[categoryId]) {\n            stats.quizzes.byCategory[categoryId] = {\n              count: 0,\n              relevance: relevance,\n            };\n          }\n          stats.quizzes.byCategory[categoryId].count++;\n        } else {\n          stats.quizzes.byRelevance.none++;\n        }\n      });\n\n      return stats;\n    } catch (error) {\n      console.error(\n        `Error getting content statistics for specialization ${specializationId}:`,\n        error\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Get content organized by specialization relevance\n   * @param {string} specializationId - The specialization ID\n   * @returns {Promise<Object>} Object with content organized by relevance levels\n   */\n  async getContentByRelevance(specializationId) {\n    try {\n      if (!specializationId || typeof specializationId !== 'string') {\n        throw new Error('Invalid specialization ID');\n      }\n\n      // Load all content\n      await this._loadAllModules();\n      await this._loadAllQuizzes();\n\n      const allModules = Array.from(this.modules.values());\n      const allQuizzes = Array.from(this.quizzes.values());\n\n      const result = {\n        high: { modules: [], quizzes: [] },\n        medium: { modules: [], quizzes: [] },\n        low: { modules: [], quizzes: [] },\n      };\n\n      if (!this.specializationService) {\n        console.warn('SpecializationService not available');\n        return result;\n      }\n\n      // Organize modules by relevance\n      allModules.forEach(module => {\n        const categoryId = module.category || module.categoryId;\n        if (categoryId) {\n          const relevance = this.specializationService.getCategoryRelevance(\n            categoryId,\n            specializationId\n          );\n          if (result[relevance]) {\n            result[relevance].modules.push(module);\n          }\n        }\n      });\n\n      // Organize quizzes by relevance\n      allQuizzes.forEach(quiz => {\n        const categoryId = quiz.category || quiz.categoryId;\n        if (categoryId) {\n          const relevance = this.specializationService.getCategoryRelevance(\n            categoryId,\n            specializationId\n          );\n          if (result[relevance]) {\n            result[relevance].quizzes.push(quiz);\n          }\n        }\n      });\n\n      // Enrich modules with progress data\n      Object.keys(result).forEach(relevance => {\n        result[relevance].modules = this._enrichModulesWithProgress(\n          result[relevance].modules\n        );\n      });\n\n      return result;\n    } catch (error) {\n      console.error(\n        `Error getting content by relevance for specialization ${specializationId}:`,\n        error\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Get content filtered by three-tier category\n   * @param {string} categoryId - Three-tier category ID ('daten-prozessanalyse', 'anwendungsentwicklung', 'allgemein')\n   * @returns {Promise<Array>} Array of content items in the specified category\n   */\n  async getContentByThreeTierCategory(categoryId) {\n    try {\n      if (!categoryId || typeof categoryId !== 'string') {\n        throw new Error('Invalid three-tier category ID');\n      }\n\n      const validCategories = [\n        'daten-prozessanalyse',\n        'anwendungsentwicklung',\n        'allgemein',\n      ];\n      if (!validCategories.includes(categoryId)) {\n        throw new Error(\n          `Invalid three-tier category: ${categoryId}. Must be one of: ${validCategories.join(', ')}`\n        );\n      }\n\n      // Check cache first\n      const cacheKey = `three-tier-${categoryId}`;\n      if (this.categorizedContentCache.has(cacheKey)) {\n        return this.categorizedContentCache.get(cacheKey);\n      }\n\n      // Load all content\n      await this._loadAllModules();\n      await this._loadAllQuizzes();\n\n      // Use optimized category indexes if available\n      const contentIds = this._getCategoryContentIds(categoryId, 'content');\n      let categorizedContent = [];\n\n      if (contentIds.size > 0) {\n        // Use indexed approach for better performance\n        contentIds.forEach(contentId => {\n          const module = this.modules.get(contentId);\n          const quiz = this.quizzes.get(contentId);\n\n          if (module && module.threeTierCategory === categoryId) {\n            categorizedContent.push({ ...module, contentType: 'module' });\n          } else if (quiz && quiz.threeTierCategory === categoryId) {\n            categorizedContent.push({ ...quiz, contentType: 'quiz' });\n          }\n        });\n      } else {\n        // Fallback to full scan if indexes not available or category mapping service missing\n        if (!this.categoryMappingService) {\n          console.warn(\n            'CategoryMappingService not available, returning empty array'\n          );\n          return [];\n        }\n\n        const allContent = [\n          ...Array.from(this.modules.values()),\n          ...Array.from(this.quizzes.values()),\n        ];\n\n        // Filter content by three-tier category\n        categorizedContent = allContent\n          .filter(item => {\n            // Use pre-computed three-tier category if available\n            if (item.threeTierCategory) {\n              return item.threeTierCategory === categoryId;\n            }\n\n            // Fallback to mapping service\n            const mappingResult =\n              this.categoryMappingService.mapToThreeTierCategory(item);\n            return mappingResult.threeTierCategory === categoryId;\n          })\n          .map(item => ({\n            ...item,\n            contentType: item.content || item.sections ? 'module' : 'quiz',\n          }));\n      }\n\n      // Enrich modules with progress data\n      const enrichedContent = categorizedContent.map(item => {\n        if (item.contentType === 'module') {\n          const enriched = this._enrichModulesWithProgress([item]);\n          return enriched[0];\n        } else {\n          return item;\n        }\n      });\n\n      // Cache the result\n      this.categorizedContentCache.set(cacheKey, enrichedContent);\n\n      return enrichedContent;\n    } catch (error) {\n      console.error(\n        `Error getting content by three-tier category ${categoryId}:`,\n        error\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Get content organized by three-tier categories with metadata\n   * @param {string} specializationId - Optional specialization ID for relevance calculation\n   * @returns {Promise<Object>} Object with content organized by three-tier categories\n   */\n  async getContentWithCategoryInfo(specializationId) {\n    try {\n      // Load all content\n      await this._loadAllModules();\n      await this._loadAllQuizzes();\n\n      if (!this.categoryMappingService) {\n        console.warn(\n          'CategoryMappingService not available, returning empty structure'\n        );\n        return this._getEmptyCategorizedContent();\n      }\n\n      const allModules = Array.from(this.modules.values());\n      const allQuizzes = Array.from(this.quizzes.values());\n\n      // Initialize result structure\n      const result = {\n        'daten-prozessanalyse': {\n          modules: [],\n          quizzes: [],\n          relevance: 'none',\n          metadata: null,\n        },\n        anwendungsentwicklung: {\n          modules: [],\n          quizzes: [],\n          relevance: 'none',\n          metadata: null,\n        },\n        allgemein: {\n          modules: [],\n          quizzes: [],\n          relevance: 'none',\n          metadata: null,\n        },\n      };\n\n      // Get category metadata\n      const threeTierCategories =\n        this.categoryMappingService.getThreeTierCategories();\n      threeTierCategories.forEach(category => {\n        if (result[category.id]) {\n          result[category.id].metadata = category;\n\n          // Calculate relevance for specialization if provided\n          if (specializationId && this.categoryMappingService) {\n            result[category.id].relevance =\n              this.categoryMappingService.getCategoryRelevance(\n                category.id,\n                specializationId\n              );\n          }\n        }\n      });\n\n      // Categorize modules\n      allModules.forEach(module => {\n        const mappingResult =\n          this.categoryMappingService.mapToThreeTierCategory(module);\n        const categoryId = mappingResult.threeTierCategory;\n\n        if (result[categoryId]) {\n          result[categoryId].modules.push({\n            ...module,\n            threeTierCategory: categoryId,\n            mappingInfo: mappingResult,\n          });\n        }\n      });\n\n      // Categorize quizzes\n      allQuizzes.forEach(quiz => {\n        const mappingResult =\n          this.categoryMappingService.mapToThreeTierCategory(quiz);\n        const categoryId = mappingResult.threeTierCategory;\n\n        if (result[categoryId]) {\n          result[categoryId].quizzes.push({\n            ...quiz,\n            threeTierCategory: categoryId,\n            mappingInfo: mappingResult,\n          });\n        }\n      });\n\n      // Enrich modules with progress data\n      Object.keys(result).forEach(categoryId => {\n        result[categoryId].modules = this._enrichModulesWithProgress(\n          result[categoryId].modules\n        );\n      });\n\n      return result;\n    } catch (error) {\n      console.error('Error getting content with category info:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Search content within a specific three-tier category\n   * @param {string} query - Search query string\n   * @param {string} categoryId - Three-tier category ID to search within\n   * @returns {Promise<Array>} Array of matching content items\n   */\n  async searchInCategory(query, categoryId) {\n    try {\n      if (!query || typeof query !== 'string') {\n        throw new Error('Invalid search query');\n      }\n\n      if (!categoryId || typeof categoryId !== 'string') {\n        throw new Error('Invalid category ID');\n      }\n\n      const validCategories = [\n        'daten-prozessanalyse',\n        'anwendungsentwicklung',\n        'allgemein',\n      ];\n      if (!validCategories.includes(categoryId)) {\n        throw new Error(`Invalid three-tier category: ${categoryId}`);\n      }\n\n      // Get all content in the specified category\n      const categoryContent =\n        await this.getContentByThreeTierCategory(categoryId);\n\n      // Apply text search\n      const searchTerm = query.toLowerCase().trim(); // kept (used below)\n      const results = categoryContent.filter(item => {\n        // Search in title\n        if (item.title && item.title.toLowerCase().includes(searchTerm)) {\n          return true;\n        }\n\n        // Search in description\n        if (\n          item.description &&\n          item.description.toLowerCase().includes(searchTerm)\n        ) {\n          return true;\n        }\n\n        // Search in tags\n        if (item.tags && Array.isArray(item.tags)) {\n          if (item.tags.some(tag => tag.toLowerCase().includes(searchTerm))) {\n            return true;\n          }\n        }\n\n        // Search in content (for modules)\n        if (item.content && item.content.toLowerCase().includes(searchTerm)) {\n          return true;\n        }\n\n        // Search in questions (for quizzes)\n        if (item.questions && Array.isArray(item.questions)) {\n          return item.questions.some(\n            question =>\n              question.question &&\n              question.question.toLowerCase().includes(searchTerm)\n          );\n        }\n\n        return false;\n      });\n\n      // Add search relevance score\n      return results\n        .map(item => ({\n          ...item,\n          searchRelevance: this._calculateSearchRelevance(item, searchTerm),\n        }))\n        .sort((a, b) => b.searchRelevance - a.searchRelevance);\n    } catch (error) {\n      console.error(`Error searching in category ${categoryId}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Enhanced search with category filtering and advanced options\n   * @param {string} query - Search query string\n   * @param {Object} options - Search options\n   * @returns {Promise<Object>} Search results grouped by categories with metadata\n   */\n  async searchWithCategoryFiltering(query, options = {}) {\n    try {\n      const {\n        categories = [\n          'daten-prozessanalyse',\n          'anwendungsentwicklung',\n          'allgemein',\n        ],\n        contentTypes = ['module', 'quiz'],\n        maxResultsPerCategory = 10,\n        minRelevanceScore = 1,\n        includeMetadata = true,\n        sortBy = 'relevance', // 'relevance', 'title', 'difficulty'\n        specializationId = null,\n      } = options;\n\n      if (!query || typeof query !== 'string') {\n        throw new Error('Invalid search query');\n      }\n\n      const searchTerm = query.toLowerCase().trim();\n      const results = {\n        query: query,\n        totalResults: 0,\n        categories: {},\n        suggestions: [],\n      };\n\n      // Search in each requested category\n      for (const categoryId of categories) {\n        try {\n          const categoryResults = await this.searchInCategory(\n            query,\n            categoryId\n          );\n\n          // Filter by content type\n          let filteredResults = categoryResults.filter(item => {\n            const itemType = item.type || (item.questions ? 'quiz' : 'module');\n            return contentTypes.includes(itemType);\n          });\n\n          // Filter by minimum relevance score\n          filteredResults = filteredResults.filter(\n            item => (item.searchRelevance || 0) >= minRelevanceScore\n          );\n\n          // Apply specialization relevance boost if specified\n          if (specializationId) {\n            filteredResults = filteredResults.map(item => ({\n              ...item,\n              searchRelevance: this._boostRelevanceForSpecialization(\n                item,\n                specializationId\n              ),\n            }));\n          }\n\n          // Sort results\n          filteredResults = this._sortSearchResults(filteredResults, sortBy);\n\n          // Limit results per category\n          filteredResults = filteredResults.slice(0, maxResultsPerCategory);\n\n          // Add category metadata if requested\n          const categoryData = {\n            results: filteredResults,\n            totalFound: filteredResults.length,\n          };\n\n          if (includeMetadata) {\n            categoryData.metadata = this._getCategoryMetadata(categoryId);\n          }\n\n          results.categories[categoryId] = categoryData;\n          results.totalResults += filteredResults.length;\n        } catch (categoryError) {\n          console.warn(\n            `Error searching in category ${categoryId}:`,\n            categoryError\n          );\n          results.categories[categoryId] = {\n            results: [],\n            totalFound: 0,\n            error: categoryError.message,\n          };\n        }\n      }\n\n      // Generate search suggestions if no results found\n      if (results.totalResults === 0) {\n        results.suggestions = await this._generateSearchSuggestions(query);\n      }\n\n      return results;\n    } catch (error) {\n      console.error('Error in enhanced search:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Search across all categories with result grouping\n   * @param {string} query - Search query string\n   * @param {Object} options - Search options\n   * @returns {Promise<Array>} Unified search results with category grouping\n   */\n  async searchAllCategories(query, options = {}) {\n    try {\n      const {\n        maxResults = 20,\n        groupByCategory = true,\n        includeEmptyCategories = false,\n      } = options;\n\n      const searchResults = await this.searchWithCategoryFiltering(query, {\n        ...options,\n        maxResultsPerCategory: Math.ceil(maxResults / 3), // Distribute across categories\n      });\n\n      if (!groupByCategory) {\n        // Return flat array of all results\n        const allResults = [];\n        Object.values(searchResults.categories).forEach(categoryData => {\n          allResults.push(...categoryData.results);\n        });\n\n        // Sort all results by relevance and limit\n        return allResults\n          .sort((a, b) => (b.searchRelevance || 0) - (a.searchRelevance || 0))\n          .slice(0, maxResults);\n      }\n\n      // Return grouped results\n      const groupedResults = [];\n      const categoryOrder = [\n        'daten-prozessanalyse',\n        'anwendungsentwicklung',\n        'allgemein',\n      ];\n\n      for (const categoryId of categoryOrder) {\n        const categoryData = searchResults.categories[categoryId];\n\n        if (\n          !categoryData ||\n          (!includeEmptyCategories && categoryData.totalFound === 0)\n        ) {\n          continue;\n        }\n\n        groupedResults.push({\n          category: categoryId,\n          categoryName: this._getCategoryMetadata(categoryId).name,\n          results: categoryData.results || [],\n          totalFound: categoryData.totalFound || 0,\n        });\n      }\n\n      return groupedResults;\n    } catch (error) {\n      console.error('Error in searchAllCategories:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Get search suggestions based on content and user behavior\n   * @param {string} query - Original search query\n   * @returns {Promise<Array>} Array of search suggestions\n   */\n  async _generateSearchSuggestions(query) {\n    try {\n      const suggestions = [];\n      const searchTerm = query.toLowerCase().trim();\n\n      // Load all content for analysis\n      await this._loadAllModules();\n      await this._loadAllQuizzes();\n\n      const allContent = [\n        ...Array.from(this.modules.values()),\n        ...Array.from(this.quizzes.values()),\n      ];\n\n      // Find similar terms in titles and descriptions\n      const similarTerms = new Set();\n\n      allContent.forEach(item => {\n        // Extract words from title and description\n        const text =\n          `${item.title || ''} ${item.description || ''}`.toLowerCase();\n        const words = text.split(/\\s+/).filter(word => word.length > 2);\n\n        words.forEach(word => {\n          // Find words that are similar to search term\n          if (word.includes(searchTerm) || searchTerm.includes(word)) {\n            similarTerms.add(word);\n          }\n\n          // Find words that start with search term\n          if (word.startsWith(searchTerm) && word !== searchTerm) {\n            similarTerms.add(word);\n          }\n        });\n      });\n\n      // Convert to suggestions array\n      Array.from(similarTerms)\n        .slice(0, 5)\n        .forEach(term => {\n          suggestions.push({\n            text: term,\n            type: 'similar_term',\n          });\n        });\n\n      // Add category-based suggestions\n      const categories = [\n        'daten-prozessanalyse',\n        'anwendungsentwicklung',\n        'allgemein',\n      ];\n      categories.forEach(categoryId => {\n        const metadata = this._getCategoryMetadata(categoryId);\n        suggestions.push({\n          text: `${query} in ${metadata.name}`,\n          type: 'category_filter',\n          categoryId: categoryId,\n        });\n      });\n\n      return suggestions.slice(0, 8); // Limit total suggestions\n    } catch (error) {\n      console.error('Error generating search suggestions:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Calculate search relevance score for an item\n   * @private\n   * @param {Object} item - Content item\n   * @param {string} searchTerm - Search term\n   * @returns {number} Relevance score (higher is more relevant)\n   */\n  _calculateSearchRelevance(item, searchTerm) {\n    let score = 0;\n\n    // Title matches get highest score\n    if (item.title && item.title.toLowerCase().includes(searchTerm)) {\n      score += 10;\n      // Exact title match gets bonus\n      if (item.title.toLowerCase() === searchTerm) {\n        score += 5;\n      }\n    }\n\n    // Description matches get medium score\n    if (\n      item.description &&\n      item.description.toLowerCase().includes(searchTerm)\n    ) {\n      score += 5;\n    }\n\n    // Tag matches get medium score\n    if (item.tags && Array.isArray(item.tags)) {\n      const tagMatches = item.tags.filter(tag =>\n        tag.toLowerCase().includes(searchTerm)\n      ).length;\n      score += tagMatches * 3;\n    }\n\n    // Content matches get lower score\n    if (item.content && item.content.toLowerCase().includes(searchTerm)) {\n      score += 2;\n    }\n\n    // Question matches for quizzes\n    if (item.questions && Array.isArray(item.questions)) {\n      const questionMatches = item.questions.filter(\n        q => q.question && q.question.toLowerCase().includes(searchTerm)\n      ).length;\n      score += questionMatches * 2;\n    }\n\n    return score;\n  }\n\n  /**\n   * Boost relevance score based on specialization\n   * @private\n   * @param {Object} item - Content item\n   * @param {string} specializationId - Specialization ID\n   * @returns {number} Boosted relevance score\n   */\n  _boostRelevanceForSpecialization(item, specializationId) {\n    let boostedScore = item.searchRelevance || 0;\n\n    if (\n      item.specializationRelevance &&\n      item.specializationRelevance[specializationId]\n    ) {\n      const relevance = item.specializationRelevance[specializationId];\n      const boost = relevance === 'high' ? 5 : relevance === 'medium' ? 3 : 1;\n      boostedScore += boost;\n    }\n\n    return boostedScore;\n  }\n\n  /**\n   * Sort search results by specified criteria\n   * @private\n   * @param {Array} results - Search results\n   * @param {string} sortBy - Sort criteria\n   * @returns {Array} Sorted results\n   */\n  _sortSearchResults(results, sortBy) {\n    switch (sortBy) {\n      case 'title':\n        return results.sort((a, b) =>\n          (a.title || '').localeCompare(b.title || '')\n        );\n\n      case 'difficulty': {\n        const difficultyOrder = { beginner: 1, intermediate: 2, advanced: 3 };\n        return results.sort((a, b) => {\n          const aDiff = difficultyOrder[a.difficulty] || 2;\n          const bDiff = difficultyOrder[b.difficulty] || 2;\n          return aDiff - bDiff;\n        });\n      }\n\n      case 'relevance':\n      default:\n        return results.sort(\n          (a, b) => (b.searchRelevance || 0) - (a.searchRelevance || 0)\n        );\n    }\n  }\n\n  /**\n   * Get metadata for a three-tier category\n   * @private\n   * @param {string} categoryId - Category ID\n   * @returns {Object} Category metadata\n   */\n  _getCategoryMetadata(categoryId) {\n    const metadata = {\n      'daten-prozessanalyse': {\n        id: 'daten-prozessanalyse',\n        name: 'Daten und Prozessanalyse',\n        description:\n          'Inhalte mit hoher Relevanz für die Fachrichtung Daten- und Prozessanalyse',\n        color: '#3b82f6',\n        icon: '📊',\n      },\n      anwendungsentwicklung: {\n        id: 'anwendungsentwicklung',\n        name: 'Anwendungsentwicklung',\n        description:\n          'Inhalte mit hoher Relevanz für die Fachrichtung Anwendungsentwicklung',\n        color: '#10b981',\n        icon: '💻',\n      },\n      allgemein: {\n        id: 'allgemein',\n        name: 'Allgemein',\n        description: 'Allgemeine Inhalte relevant für beide Fachrichtungen',\n        color: '#6b7280',\n        icon: '📚',\n      },\n    };\n\n    return metadata[categoryId] || metadata['allgemein'];\n  }\n\n  /**\n   * Calculate difficulty distribution for content\n   * @private\n   * @param {Array} content - Array of content items\n   * @returns {Object} Difficulty distribution\n   */\n  _calculateDifficultyDistribution(content) {\n    const distribution = {\n      beginner: 0,\n      intermediate: 0,\n      advanced: 0,\n      unknown: 0,\n    };\n\n    content.forEach(item => {\n      const difficulty = item.difficulty || 'unknown';\n      if (Object.prototype.hasOwnProperty.call(distribution, difficulty)) {\n        distribution[difficulty]++;\n      } else {\n        distribution.unknown++;\n      }\n    });\n\n    // Calculate percentages\n    const total = content.length;\n    const percentages = {};\n    Object.keys(distribution).forEach(level => {\n      percentages[level] =\n        total > 0 ? Math.round((distribution[level] / total) * 100) : 0;\n    });\n\n    return {\n      counts: distribution,\n      percentages: percentages,\n      total: total,\n    };\n  }\n\n  /**\n   * Calculate content type breakdown\n   * @private\n   * @param {Array} content - Array of content items\n   * @returns {Object} Content type breakdown\n   */\n  _calculateContentTypeBreakdown(content) {\n    const breakdown = {\n      modules: 0,\n      quizzes: 0,\n      other: 0,\n    };\n\n    content.forEach(item => {\n      if (item.type === 'module' || (!item.questions && !item.type)) {\n        breakdown.modules++;\n      } else if (item.type === 'quiz' || item.questions) {\n        breakdown.quizzes++;\n      } else {\n        breakdown.other++;\n      }\n    });\n\n    const total = content.length;\n    const percentages = {};\n    Object.keys(breakdown).forEach(type => {\n      percentages[type] =\n        total > 0 ? Math.round((breakdown[type] / total) * 100) : 0;\n    });\n\n    return {\n      counts: breakdown,\n      percentages: percentages,\n      total: total,\n    };\n  }\n\n  /**\n   * Calculate specialization relevance for content\n   * @private\n   * @param {Array} content - Array of content items\n   * @param {string} specializationId - Specialization ID (optional)\n   * @returns {Object} Specialization relevance breakdown\n   */\n  _calculateSpecializationRelevance(content, specializationId = null) {\n    const relevanceBreakdown = {\n      anwendungsentwicklung: { high: 0, medium: 0, low: 0, none: 0 },\n      'daten-prozessanalyse': { high: 0, medium: 0, low: 0, none: 0 },\n    };\n\n    content.forEach(item => {\n      if (item.specializationRelevance) {\n        Object.keys(relevanceBreakdown).forEach(specId => {\n          const relevance = item.specializationRelevance[specId] || 'none';\n          if (relevanceBreakdown[specId][relevance] !== undefined) {\n            relevanceBreakdown[specId][relevance]++;\n          } else {\n            relevanceBreakdown[specId].none++;\n          }\n        });\n      } else {\n        // No relevance data - count as none\n        Object.keys(relevanceBreakdown).forEach(specId => {\n          relevanceBreakdown[specId].none++;\n        });\n      }\n    });\n\n    // Calculate percentages and add metadata\n    const result = {};\n    Object.keys(relevanceBreakdown).forEach(specId => {\n      const counts = relevanceBreakdown[specId];\n      const total = content.length;\n\n      const percentages = {};\n      Object.keys(counts).forEach(level => {\n        percentages[level] =\n          total > 0 ? Math.round((counts[level] / total) * 100) : 0;\n      });\n\n      result[specId] = {\n        counts: counts,\n        percentages: percentages,\n        total: total,\n        isCurrentSpecialization: specId === specializationId,\n      };\n    });\n\n    return result;\n  }\n\n  /**\n   * Calculate progress statistics for content\n   * @private\n   * @param {Array} content - Array of content items\n   * @param {string} specializationId - Specialization ID\n   * @returns {Promise<Object>} Progress statistics\n   */\n  async _calculateProgressStats(content, specializationId) {\n    try {\n      // Get user progress from state manager\n      const progress = this.stateManager.getState('progress') || {};\n      const completedModules = progress.completedModules || [];\n      const quizAttempts = progress.quizAttempts || {};\n\n      const stats = {\n        modules: {\n          total: 0,\n          completed: 0,\n          inProgress: 0,\n          notStarted: 0,\n        },\n        quizzes: {\n          total: 0,\n          attempted: 0,\n          passed: 0,\n          notAttempted: 0,\n        },\n      };\n\n      content.forEach(item => {\n        if (item.type === 'module' || (!item.questions && !item.type)) {\n          stats.modules.total++;\n          if (completedModules.includes(item.id)) {\n            stats.modules.completed++;\n          } else {\n            // For now, we don't track in-progress modules separately\n            stats.modules.notStarted++;\n          }\n        } else if (item.type === 'quiz' || item.questions) {\n          stats.quizzes.total++;\n          if (quizAttempts[item.id]) {\n            stats.quizzes.attempted++;\n            // Check if passed (assuming 70% is passing)\n            const attempts = quizAttempts[item.id];\n            const bestScore = Math.max(...attempts.map(a => a.score || 0));\n            const totalQuestions = item.questions ? item.questions.length : 1;\n            const percentage = (bestScore / totalQuestions) * 100;\n            if (percentage >= 70) {\n              stats.quizzes.passed++;\n            }\n          } else {\n            stats.quizzes.notAttempted++;\n          }\n        }\n      });\n\n      // Calculate percentages\n      const moduleTotal = stats.modules.total;\n      const quizTotal = stats.quizzes.total;\n\n      stats.modules.percentages = {\n        completed:\n          moduleTotal > 0\n            ? Math.round((stats.modules.completed / moduleTotal) * 100)\n            : 0,\n        inProgress:\n          moduleTotal > 0\n            ? Math.round((stats.modules.inProgress / moduleTotal) * 100)\n            : 0,\n        notStarted:\n          moduleTotal > 0\n            ? Math.round((stats.modules.notStarted / moduleTotal) * 100)\n            : 0,\n      };\n\n      stats.quizzes.percentages = {\n        attempted:\n          quizTotal > 0\n            ? Math.round((stats.quizzes.attempted / quizTotal) * 100)\n            : 0,\n        passed:\n          quizTotal > 0\n            ? Math.round((stats.quizzes.passed / quizTotal) * 100)\n            : 0,\n        notAttempted:\n          quizTotal > 0\n            ? Math.round((stats.quizzes.notAttempted / quizTotal) * 100)\n            : 0,\n      };\n\n      return stats;\n    } catch (error) {\n      console.error('Error calculating progress stats:', error);\n      return {\n        modules: {\n          total: 0,\n          completed: 0,\n          inProgress: 0,\n          notStarted: 0,\n          percentages: {},\n        },\n        quizzes: {\n          total: 0,\n          attempted: 0,\n          passed: 0,\n          notAttempted: 0,\n          percentages: {},\n        },\n      };\n    }\n  }\n\n  /**\n   * Generate insights across categories\n   * @private\n   * @param {Object} categories - Category statistics\n   * @returns {Object} Cross-category insights\n   */\n  _generateCategoryInsights(categories) {\n    const insights = {\n      mostPopulousCategory: null,\n      mostDiverseCategory: null,\n      recommendedStartingCategory: null,\n      categoryBalance: 'balanced', // balanced, skewed, heavily_skewed\n    };\n\n    // Find most populous category\n    let maxContent = 0;\n    Object.keys(categories).forEach(categoryId => {\n      const count = categories[categoryId].contentCounts.total;\n      if (count > maxContent) {\n        maxContent = count;\n        insights.mostPopulousCategory = {\n          id: categoryId,\n          name: categories[categoryId].metadata.name,\n          count: count,\n        };\n      }\n    });\n\n    // Calculate category balance\n    const counts = Object.values(categories).map(\n      cat => cat.contentCounts.total\n    );\n    const total = counts.reduce((sum, count) => sum + count, 0);\n    const average = total / counts.length;\n    const variance =\n      counts.reduce((sum, count) => sum + Math.pow(count - average, 2), 0) /\n      counts.length;\n    const standardDeviation = Math.sqrt(variance);\n    const coefficientOfVariation =\n      average > 0 ? standardDeviation / average : 0;\n\n    if (coefficientOfVariation < 0.2) {\n      insights.categoryBalance = 'balanced';\n    } else if (coefficientOfVariation < 0.5) {\n      insights.categoryBalance = 'skewed';\n    } else {\n      insights.categoryBalance = 'heavily_skewed';\n    }\n\n    // Find most diverse category (most even difficulty distribution)\n    let mostDiverse = null;\n    let lowestVariance = Infinity;\n\n    Object.keys(categories).forEach(categoryId => {\n      const category = categories[categoryId];\n      if (category.difficultyDistribution) {\n        const diffCounts = Object.values(\n          category.difficultyDistribution.counts\n        );\n        const diffTotal = diffCounts.reduce((sum, count) => sum + count, 0);\n        if (diffTotal > 0) {\n          const diffAverage = diffTotal / diffCounts.length;\n          const diffVariance =\n            diffCounts.reduce(\n              (sum, count) => sum + Math.pow(count - diffAverage, 2),\n              0\n            ) / diffCounts.length;\n\n          if (diffVariance < lowestVariance) {\n            lowestVariance = diffVariance;\n            mostDiverse = {\n              id: categoryId,\n              name: category.metadata.name,\n              variance: diffVariance,\n            };\n          }\n        }\n      }\n    });\n\n    insights.mostDiverseCategory = mostDiverse;\n\n    // Recommend starting category (most beginner content)\n    let maxBeginnerPercentage = 0;\n    Object.keys(categories).forEach(categoryId => {\n      const category = categories[categoryId];\n      if (category.difficultyDistribution) {\n        const beginnerPercentage =\n          category.difficultyDistribution.percentages.beginner || 0;\n        if (beginnerPercentage > maxBeginnerPercentage) {\n          maxBeginnerPercentage = beginnerPercentage;\n          insights.recommendedStartingCategory = {\n            id: categoryId,\n            name: category.metadata.name,\n            beginnerPercentage: beginnerPercentage,\n          };\n        }\n      }\n    });\n\n    return insights;\n  }\n\n  /**\n   * Generate specialization-specific insights\n   * @private\n   * @param {Object} categories - Category statistics\n   * @param {string} specializationId - Specialization ID\n   * @returns {Object} Specialization insights\n   */\n  _generateSpecializationInsights(categories, specializationId) {\n    const insights = {\n      primaryCategory: null,\n      secondaryCategories: [],\n      contentDistribution: {},\n      recommendedFocus: [],\n    };\n\n    // Calculate relevance scores for each category\n    const categoryScores = {};\n    Object.keys(categories).forEach(categoryId => {\n      const category = categories[categoryId];\n      let score = 0;\n\n      if (\n        category.specializationRelevance &&\n        category.specializationRelevance[specializationId]\n      ) {\n        const relevance = category.specializationRelevance[specializationId];\n        score =\n          relevance.counts.high * 3 +\n          relevance.counts.medium * 2 +\n          relevance.counts.low * 1;\n      }\n\n      categoryScores[categoryId] = {\n        score: score,\n        name: category.metadata.name,\n        totalContent: category.contentCounts.total,\n      };\n    });\n\n    // Sort categories by relevance score\n    const sortedCategories = Object.keys(categoryScores).sort(\n      (a, b) => categoryScores[b].score - categoryScores[a].score\n    );\n\n    if (sortedCategories.length > 0) {\n      insights.primaryCategory = {\n        id: sortedCategories[0],\n        ...categoryScores[sortedCategories[0]],\n      };\n\n      insights.secondaryCategories = sortedCategories\n        .slice(1)\n        .map(categoryId => ({\n          id: categoryId,\n          ...categoryScores[categoryId],\n        }));\n    }\n\n    // Generate content distribution insights\n    const totalContent = Object.values(categoryScores).reduce(\n      (sum, cat) => sum + cat.totalContent,\n      0\n    );\n    Object.keys(categoryScores).forEach(categoryId => {\n      const category = categoryScores[categoryId];\n      insights.contentDistribution[categoryId] = {\n        percentage:\n          totalContent > 0\n            ? Math.round((category.totalContent / totalContent) * 100)\n            : 0,\n        relevanceScore: category.score,\n        name: category.name,\n      };\n    });\n\n    // Generate focus recommendations\n    if (insights.primaryCategory && insights.primaryCategory.score > 0) {\n      insights.recommendedFocus.push({\n        category: insights.primaryCategory.id,\n        reason: 'Highest relevance for your specialization',\n        priority: 'high',\n      });\n    }\n\n    insights.secondaryCategories.forEach((category, index) => {\n      if (category.score > 0 && index < 2) {\n        // Top 2 secondary categories\n        insights.recommendedFocus.push({\n          category: category.id,\n          reason: 'Complementary content for your specialization',\n          priority: index === 0 ? 'medium' : 'low',\n        });\n      }\n    });\n\n    return insights;\n  }\n\n  /**\n   * Rank categories by relevance for specialization\n   * @private\n   * @param {Object} categories - Category statistics\n   * @param {string} specializationId - Specialization ID\n   * @returns {Array} Ranked categories\n   */\n  _rankCategoriesByRelevance(categories, specializationId) {\n    const ranking = [];\n\n    Object.keys(categories).forEach(categoryId => {\n      const category = categories[categoryId];\n      let relevanceScore = 0;\n      let highRelevanceCount = 0;\n\n      if (\n        category.specializationRelevance &&\n        category.specializationRelevance[specializationId]\n      ) {\n        const relevance = category.specializationRelevance[specializationId];\n        relevanceScore =\n          relevance.counts.high * 3 +\n          relevance.counts.medium * 2 +\n          relevance.counts.low * 1;\n        highRelevanceCount = relevance.counts.high;\n      }\n\n      ranking.push({\n        categoryId: categoryId,\n        categoryName: category.metadata.name,\n        relevanceScore: relevanceScore,\n        highRelevanceCount: highRelevanceCount,\n        totalContent: category.contentCounts.total,\n        relevancePercentage:\n          category.contentCounts.total > 0\n            ? Math.round(\n                (relevanceScore / (category.contentCounts.total * 3)) * 100\n              )\n            : 0,\n      });\n    });\n\n    // Sort by relevance score (descending)\n    return ranking.sort((a, b) => b.relevanceScore - a.relevanceScore);\n  }\n\n  /**\n   * Get empty categorized content structure\n   * @private\n   * @returns {Object} Empty categorized content structure\n   */\n  _getEmptyCategorizedContent() {\n    return {\n      'daten-prozessanalyse': {\n        modules: [],\n        quizzes: [],\n        relevance: 'none',\n        metadata: {\n          id: 'daten-prozessanalyse',\n          name: 'Daten und Prozessanalyse',\n          description:\n            'Inhalte mit hoher Relevanz für die Fachrichtung Daten- und Prozessanalyse',\n          color: '#3b82f6',\n          icon: '📊',\n        },\n      },\n      anwendungsentwicklung: {\n        modules: [],\n        quizzes: [],\n        relevance: 'none',\n        metadata: {\n          id: 'anwendungsentwicklung',\n          name: 'Anwendungsentwicklung',\n          description:\n            'Inhalte mit hoher Relevanz für die Fachrichtung Anwendungsentwicklung',\n          color: '#10b981',\n          icon: '💻',\n        },\n      },\n      allgemein: {\n        modules: [],\n        quizzes: [],\n        relevance: 'none',\n        metadata: {\n          id: 'allgemein',\n          name: 'Allgemein',\n          description:\n            'Fachrichtungsübergreifende Inhalte und Grundlagen für beide Spezialisierungen',\n          color: '#6b7280',\n          icon: '📚',\n        },\n      },\n    };\n  }\n\n  /**\n   * Clear categorized content cache\n   * Used when category mappings change or content is updated\n   */\n  clearCategorizedContentCache() {\n    this.categorizedContentCache.clear();\n    this.categoryIndexCache.clear();\n  }\n\n  /**\n   * Build category-based indexes for efficient content retrieval\n   * @private\n   */\n  _buildCategoryIndexes() {\n    if (this.categoryIndexCache.size > 0) {\n      return; // Already built\n    }\n\n    try {\n      // Initialize indexes for each three-tier category\n      const categoryIndexes = {\n        'daten-prozessanalyse': { modules: new Set(), quizzes: new Set() },\n        anwendungsentwicklung: { modules: new Set(), quizzes: new Set() },\n        allgemein: { modules: new Set(), quizzes: new Set() },\n      };\n\n      // Index modules by three-tier category\n      this.modules.forEach((module, moduleId) => {\n        const threeTierCategory = module.threeTierCategory || 'allgemein';\n        if (categoryIndexes[threeTierCategory]) {\n          categoryIndexes[threeTierCategory].modules.add(moduleId);\n        }\n      });\n\n      // Index quizzes by three-tier category\n      this.quizzes.forEach((quiz, quizId) => {\n        const threeTierCategory = quiz.threeTierCategory || 'allgemein';\n        if (categoryIndexes[threeTierCategory]) {\n          categoryIndexes[threeTierCategory].quizzes.add(quizId);\n        }\n      });\n\n      // Store indexes in cache\n      Object.keys(categoryIndexes).forEach(categoryId => {\n        this.categoryIndexCache.set(\n          `modules-${categoryId}`,\n          categoryIndexes[categoryId].modules\n        );\n        this.categoryIndexCache.set(\n          `quizzes-${categoryId}`,\n          categoryIndexes[categoryId].quizzes\n        );\n      });\n\n      // Store combined content indexes\n      Object.keys(categoryIndexes).forEach(categoryId => {\n        const combinedIds = new Set([\n          ...categoryIndexes[categoryId].modules,\n          ...categoryIndexes[categoryId].quizzes,\n        ]);\n        this.categoryIndexCache.set(`content-${categoryId}`, combinedIds);\n      });\n    } catch (error) {\n      console.error('Error building category indexes:', error);\n    }\n  }\n\n  /**\n   * Get content IDs for a specific three-tier category using cached indexes\n   * @private\n   * @param {string} categoryId - Three-tier category ID\n   * @param {string} contentType - 'modules', 'quizzes', or 'content' (both)\n   * @returns {Set} Set of content IDs\n   */\n  _getCategoryContentIds(categoryId, contentType = 'content') {\n    this._buildCategoryIndexes();\n\n    const cacheKey = `${contentType}-${categoryId}`;\n    return this.categoryIndexCache.get(cacheKey) || new Set();\n  }\n\n  /**\n   * Invalidate cache for specific category\n   * @param {string} categoryId - Three-tier category ID to invalidate\n   */\n  invalidateCategoryCache(categoryId) {\n    if (categoryId) {\n      // Remove specific category caches\n      this.categorizedContentCache.delete(`three-tier-${categoryId}`);\n      this.categoryIndexCache.delete(`modules-${categoryId}`);\n      this.categoryIndexCache.delete(`quizzes-${categoryId}`);\n      this.categoryIndexCache.delete(`content-${categoryId}`);\n    } else {\n      // Clear all caches\n      this.clearCategorizedContentCache();\n    }\n  }\n\n  /**\n   * Preload and cache content for all three-tier categories\n   * Optimizes performance for category-based operations\n   */\n  async preloadCategorizedContent() {\n    try {\n      // Ensure all content is loaded\n      await this._loadAllModules();\n      await this._loadAllQuizzes();\n\n      // Build category indexes\n      this._buildCategoryIndexes();\n\n      // Preload content for each category\n      const categories = [\n        'daten-prozessanalyse',\n        'anwendungsentwicklung',\n        'allgemein',\n      ];\n\n      for (const categoryId of categories) {\n        // This will populate the cache\n        await this.getContentByThreeTierCategory(categoryId);\n      }\n\n      console.warn('Categorized content preloaded successfully');\n    } catch (error) {\n      console.error('Error preloading categorized content:', error);\n    }\n  }\n\n  /**\n   * Get cache statistics for monitoring and debugging\n   * @returns {Object} Cache statistics\n   */\n  getCacheStats() {\n    return {\n      modules: {\n        total: this.modules.size,\n        cached: this.modules.size,\n      },\n      quizzes: {\n        total: this.quizzes.size,\n        cached: this.quizzes.size,\n      },\n      categorizedContent: {\n        cacheSize: this.categorizedContentCache.size,\n        cachedCategories: Array.from(this.categorizedContentCache.keys()),\n      },\n      categoryIndexes: {\n        indexCount: this.categoryIndexCache.size,\n        indexes: Array.from(this.categoryIndexCache.keys()),\n      },\n      memoryUsage: {\n        // Rough estimation of memory usage\n        modulesMemory: this._estimateMapMemoryUsage(this.modules),\n        quizzesMemory: this._estimateMapMemoryUsage(this.quizzes),\n        categorizedCacheMemory: this._estimateMapMemoryUsage(\n          this.categorizedContentCache\n        ),\n        indexCacheMemory: this._estimateMapMemoryUsage(this.categoryIndexCache),\n      },\n    };\n  }\n\n  /**\n   * Estimate memory usage of a Map\n   * @private\n   * @param {Map} map - Map to estimate\n   * @returns {string} Memory usage estimate\n   */\n  _estimateMapMemoryUsage(map) {\n    try {\n      const jsonString = JSON.stringify(Array.from(map.entries()));\n      const bytes = new Blob([jsonString]).size;\n\n      if (bytes < 1024) return `${bytes} B`;\n      if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(1)} KB`;\n      return `${(bytes / (1024 * 1024)).toFixed(1)} MB`;\n    } catch (error) {\n      return 'Unknown';\n    }\n  }\n\n  /**\n   * Optimize cache by removing unused entries and rebuilding indexes\n   */\n  optimizeCache() {\n    try {\n      // Clear and rebuild category indexes\n      this.categoryIndexCache.clear();\n      this._buildCategoryIndexes();\n\n      // Remove stale categorized content cache entries\n      const validCacheKeys = [\n        'three-tier-daten-prozessanalyse',\n        'three-tier-anwendungsentwicklung',\n        'three-tier-allgemein',\n      ];\n\n      const currentKeys = Array.from(this.categorizedContentCache.keys());\n      currentKeys.forEach(key => {\n        if (!validCacheKeys.includes(key)) {\n          this.categorizedContentCache.delete(key);\n        }\n      });\n\n      console.warn('Cache optimization completed');\n    } catch (error) {\n      console.error('Error optimizing cache:', error);\n    }\n  }\n\n  // ========================================\n  // THREE-TIER CATEGORY API METHODS\n  // ========================================\n  // These methods provide the new three-tier category functionality\n  // while maintaining backward compatibility with existing interfaces\n\n  /**\n   * Get all available three-tier categories with metadata\n   * @returns {Promise<Array>} Array of three-tier category objects\n   */\n  async getThreeTierCategories() {\n    try {\n      if (!this.categoryMappingService) {\n        console.warn(\n          'CategoryMappingService not available, returning default categories'\n        );\n        return this._getDefaultThreeTierCategories();\n      }\n\n      return this.categoryMappingService.getThreeTierCategories();\n    } catch (error) {\n      console.error('Error getting three-tier categories:', error);\n      return this._getDefaultThreeTierCategories();\n    }\n  }\n\n  /**\n   * Get modules filtered by three-tier category\n   * @param {string} categoryId - Three-tier category ID\n   * @returns {Promise<Array>} Array of modules in the specified category\n   */\n  async getModulesByThreeTierCategory(categoryId) {\n    try {\n      if (!categoryId || typeof categoryId !== 'string') {\n        throw new Error('Invalid three-tier category ID');\n      }\n\n      const validCategories = [\n        'daten-prozessanalyse',\n        'anwendungsentwicklung',\n        'allgemein',\n      ];\n      if (!validCategories.includes(categoryId)) {\n        throw new Error(\n          `Invalid three-tier category: ${categoryId}. Must be one of: ${validCategories.join(', ')}`\n        );\n      }\n\n      // Get all content in category and filter for modules only\n      const categoryContent =\n        await this.getContentByThreeTierCategory(categoryId);\n      const modules = categoryContent.filter(\n        item => item.contentType === 'module' || item.content || item.sections // Modules have content/sections, quizzes have questions\n      );\n\n      return modules;\n    } catch (error) {\n      console.error(\n        `Error getting modules by three-tier category ${categoryId}:`,\n        error\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Get quizzes filtered by three-tier category\n   * @param {string} categoryId - Three-tier category ID\n   * @returns {Promise<Array>} Array of quizzes in the specified category\n   */\n  async getQuizzesByThreeTierCategory(categoryId) {\n    try {\n      if (!categoryId || typeof categoryId !== 'string') {\n        throw new Error('Invalid three-tier category ID');\n      }\n\n      const validCategories = [\n        'daten-prozessanalyse',\n        'anwendungsentwicklung',\n        'allgemein',\n      ];\n      if (!validCategories.includes(categoryId)) {\n        throw new Error(\n          `Invalid three-tier category: ${categoryId}. Must be one of: ${validCategories.join(', ')}`\n        );\n      }\n\n      // Get all content in category and filter for quizzes only\n      const categoryContent =\n        await this.getContentByThreeTierCategory(categoryId);\n      const quizzes = categoryContent.filter(\n        item => item.contentType === 'quiz' || item.questions // Quizzes have questions array\n      );\n\n      return quizzes;\n    } catch (error) {\n      console.error(\n        `Error getting quizzes by three-tier category ${categoryId}:`,\n        error\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Get content statistics for three-tier categories\n   * @param {Object} options - Options for statistics calculation\n   * @returns {Promise<Object>} Comprehensive statistics for three-tier categories\n   */\n  async getThreeTierCategoryStatistics(options = {}) {\n    try {\n      // Delegate to existing comprehensive method\n      return await this.getThreeTierCategoryStats(options);\n    } catch (error) {\n      console.error('Error getting three-tier category statistics:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get category metadata for a specific three-tier category\n   * @param {string} categoryId - Three-tier category ID\n   * @returns {Promise<Object>} Category metadata object\n   */\n  async getThreeTierCategoryMetadata(categoryId) {\n    try {\n      if (!categoryId || typeof categoryId !== 'string') {\n        throw new Error('Invalid three-tier category ID');\n      }\n\n      const validCategories = [\n        'daten-prozessanalyse',\n        'anwendungsentwicklung',\n        'allgemein',\n      ];\n      if (!validCategories.includes(categoryId)) {\n        throw new Error(`Invalid three-tier category: ${categoryId}`);\n      }\n\n      if (!this.categoryMappingService) {\n        console.warn(\n          'CategoryMappingService not available, returning default metadata'\n        );\n        return this._getDefaultCategoryMetadata(categoryId);\n      }\n\n      const categories = this.categoryMappingService.getThreeTierCategories();\n      const category = categories.find(cat => cat.id === categoryId);\n\n      if (!category) {\n        throw new Error(`Category metadata not found for: ${categoryId}`);\n      }\n\n      // Enhance with content statistics\n      const contentStats = await this.getThreeTierCategoryStats({\n        includeSpecializationRelevance: true,\n        includeDifficultyDistribution: true,\n        includeContentTypes: true,\n      });\n\n      return {\n        ...category,\n        statistics: contentStats.categories[categoryId] || null,\n        lastUpdated: new Date().toISOString(),\n      };\n    } catch (error) {\n      console.error(\n        `Error getting three-tier category metadata for ${categoryId}:`,\n        error\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Search content within three-tier categories with advanced filtering\n   * @param {string} query - Search query\n   * @param {Object} options - Search options including category filters\n   * @returns {Promise<Object>} Search results organized by three-tier categories\n   */\n  async searchThreeTierCategories(query, options = {}) {\n    try {\n      const {\n        categories = [\n          'daten-prozessanalyse',\n          'anwendungsentwicklung',\n          'allgemein',\n        ],\n        ...searchOptions\n      } = options;\n\n      // Validate categories\n      const validCategories = [\n        'daten-prozessanalyse',\n        'anwendungsentwicklung',\n        'allgemein',\n      ];\n      const filteredCategories = categories.filter(cat =>\n        validCategories.includes(cat)\n      );\n\n      if (filteredCategories.length === 0) {\n        throw new Error('No valid three-tier categories specified for search');\n      }\n\n      // Use existing enhanced search with category filtering\n      return await this.searchWithCategoryFiltering(query, {\n        categories: filteredCategories,\n        ...searchOptions,\n      });\n    } catch (error) {\n      console.error('Error searching three-tier categories:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get related content across three-tier categories\n   * @param {string} contentId - ID of the content item to find relations for\n   * @param {Object} options - Options for relationship discovery\n   * @returns {Promise<Object>} Related content organized by categories\n   */\n  async getRelatedContentAcrossCategories(contentId, options = {}) {\n    try {\n      if (!contentId || typeof contentId !== 'string') {\n        throw new Error('Invalid content ID');\n      }\n\n      const {\n        maxRelatedPerCategory = 3,\n        includeAllCategories = true,\n        relationshipTypes = ['prerequisite', 'related', 'advanced'],\n      } = options;\n\n      // Get the source content item\n      const sourceModule = this.modules.get(contentId);\n      const sourceQuiz = this.quizzes.get(contentId);\n      const sourceContent = sourceModule || sourceQuiz;\n\n      if (!sourceContent) {\n        throw new Error(`Content not found: ${contentId}`);\n      }\n\n      // Use ContentRelationshipService if available\n      if (this.contentRelationshipService) {\n        return await this.contentRelationshipService.getRelatedContentAcrossCategories(\n          contentId,\n          options\n        );\n      }\n\n      // Fallback implementation\n      console.warn(\n        'ContentRelationshipService not available, using basic relationship detection'\n      );\n\n      const result = {\n        sourceContent: sourceContent,\n        relatedContent: {\n          'daten-prozessanalyse': [],\n          anwendungsentwicklung: [],\n          allgemein: [],\n        },\n        relationshipSummary: {\n          totalRelated: 0,\n          byType: {},\n          byCategory: {},\n        },\n      };\n\n      // Basic relationship detection based on tags and categories\n      const allContent = [\n        ...Array.from(this.modules.values()),\n        ...Array.from(this.quizzes.values()),\n      ];\n\n      const sourceTags = sourceContent.tags || [];\n      const sourceCategory = sourceContent.threeTierCategory || 'allgemein';\n\n      allContent.forEach(item => {\n        if (item.id === contentId) return; // Skip self\n\n        const itemCategory = item.threeTierCategory || 'allgemein';\n        const itemTags = item.tags || [];\n\n        // Calculate relationship score based on tag overlap\n        const commonTags = sourceTags.filter(tag => itemTags.includes(tag));\n        const relationshipScore = commonTags.length;\n\n        if (\n          relationshipScore > 0 &&\n          result.relatedContent[itemCategory].length < maxRelatedPerCategory\n        ) {\n          result.relatedContent[itemCategory].push({\n            ...item,\n            relationshipScore: relationshipScore,\n            relationshipType: 'related',\n            commonTags: commonTags,\n          });\n        }\n      });\n\n      // Sort by relationship score\n      Object.keys(result.relatedContent).forEach(categoryId => {\n        result.relatedContent[categoryId].sort(\n          (a, b) => b.relationshipScore - a.relationshipScore\n        );\n      });\n\n      // Calculate summary statistics\n      Object.keys(result.relatedContent).forEach(categoryId => {\n        const categoryRelated = result.relatedContent[categoryId];\n        result.relationshipSummary.totalRelated += categoryRelated.length;\n        result.relationshipSummary.byCategory[categoryId] =\n          categoryRelated.length;\n      });\n\n      return result;\n    } catch (error) {\n      console.error(`Error getting related content for ${contentId}:`, error);\n      throw error;\n    }\n  }\n\n  // ========================================\n  // BACKWARD COMPATIBILITY METHODS\n  // ========================================\n  // These methods maintain compatibility with existing code while\n  // providing deprecation warnings for methods that will be replaced\n\n  /**\n   * @deprecated Use getModulesByThreeTierCategory() instead\n   * Get modules by legacy category - maintained for backward compatibility\n   */\n  async getModulesByLegacyCategory(categoryId) {\n    console.warn(\n      'getModulesByLegacyCategory() is deprecated. Use getModulesByThreeTierCategory() instead.'\n    );\n\n    try {\n      // Map legacy category to three-tier category if possible\n      if (this.categoryMappingService) {\n        const mappingResult =\n          this.categoryMappingService.mapLegacyCategoryToThreeTier(categoryId);\n        if (mappingResult) {\n          return await this.getModulesByThreeTierCategory(\n            mappingResult.threeTierCategory\n          );\n        }\n      }\n\n      // Fallback to existing method\n      return await this.getModulesByCategory(categoryId);\n    } catch (error) {\n      console.error(\n        `Error in legacy category method for ${categoryId}:`,\n        error\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * @deprecated Use searchThreeTierCategories() instead\n   * Legacy search method - maintained for backward compatibility\n   */\n  async searchContentLegacy(query, filters = {}) {\n    console.warn(\n      'searchContentLegacy() is deprecated. Use searchThreeTierCategories() instead.'\n    );\n\n    try {\n      // Convert legacy filters to new format if possible\n      const newOptions = {};\n\n      if (filters.category) {\n        // Try to map legacy category to three-tier\n        if (this.categoryMappingService) {\n          const mappingResult =\n            this.categoryMappingService.mapLegacyCategoryToThreeTier(\n              filters.category\n            );\n          if (mappingResult) {\n            newOptions.categories = [mappingResult.threeTierCategory];\n          }\n        }\n      }\n\n      // Use new search method if mapping successful, otherwise fallback\n      if (newOptions.categories) {\n        return await this.searchThreeTierCategories(query, newOptions);\n      } else {\n        return await this.searchContent(query, filters);\n      }\n    } catch (error) {\n      console.error('Error in legacy search method:', error);\n      throw error;\n    }\n  }\n\n  // ========================================\n  // PRIVATE HELPER METHODS FOR THREE-TIER CATEGORIES\n  // ========================================\n\n  /**\n   * Get default three-tier categories when CategoryMappingService is not available\n   * @private\n   * @returns {Array} Default three-tier categories\n   */\n  _getDefaultThreeTierCategories() {\n    return [\n      {\n        id: 'daten-prozessanalyse',\n        name: 'Daten und Prozessanalyse',\n        description: 'Inhalte mit hoher Relevanz für die DPA-Spezialisierung',\n        color: '#2563eb',\n        icon: 'database',\n      },\n      {\n        id: 'anwendungsentwicklung',\n        name: 'Anwendungsentwicklung',\n        description: 'Inhalte mit hoher Relevanz für die AE-Spezialisierung',\n        color: '#dc2626',\n        icon: 'code',\n      },\n      {\n        id: 'allgemein',\n        name: 'Allgemein',\n        description: 'Allgemeine IT-Inhalte für beide Spezialisierungen',\n        color: '#059669',\n        icon: 'book',\n      },\n    ];\n  }\n\n  /**\n   * Get default category metadata when CategoryMappingService is not available\n   * @private\n   * @param {string} categoryId - Category ID\n   * @returns {Object} Default category metadata\n   */\n  _getDefaultCategoryMetadata(categoryId) {\n    const defaultCategories = this._getDefaultThreeTierCategories();\n    const category = defaultCategories.find(cat => cat.id === categoryId);\n\n    return (\n      category || {\n        id: categoryId,\n        name: categoryId,\n        description: 'Category metadata not available',\n        color: '#6b7280',\n        icon: 'folder',\n      }\n    );\n  }\n\n  /**\n   * Get content by three-tier category with performance optimization\n   * @param {string} categoryId - Three-tier category ID\n   * @param {Object} options - Filtering and pagination options\n   * @returns {Promise<Array>} Filtered content items\n   */\n  async getContentByThreeTierCategoryOptimized(categoryId, options = {}) {\n    const startTime = performance.now();\n\n    try {\n      // Use performance optimization service if available\n      if (this.performanceOptimizationService) {\n        const result =\n          await this.performanceOptimizationService.getContentByThreeTierCategory(\n            categoryId,\n            options\n          );\n\n        // Record performance metrics\n        if (this.performanceMonitoringService) {\n          this.performanceMonitoringService.recordMetric('categoryFilter', {\n            duration: performance.now() - startTime,\n            parameters: { categoryId, ...options },\n            resultCount: result.length,\n            cacheHit: true, // Optimization service uses caching\n          });\n        }\n\n        return result;\n      }\n\n      // Fallback to original implementation\n      return this.getContentByThreeTierCategory(categoryId, options);\n    } catch (error) {\n      // Record error metrics\n      if (this.performanceMonitoringService) {\n        this.performanceMonitoringService.recordMetric('categoryFilter', {\n          duration: performance.now() - startTime,\n          parameters: { categoryId, ...options },\n          resultCount: 0,\n          error: true,\n          errorMessage: error.message,\n        });\n      }\n\n      console.error('Error in optimized category filtering:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Search within specific three-tier category with performance optimization\n   * @param {string} query - Search query\n   * @param {string} categoryId - Three-tier category ID\n   * @param {Object} options - Search options\n   * @returns {Promise<Array>} Search results\n   */\n  async searchInCategoryOptimized(query, categoryId, options = {}) {\n    const startTime = performance.now();\n\n    try {\n      // Use performance optimization service if available\n      if (this.performanceOptimizationService) {\n        const result =\n          await this.performanceOptimizationService.searchInCategory(\n            query,\n            categoryId,\n            options\n          );\n\n        // Record performance metrics\n        if (this.performanceMonitoringService) {\n          this.performanceMonitoringService.recordMetric('categorySearch', {\n            duration: performance.now() - startTime,\n            parameters: {\n              query: query?.substring(0, 50),\n              categoryId,\n              ...options,\n            },\n            resultCount: result.length,\n            cacheHit: true, // Optimization service uses caching\n          });\n        }\n\n        return result;\n      }\n\n      // Fallback to original implementation\n      return this.searchInCategory(query, categoryId, options);\n    } catch (error) {\n      // Record error metrics\n      if (this.performanceMonitoringService) {\n        this.performanceMonitoringService.recordMetric('categorySearch', {\n          duration: performance.now() - startTime,\n          parameters: {\n            query: query?.substring(0, 50),\n            categoryId,\n            ...options,\n          },\n          resultCount: 0,\n          error: true,\n          errorMessage: error.message,\n        });\n      }\n\n      console.error('Error in optimized category search:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get performance metrics for category operations\n   * @returns {Object} Performance metrics and dashboard data\n   */\n  getPerformanceMetrics() {\n    if (this.performanceMonitoringService) {\n      return this.performanceMonitoringService.getDashboardData();\n    }\n\n    return {\n      message: 'Performance monitoring not available',\n      optimizationService: !!this.performanceOptimizationService,\n      monitoringService: !!this.performanceMonitoringService,\n    };\n  }\n\n  /**\n   * Get detailed performance report\n   * @param {Object} options - Report options\n   * @returns {Object} Detailed performance report\n   */\n  getPerformanceReport(options = {}) {\n    if (this.performanceMonitoringService) {\n      return this.performanceMonitoringService.getPerformanceReport(options);\n    }\n\n    return {\n      message: 'Performance monitoring not available',\n      generatedAt: Date.now(),\n      options,\n    };\n  }\n\n  /**\n   * Invalidate performance caches and rebuild indexes\n   */\n  async invalidatePerformanceCache() {\n    if (this.performanceOptimizationService) {\n      await this.performanceOptimizationService.invalidateCache();\n    }\n\n    // Also clear local caches\n    this.clearCategorizedContentCache();\n  }\n\n  /**\n   * Configure performance optimization settings\n   * @param {Object} config - Configuration options\n   */\n  configurePerformanceOptimization(config) {\n    if (this.performanceOptimizationService) {\n      this.performanceOptimizationService.configure(config);\n    }\n\n    if (this.performanceMonitoringService && config.monitoring) {\n      this.performanceMonitoringService.configureMonitoring(config.monitoring);\n    }\n\n    if (config.thresholds && this.performanceMonitoringService) {\n      this.performanceMonitoringService.updateThresholds(config.thresholds);\n    }\n  }\n}\n\nexport default IHKContentService;\n","import modulesData from '../data/modules.json';\n\nimport StorageService from './StorageService.js';\n\n/**\n * ModuleService - Manages learning module data and operations\n * Now includes both regular and IHK modules with specialization filtering support\n */\nclass ModuleService {\n  constructor(\n    stateManager,\n    storageService,\n    ihkContentService,\n    specializationService\n  ) {\n    this.stateManager = stateManager;\n    this.storage = storageService || new StorageService();\n    this.ihkContentService = ihkContentService;\n    this.specializationService = specializationService;\n    this.modules = modulesData;\n    this.ihkModulesLoaded = false;\n  }\n\n  /**\n   * Get all modules (IHK modules only - the actual content you want)\n   */\n  async getModules() {\n    try {\n      // Get IHK modules - this is your actual content\n      let ihkModules = [];\n      if (this.ihkContentService) {\n        try {\n          ihkModules = await this.ihkContentService.searchContent('', {});\n\n          // Add debugging to identify problematic modules\n          console.warn('Raw IHK modules loaded:', ihkModules.length);\n\n          ihkModules = ihkModules.map((module, index) => {\n            // Check for undefined properties\n            if (!module.title || !module.description) {\n              console.warn(\n                `Module at index ${index} has undefined properties:`,\n                {\n                  id: module.id,\n                  title: module.title,\n                  description: module.description,\n                  module: module,\n                }\n              );\n            }\n\n            return {\n              ...module,\n              source: 'ihk',\n              // Map IHK fields to regular module fields for consistency\n              duration: module.estimatedTime || module.estimatedDuration || 30,\n            };\n          });\n\n          // Filter out any modules with missing essential properties\n          const validModules = ihkModules.filter(\n            module => module && module.id && module.title && module.description\n          );\n\n          if (validModules.length !== ihkModules.length) {\n            console.warn(\n              `Filtered out ${ihkModules.length - validModules.length} invalid modules`\n            );\n          }\n\n          console.warn(\n            'Valid IHK modules after filtering:',\n            validModules.length\n          );\n          return validModules;\n        } catch (error) {\n          console.error('Could not load IHK modules:', error);\n          throw error;\n        }\n      }\n\n      // Return only IHK modules (your actual content)\n      return ihkModules;\n    } catch (error) {\n      console.error('Error getting modules:', error);\n      throw new Error('Failed to load modules');\n    }\n  }\n\n  /**\n   * Get module by ID with error handling (IHK modules only)\n   */\n  async getModuleById(id) {\n    try {\n      if (!id || typeof id !== 'string') {\n        throw new Error('Invalid module ID');\n      }\n\n      // Get from IHK modules (your actual content)\n      let module = null;\n      if (this.ihkContentService) {\n        try {\n          module = await this.ihkContentService.getModuleById(id);\n        } catch (error) {\n          console.error('Module not found in IHK content:', error);\n        }\n      }\n\n      if (!module) {\n        throw new Error(`Module with ID \"${id}\" not found`);\n      }\n\n      // Get progress data\n      const progress = this.stateManager.getState('progress') || {};\n      const modulesCompleted = progress.modulesCompleted || [];\n      const modulesInProgress = progress.modulesInProgress || [];\n\n      // Update last accessed time\n      const updatedModule = {\n        ...module,\n        completed: modulesCompleted.includes(module.id),\n        inProgress: modulesInProgress.includes(module.id),\n        lastAccessed: new Date().toISOString(),\n        source: 'ihk',\n        duration: module.estimatedDuration || 30,\n      };\n\n      // Mark as in progress if not completed\n      if (!modulesCompleted.includes(id) && !modulesInProgress.includes(id)) {\n        this._markModuleInProgress(id);\n      }\n\n      return updatedModule;\n    } catch (error) {\n      console.error(`Error getting module ${id}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Mark module as in progress (internal helper)\n   */\n  _markModuleInProgress(moduleId) {\n    const progress = this.stateManager.getState('progress') || {};\n    const modulesInProgress = progress.modulesInProgress || [];\n\n    if (!modulesInProgress.includes(moduleId)) {\n      this.stateManager.setState('progress.modulesInProgress', [\n        ...modulesInProgress,\n        moduleId,\n      ]);\n    }\n  }\n\n  /**\n   * Mark module as complete and update progress\n   */\n  async markModuleComplete(id) {\n    try {\n      if (!id || typeof id !== 'string') {\n        throw new Error('Invalid module ID');\n      }\n\n      // Verify module exists\n      const module = this.modules.find(m => m.id === id);\n      if (!module) {\n        throw new Error(`Module with ID \"${id}\" not found`);\n      }\n\n      const progress = this.stateManager.getState('progress') || {};\n      const modulesCompleted = progress.modulesCompleted || [];\n      const modulesInProgress = progress.modulesInProgress || [];\n\n      // Add to completed if not already there\n      if (!modulesCompleted.includes(id)) {\n        this.stateManager.setState('progress.modulesCompleted', [\n          ...modulesCompleted,\n          id,\n        ]);\n      }\n\n      // Remove from in progress\n      if (modulesInProgress.includes(id)) {\n        this.stateManager.setState(\n          'progress.modulesInProgress',\n          modulesInProgress.filter(moduleId => moduleId !== id)\n        );\n      }\n\n      // Update last activity\n      this.stateManager.setState(\n        'progress.lastActivity',\n        new Date().toISOString()\n      );\n\n      return true;\n    } catch (error) {\n      console.error(`Error marking module ${id} as complete:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get module progress\n   */\n  async getModuleProgress(id) {\n    try {\n      if (!id || typeof id !== 'string') {\n        throw new Error('Invalid module ID');\n      }\n\n      // Verify module exists\n      const module = this.modules.find(m => m.id === id);\n      if (!module) {\n        throw new Error(`Module with ID \"${id}\" not found`);\n      }\n\n      const progress = this.stateManager.getState('progress') || {};\n      const modulesCompleted = progress.modulesCompleted || [];\n      const modulesInProgress = progress.modulesInProgress || [];\n\n      return {\n        moduleId: id,\n        completed: modulesCompleted.includes(id),\n        inProgress: modulesInProgress.includes(id),\n        status: modulesCompleted.includes(id)\n          ? 'completed'\n          : modulesInProgress.includes(id)\n            ? 'in-progress'\n            : 'not-started',\n      };\n    } catch (error) {\n      console.error(`Error getting progress for module ${id}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get modules filtered by specialization\n   * @param {string} specializationId - The specialization ID to filter for\n   * @param {Object} options - Filtering options\n   * @param {string} options.minRelevance - Minimum relevance level ('high', 'medium', 'low')\n   * @param {boolean} options.includeGeneral - Whether to include general content\n   * @returns {Promise<Array>} Filtered modules array\n   */\n  async getModulesBySpecialization(specializationId, options = {}) {\n    try {\n      if (!specializationId || typeof specializationId !== 'string') {\n        throw new Error('Invalid specialization ID');\n      }\n\n      // Get all modules first\n      const allModules = await this.getModules();\n\n      // If no specialization service available, return all modules\n      if (!this.specializationService) {\n        console.warn(\n          'SpecializationService not available, returning all modules'\n        );\n        return allModules;\n      }\n\n      // Filter modules by specialization\n      const filteredModules =\n        this.specializationService.filterContentBySpecialization(\n          allModules,\n          specializationId,\n          {\n            minRelevance: options.minRelevance || 'low',\n            includeGeneral: options.includeGeneral !== false, // default to true\n          }\n        );\n\n      return filteredModules;\n    } catch (error) {\n      console.error(\n        `Error getting modules by specialization ${specializationId}:`,\n        error\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Get modules organized by category for a specific specialization\n   * @param {string} specializationId - The specialization ID\n   * @returns {Promise<Object>} Object with categories as keys and module arrays as values\n   */\n  async getCategorizedModules(specializationId) {\n    try {\n      if (!specializationId || typeof specializationId !== 'string') {\n        throw new Error('Invalid specialization ID');\n      }\n\n      // Get all modules\n      const allModules = await this.getModules();\n\n      // If no specialization service available, return modules under 'all' category\n      if (!this.specializationService) {\n        console.warn(\n          'SpecializationService not available, returning uncategorized modules'\n        );\n        return { all: allModules };\n      }\n\n      // Get content categories for this specialization\n      const categories =\n        this.specializationService.getContentCategories(specializationId);\n      const categorizedModules = {};\n\n      // Initialize categories\n      categories.forEach(category => {\n        categorizedModules[category.id] = [];\n      });\n\n      // Add an 'all' category for convenience\n      categorizedModules.all = allModules;\n\n      // Categorize modules\n      allModules.forEach(module => {\n        const categoryId = module.category || module.categoryId;\n\n        if (categoryId) {\n          // Get relevance for this category and specialization\n          const relevance = this.specializationService.getCategoryRelevance(\n            categoryId,\n            specializationId\n          );\n\n          // Add to appropriate category based on relevance\n          if (relevance === 'high' || relevance === 'medium') {\n            // Find the category this module belongs to\n            const category = categories.find(cat => cat.id === categoryId);\n            if (category) {\n              categorizedModules[category.id].push(module);\n            } else {\n              // Check if it's general content\n              if (this._isGeneralContent(categoryId)) {\n                if (!categorizedModules.general) {\n                  categorizedModules.general = [];\n                }\n                categorizedModules.general.push(module);\n              }\n            }\n          }\n        } else {\n          // Module without category - add to general if it exists\n          if (categorizedModules.general) {\n            categorizedModules.general.push(module);\n          }\n        }\n      });\n\n      return categorizedModules;\n    } catch (error) {\n      console.error(\n        `Error getting categorized modules for specialization ${specializationId}:`,\n        error\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Get modules by category for a specific specialization\n   * @param {string} categoryId - The category ID to filter by\n   * @param {string} specializationId - The specialization ID\n   * @returns {Promise<Array>} Modules in the specified category\n   */\n  async getModulesByCategory(categoryId, specializationId) {\n    try {\n      if (!categoryId || typeof categoryId !== 'string') {\n        throw new Error('Invalid category ID');\n      }\n\n      if (!specializationId || typeof specializationId !== 'string') {\n        throw new Error('Invalid specialization ID');\n      }\n\n      // Get all modules\n      const allModules = await this.getModules();\n\n      // Filter modules by category\n      const categoryModules = allModules.filter(module => {\n        const moduleCategoryId = module.category || module.categoryId;\n        return moduleCategoryId === categoryId;\n      });\n\n      // If no specialization service available, return category modules as-is\n      if (!this.specializationService) {\n        console.warn(\n          'SpecializationService not available, returning unfiltered category modules'\n        );\n        return categoryModules;\n      }\n\n      // Further filter by specialization relevance\n      const filteredModules =\n        this.specializationService.filterContentBySpecialization(\n          categoryModules,\n          specializationId,\n          {\n            minRelevance: 'low',\n            includeGeneral: true,\n          }\n        );\n\n      return filteredModules;\n    } catch (error) {\n      console.error(\n        `Error getting modules by category ${categoryId} for specialization ${specializationId}:`,\n        error\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Check if content is general (applies to all specializations)\n   * @private\n   * @param {string} categoryId - The category ID to check\n   * @returns {boolean} True if content is general\n   */\n  _isGeneralContent(categoryId) {\n    if (!this.specializationService) {\n      return false;\n    }\n\n    // Delegate to SpecializationService\n    return this.specializationService._isGeneralContent(categoryId);\n  }\n\n  /**\n   * Get current user's specialization-filtered modules\n   * Convenience method that uses the current user's specialization\n   * @param {Object} options - Filtering options\n   * @returns {Promise<Array>} Filtered modules for current specialization\n   */\n  async getCurrentSpecializationModules(options = {}) {\n    try {\n      if (!this.specializationService) {\n        console.warn(\n          'SpecializationService not available, returning all modules'\n        );\n        return await this.getModules();\n      }\n\n      const currentSpecialization =\n        this.specializationService.getCurrentSpecialization();\n\n      if (!currentSpecialization) {\n        // No specialization selected, return all modules\n        return await this.getModules();\n      }\n\n      return await this.getModulesBySpecialization(\n        currentSpecialization,\n        options\n      );\n    } catch (error) {\n      console.error('Error getting current specialization modules:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get module statistics by specialization\n   * @param {string} specializationId - The specialization ID\n   * @returns {Promise<Object>} Statistics object with counts by category and relevance\n   */\n  async getModuleStatistics(specializationId) {\n    try {\n      if (!specializationId || typeof specializationId !== 'string') {\n        throw new Error('Invalid specialization ID');\n      }\n\n      const allModules = await this.getModules();\n      const stats = {\n        total: allModules.length,\n        byRelevance: {\n          high: 0,\n          medium: 0,\n          low: 0,\n          none: 0,\n        },\n        byCategory: {},\n        specialization: specializationId,\n      };\n\n      if (!this.specializationService) {\n        console.warn(\n          'SpecializationService not available, returning basic statistics'\n        );\n        return stats;\n      }\n\n      // Calculate statistics\n      allModules.forEach(module => {\n        const categoryId = module.category || module.categoryId;\n\n        if (categoryId) {\n          const relevance = this.specializationService.getCategoryRelevance(\n            categoryId,\n            specializationId\n          );\n\n          // Count by relevance\n          if (stats.byRelevance[relevance] !== undefined) {\n            stats.byRelevance[relevance]++;\n          }\n\n          // Count by category\n          if (!stats.byCategory[categoryId]) {\n            stats.byCategory[categoryId] = {\n              count: 0,\n              relevance: relevance,\n            };\n          }\n          stats.byCategory[categoryId].count++;\n        } else {\n          // Module without category\n          stats.byRelevance.none++;\n        }\n      });\n\n      return stats;\n    } catch (error) {\n      console.error(\n        `Error getting module statistics for specialization ${specializationId}:`,\n        error\n      );\n      throw error;\n    }\n  }\n}\n\nexport default ModuleService;\n","/**\n * Application-wide constants\n * Centralized location for magic numbers and strings\n */\n\n// HTTP Status Codes\nexport const HTTP_STATUS = {\n  NOT_FOUND: 404,\n};\n\n// Exam and Quiz Constants\nexport const EXAM = {\n  YEAR_2025: 2025,\n  PASSING_SCORE_PERCENTAGE: 70,\n  GOOD_SCORE_PERCENTAGE: 85,\n  EXCELLENT_SCORE_PERCENTAGE: 90,\n};\n\n// Progress Weights\nexport const PROGRESS_WEIGHTS = {\n  MODULE_COMPLETION: 0.7,\n  QUIZ_AVERAGE: 0.3,\n};\n\n// Time Constants (in milliseconds)\nexport const TIME = {\n  ONE_SECOND: 1000,\n  TWO_SECONDS: 2000,\n  THREE_SECONDS: 3000,\n  FIVE_SECONDS: 5000,\n  SEVEN_SECONDS: 7000,\n  TEN_SECONDS: 10000,\n};\n\n// Time Constants (in minutes/hours)\nexport const DURATION = {\n  MINUTES_PER_HOUR: 60,\n  HOURS_PER_DAY: 24,\n  MONTHS_PER_YEAR: 12,\n};\n\n// UI Constants\nexport const UI = {\n  DEBOUNCE_DELAY_MS: 300,\n  ANIMATION_DURATION_MS: 300,\n  SEARCH_MIN_RESULTS: 20,\n  PROGRESS_BAR_SEGMENTS: 50,\n};\n\n// Difficulty Thresholds\nexport const DIFFICULTY = {\n  EASY_MAX_PERCENTAGE: 40,\n  MEDIUM_MAX_PERCENTAGE: 60,\n  HARD_MAX_PERCENTAGE: 80,\n};\n\n// Module Durations (in minutes)\nexport const MODULE_DURATION = {\n  SHORT: 20,\n  MEDIUM: 30,\n  LONG: 120,\n};\n\n// Retry Configuration\nexport const RETRY = {\n  MAX_ATTEMPTS: 3,\n  INITIAL_DELAY_MS: 1000,\n  BACKOFF_MULTIPLIER: 2,\n};\n\n// Storage Keys\nexport const STORAGE_KEYS = {\n  THEME: 'theme',\n  PROGRESS: 'progress',\n  EXAM_PROGRESS: 'exam-progress',\n  IHK_CONTENT: 'ihk-content',\n  IHK_CONTENT_FILTERS: 'ihk-content-filters',\n};\n\n// Theme Values\nexport const THEME = {\n  LIGHT: 'light',\n  DARK: 'dark',\n};\n\n// Progress Status\nexport const PROGRESS_STATUS = {\n  NOT_STARTED: 'not-started',\n  IN_PROGRESS: 'in-progress',\n  COMPLETED: 'completed',\n};\n\n// Question Types\nexport const QUESTION_TYPES = {\n  SINGLE_CHOICE: 'single-choice',\n  MULTIPLE_CHOICE: 'multiple-choice',\n  TRUE_FALSE: 'true-false',\n};\n\n// Difficulty Levels\nexport const DIFFICULTY_LEVELS = {\n  BEGINNER: 'beginner',\n  INTERMEDIATE: 'intermediate',\n  ADVANCED: 'advanced',\n};\n\n// Priority Levels\nexport const PRIORITY_LEVELS = {\n  LOW: 'low',\n  MEDIUM: 'medium',\n  HIGH: 'high',\n};\n\n// ARIA Roles\nexport const ARIA_ROLES = {\n  MAIN: 'main',\n  NAVIGATION: 'navigation',\n  ALERT: 'alert',\n  STATUS: 'status',\n  SEARCH: 'search',\n  REGION: 'region',\n};\n\n// CSS Class Names\nexport const CSS_CLASSES = {\n  MAIN_CONTENT: 'main-content',\n  LOADING_SPINNER: 'loading-spinner',\n  ERROR_BOUNDARY: 'error-boundary',\n  LIVE_REGION: 'live-region',\n};\n\n// Error Messages\nexport const ERROR_MESSAGES = {\n  INVALID_MODULE_ID: 'Invalid module ID',\n  INVALID_QUIZ_ID: 'Invalid quiz ID',\n  STORAGE_QUOTA_EXCEEDED: 'Storage quota exceeded. Unable to save data.',\n  FAILED_TO_LOAD_MODULES: 'Failed to load modules',\n  FAILED_TO_CALCULATE_PROGRESS: 'Failed to calculate overall progress',\n};\n\n// Success Messages\nexport const SUCCESS_MESSAGES = {\n  APPLICATION_LOADED: 'Application loaded successfully',\n};\n\n// Color Codes (CSS Custom Properties)\nexport const COLORS = {\n  SUCCESS_GREEN: 'var(--color-success)',\n  INFO_BLUE: 'var(--color-primary)',\n  WARNING_YELLOW: 'var(--color-warning)',\n  DANGER_RED: 'var(--color-error)',\n};\n\n// Date Format Options\nexport const DATE_FORMAT = {\n  NUMERIC: 'numeric',\n  LONG: 'long',\n  SHORT: 'short',\n  LOCALE_DE: 'de-DE',\n};\n\n// File Extensions\nexport const FILE_EXTENSIONS = {\n  JSON: '.json',\n};\n\n// Module ID Prefixes\nexport const MODULE_PREFIXES = {\n  FUE: 'FÜ',\n  BP: 'BP',\n};\n\n// Category IDs\nexport const CATEGORY_IDS = {\n  ALL: 'all',\n};\n\nexport default {\n  HTTP_STATUS,\n  EXAM,\n  PROGRESS_WEIGHTS,\n  TIME,\n  DURATION,\n  UI,\n  DIFFICULTY,\n  MODULE_DURATION,\n  RETRY,\n  STORAGE_KEYS,\n  THEME,\n  PROGRESS_STATUS,\n  QUESTION_TYPES,\n  DIFFICULTY_LEVELS,\n  PRIORITY_LEVELS,\n  ARIA_ROLES,\n  CSS_CLASSES,\n  ERROR_MESSAGES,\n  SUCCESS_MESSAGES,\n  COLORS,\n  DATE_FORMAT,\n  FILE_EXTENSIONS,\n  MODULE_PREFIXES,\n  CATEGORY_IDS,\n};\n","/* global URL */\nimport modulesData from '../data/modules.json';\n\nimport StorageService from './StorageService.js';\nimport { EXAM, PROGRESS_WEIGHTS, PROGRESS_STATUS } from '../utils/constants.js';\n\n/**\n * ProgressService - Tracks and calculates user progress with specialization support\n */\nclass ProgressService {\n  constructor(\n    stateManager,\n    storageService,\n    moduleService,\n    quizService,\n    specializationService\n  ) {\n    this.stateManager = stateManager;\n    this.storage = storageService || new StorageService();\n    this.moduleService = moduleService;\n    this.quizService = quizService;\n    this.specializationService = specializationService;\n    this.totalModules = modulesData.length; // Fallback for legacy compatibility\n  }\n\n  /**\n   * Get overall progress percentage with specialization awareness\n   */\n  async getOverallProgress(specializationId = null) {\n    try {\n      const currentSpecialization =\n        specializationId ||\n        (this.specializationService\n          ? this.specializationService.getCurrentSpecialization()\n          : null);\n\n      const progress = this.stateManager.getState('progress') || {};\n      const modulesCompleted = progress.modulesCompleted || [];\n      const quizAttempts = progress.quizAttempts || [];\n\n      // Get actual total counts from services\n      let totalModules = this.totalModules; // Fallback\n      let totalQuizzes = 0;\n      let relevantModules = [];\n      let relevantQuizzes = [];\n\n      try {\n        if (this.moduleService) {\n          const modules = await this.moduleService.getModules();\n          totalModules = modules.length;\n\n          // Filter modules by specialization if available\n          if (currentSpecialization && this.specializationService) {\n            relevantModules =\n              this.specializationService.filterContentBySpecialization(\n                modules,\n                currentSpecialization,\n                { minRelevance: 'low', includeGeneral: true }\n              );\n          } else {\n            relevantModules = modules;\n          }\n        }\n      } catch (error) {\n        console.warn('Could not get module count, using fallback:', error);\n      }\n\n      try {\n        if (this.quizService) {\n          const quizzes = await this.quizService.getQuizzes();\n          totalQuizzes = quizzes.length;\n\n          // Filter quizzes by specialization if available\n          if (currentSpecialization && this.specializationService) {\n            relevantQuizzes =\n              this.specializationService.filterContentBySpecialization(\n                quizzes,\n                currentSpecialization,\n                { minRelevance: 'low', includeGeneral: true }\n              );\n          } else {\n            relevantQuizzes = quizzes;\n          }\n        }\n      } catch (error) {\n        console.warn('Could not get quiz count:', error);\n      }\n\n      // Filter completed modules and quiz attempts by relevance\n      const relevantModuleIds = relevantModules.map(m => m.id);\n      const relevantQuizIds = relevantQuizzes.map(q => q.id);\n\n      const relevantCompletedModules = modulesCompleted.filter(id =>\n        relevantModuleIds.includes(id)\n      );\n\n      const relevantQuizAttempts = quizAttempts.filter(attempt =>\n        relevantQuizIds.includes(attempt.quizId)\n      );\n\n      // Calculate module completion percentage\n      const moduleCompletionPercentage =\n        relevantModules.length > 0\n          ? Math.round(\n              (relevantCompletedModules.length / relevantModules.length) * 100\n            )\n          : 0;\n\n      // Calculate average quiz score\n      let averageQuizScore = 0;\n      if (relevantQuizAttempts.length > 0) {\n        const totalScore = relevantQuizAttempts.reduce(\n          (sum, attempt) => sum + attempt.score,\n          0\n        );\n        averageQuizScore = Math.round(totalScore / relevantQuizAttempts.length);\n      }\n\n      // Overall progress is weighted: 70% modules, 30% quizzes\n      const overallPercentage = Math.round(\n        moduleCompletionPercentage * PROGRESS_WEIGHTS.MODULE_COMPLETION +\n          averageQuizScore * PROGRESS_WEIGHTS.QUIZ_AVERAGE\n      );\n\n      return {\n        overallPercentage,\n        modulesCompleted: relevantCompletedModules.length,\n        totalModules: relevantModules.length,\n        totalQuizzes: relevantQuizzes.length,\n        moduleCompletionPercentage,\n        quizzesTaken: relevantQuizAttempts.length,\n        averageQuizScore,\n        lastActivity: progress.lastActivity || null,\n        specialization: currentSpecialization,\n        // Additional specialization-specific stats\n        categoryBreakdown: this._getCategoryBreakdown(\n          relevantCompletedModules,\n          relevantQuizAttempts,\n          currentSpecialization\n        ),\n      };\n    } catch (error) {\n      console.error('Error getting overall progress:', error);\n      throw new Error('Failed to calculate overall progress');\n    }\n  }\n\n  /**\n   * Get progress for individual module\n   */\n  getModuleProgress(moduleId) {\n    try {\n      if (!moduleId || typeof moduleId !== 'string') {\n        throw new Error('Invalid module ID');\n      }\n\n      const progress = this.stateManager.getState('progress') || {};\n      const modulesCompleted = progress.modulesCompleted || [];\n      const modulesInProgress = progress.modulesInProgress || [];\n\n      const isCompleted = modulesCompleted.includes(moduleId);\n      const isInProgress = modulesInProgress.includes(moduleId);\n\n      return {\n        moduleId,\n        completed: isCompleted,\n        inProgress: isInProgress,\n        status: isCompleted\n          ? PROGRESS_STATUS.COMPLETED\n          : isInProgress\n            ? PROGRESS_STATUS.IN_PROGRESS\n            : PROGRESS_STATUS.NOT_STARTED,\n      };\n    } catch (error) {\n      console.error(`Error getting module progress for ${moduleId}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get quiz history with past attempts\n   */\n  getQuizHistory() {\n    try {\n      const progress = this.stateManager.getState('progress') || {};\n      const quizAttempts = progress.quizAttempts || [];\n\n      // Sort by date (most recent first)\n      const sortedAttempts = [...quizAttempts].sort(\n        (a, b) => new Date(b.date) - new Date(a.date)\n      );\n\n      return sortedAttempts.map(attempt => ({\n        quizId: attempt.quizId,\n        score: attempt.score,\n        totalQuestions: attempt.totalQuestions,\n        correctAnswers: attempt.correctAnswers,\n        date: attempt.date,\n        passed: attempt.score >= EXAM.PASSING_SCORE_PERCENTAGE,\n      }));\n    } catch (error) {\n      console.error('Error getting quiz history:', error);\n      throw new Error('Failed to retrieve quiz history');\n    }\n  }\n\n  /**\n   * Update progress for all activity types\n   */\n  updateProgress(type, id, data) {\n    try {\n      if (!type || !id) {\n        throw new Error('Invalid parameters: type and id are required');\n      }\n\n      const progress = this.stateManager.getState('progress') || {};\n\n      switch (type) {\n        case 'module-complete':\n          {\n            const modulesCompleted = progress.modulesCompleted || [];\n            const modulesInProgress = progress.modulesInProgress || [];\n\n            // Add to completed\n            if (!modulesCompleted.includes(id)) {\n              this.stateManager.setState('progress.modulesCompleted', [\n                ...modulesCompleted,\n                id,\n              ]);\n            }\n\n            // Remove from in progress\n            if (modulesInProgress.includes(id)) {\n              this.stateManager.setState(\n                'progress.modulesInProgress',\n                modulesInProgress.filter(moduleId => moduleId !== id)\n              );\n            }\n          }\n          break;\n\n        case 'module-start':\n          {\n            const modulesCompleted = progress.modulesCompleted || [];\n            const modulesInProgress = progress.modulesInProgress || [];\n\n            // Add to in progress if not completed\n            if (\n              !modulesCompleted.includes(id) &&\n              !modulesInProgress.includes(id)\n            ) {\n              this.stateManager.setState('progress.modulesInProgress', [\n                ...modulesInProgress,\n                id,\n              ]);\n            }\n          }\n          break;\n\n        case 'quiz-complete':\n          {\n            if (!data || !data.score || !data.answers) {\n              throw new Error(\n                'Quiz completion requires score and answers data'\n              );\n            }\n\n            const quizAttempts = progress.quizAttempts || [];\n            const attempt = {\n              quizId: id,\n              score: data.score,\n              totalQuestions: data.totalQuestions || data.answers.length,\n              correctAnswers: data.correctAnswers || 0,\n              date: new Date().toISOString(),\n              answers: data.answers,\n            };\n\n            this.stateManager.setState('progress.quizAttempts', [\n              ...quizAttempts,\n              attempt,\n            ]);\n          }\n          break;\n\n        default:\n          throw new Error(`Unknown progress type: ${type}`);\n      }\n\n      // Update last activity timestamp\n      this.stateManager.setState(\n        'progress.lastActivity',\n        new Date().toISOString()\n      );\n\n      return true;\n    } catch (error) {\n      console.error(`Error updating progress for ${type} ${id}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get category breakdown for progress analysis\n   * @private\n   * @param {Array} completedModules - Array of completed module IDs\n   * @param {Array} quizAttempts - Array of quiz attempts\n   * @param {string} specializationId - Current specialization ID\n   * @returns {Object} Category breakdown object\n   */\n  _getCategoryBreakdown(completedModules, quizAttempts, specializationId) {\n    if (!this.specializationService || !specializationId) {\n      return {};\n    }\n\n    try {\n      const categories =\n        this.specializationService.getContentCategories(specializationId);\n      const breakdown = {};\n\n      categories.forEach(category => {\n        // Count modules in this category\n        const categoryModules = completedModules.filter(moduleId => {\n          return this._isModuleInCategory(moduleId, category.id);\n        });\n\n        // Count quizzes in this category\n        const categoryQuizzes = quizAttempts.filter(attempt => {\n          return this._isQuizInCategory(attempt.quizId, category.id);\n        });\n\n        breakdown[category.id] = {\n          name: category.name,\n          modulesCompleted: categoryModules.length,\n          quizzesTaken: categoryQuizzes.length,\n          averageQuizScore:\n            categoryQuizzes.length > 0\n              ? Math.round(\n                  categoryQuizzes.reduce(\n                    (sum, attempt) => sum + attempt.score,\n                    0\n                  ) / categoryQuizzes.length\n                )\n              : 0,\n          relevance: category.relevance,\n        };\n      });\n\n      return breakdown;\n    } catch (error) {\n      console.error('Error calculating category breakdown:', error);\n      return {};\n    }\n  }\n\n  /**\n   * Check if module belongs to a specific category\n   * @private\n   * @param {string} moduleId - Module ID\n   * @param {string} categoryId - Category ID\n   * @returns {boolean} True if module belongs to category\n   */\n  _isModuleInCategory(moduleId, categoryId) {\n    // Simple heuristic based on module ID patterns\n    if (categoryId === 'general') {\n      return (\n        moduleId.includes('fue-') ||\n        moduleId.includes('general-') ||\n        (!moduleId.includes('bp-ae-') && !moduleId.includes('bp-dpa-'))\n      );\n    }\n\n    if (categoryId.includes('BP-AE') || categoryId.includes('ae')) {\n      return moduleId.includes('bp-ae-') || moduleId.includes('ae-');\n    }\n\n    if (categoryId.includes('BP-DPA') || categoryId.includes('dpa')) {\n      return moduleId.includes('bp-dpa-') || moduleId.includes('dpa-');\n    }\n\n    return false;\n  }\n\n  /**\n   * Check if quiz belongs to a specific category\n   * @private\n   * @param {string} quizId - Quiz ID\n   * @param {string} categoryId - Category ID\n   * @returns {boolean} True if quiz belongs to category\n   */\n  _isQuizInCategory(quizId, categoryId) {\n    // Simple heuristic based on quiz ID patterns\n    if (categoryId === 'general') {\n      return (\n        quizId.includes('fue-') ||\n        quizId.includes('general-') ||\n        (!quizId.includes('bp-ae-') && !quizId.includes('bp-dpa-'))\n      );\n    }\n\n    if (categoryId.includes('BP-AE') || categoryId.includes('ae')) {\n      return quizId.includes('bp-ae-') || quizId.includes('ae-');\n    }\n\n    if (categoryId.includes('BP-DPA') || categoryId.includes('dpa')) {\n      return quizId.includes('bp-dpa-') || quizId.includes('dpa-');\n    }\n\n    return false;\n  }\n\n  /**\n   * Get progress for a specific specialization\n   * @param {string} specializationId - Specialization ID\n   * @returns {Object} Specialization-specific progress\n   */\n  async getSpecializationProgress(specializationId) {\n    try {\n      if (!specializationId) {\n        throw new Error('Specialization ID is required');\n      }\n\n      const progress = this.stateManager.getState('progress') || {};\n      const specializationProgress = progress.specializationProgress || {};\n\n      // Get saved progress for this specialization\n      const savedProgress = specializationProgress[specializationId];\n\n      // Get current overall progress for this specialization\n      const currentProgress = await this.getOverallProgress(specializationId);\n\n      return {\n        specializationId,\n        current: currentProgress,\n        saved: savedProgress || null,\n        lastSwitched: savedProgress?.savedAt || null,\n      };\n    } catch (error) {\n      console.error(\n        `Error getting specialization progress for ${specializationId}:`,\n        error\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Get progress comparison between specializations\n   * @returns {Object} Progress comparison object\n   */\n  async getProgressComparison() {\n    try {\n      if (!this.specializationService) {\n        return {};\n      }\n\n      const availableSpecializations =\n        this.specializationService.getAvailableSpecializations();\n      const comparison = {};\n\n      for (const specialization of availableSpecializations) {\n        try {\n          comparison[specialization.id] = await this.getSpecializationProgress(\n            specialization.id\n          );\n        } catch (error) {\n          console.warn(\n            `Could not get progress for ${specialization.id}:`,\n            error\n          );\n          comparison[specialization.id] = null;\n        }\n      }\n\n      return comparison;\n    } catch (error) {\n      console.error('Error getting progress comparison:', error);\n      throw new Error('Failed to get progress comparison');\n    }\n  }\n\n  /**\n   * Preserve progress when switching specializations\n   * This method is called by SpecializationService but can also be used independently\n   * @param {string} fromSpecialization - Previous specialization\n   * @param {string} toSpecialization - New specialization\n   * @returns {boolean} True if successful\n   */\n  preserveProgressAcrossSpecializations(fromSpecialization, toSpecialization) {\n    try {\n      const progress = this.stateManager.getState('progress') || {};\n\n      // Create specialization-specific progress tracking if it doesn't exist\n      if (!progress.specializationProgress) {\n        progress.specializationProgress = {};\n      }\n\n      // Save current progress under the previous specialization\n      if (fromSpecialization) {\n        progress.specializationProgress[fromSpecialization] = {\n          modulesCompleted: [...(progress.modulesCompleted || [])],\n          modulesInProgress: [...(progress.modulesInProgress || [])],\n          quizAttempts: [...(progress.quizAttempts || [])],\n          lastActivity: progress.lastActivity,\n          savedAt: new Date().toISOString(),\n        };\n      }\n\n      // Restore progress for the new specialization if it exists\n      if (progress.specializationProgress[toSpecialization]) {\n        const savedProgress = progress.specializationProgress[toSpecialization];\n\n        // Merge saved progress with current general progress\n        const generalModules = this._getGeneralModules(\n          progress.modulesCompleted || []\n        );\n        const generalInProgress = this._getGeneralModules(\n          progress.modulesInProgress || []\n        );\n        const generalQuizzes = this._getGeneralQuizAttempts(\n          progress.quizAttempts || []\n        );\n\n        progress.modulesCompleted = [\n          ...generalModules,\n          ...savedProgress.modulesCompleted.filter(\n            id => !generalModules.includes(id)\n          ),\n        ];\n\n        progress.modulesInProgress = [\n          ...generalInProgress,\n          ...savedProgress.modulesInProgress.filter(\n            id => !generalInProgress.includes(id)\n          ),\n        ];\n\n        progress.quizAttempts = [\n          ...generalQuizzes,\n          ...savedProgress.quizAttempts.filter(\n            attempt =>\n              !generalQuizzes.some(general => general.quizId === attempt.quizId)\n          ),\n        ];\n      }\n\n      // Update the progress state\n      this.stateManager.setState('progress', progress);\n\n      return true;\n    } catch (error) {\n      console.error('Error preserving progress across specializations:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Get general modules from a list of module IDs\n   * @private\n   * @param {Array} moduleIds - Array of module IDs\n   * @returns {Array} Array of general module IDs\n   */\n  _getGeneralModules(moduleIds) {\n    return moduleIds.filter(moduleId => {\n      // General modules typically don't have specialization prefixes\n      return (\n        (!moduleId.includes('bp-ae-') && !moduleId.includes('bp-dpa-')) ||\n        moduleId.includes('fue-') ||\n        moduleId.includes('general-')\n      );\n    });\n  }\n\n  /**\n   * Get general quiz attempts from a list of quiz attempts\n   * @private\n   * @param {Array} quizAttempts - Array of quiz attempts\n   * @returns {Array} Array of general quiz attempts\n   */\n  _getGeneralQuizAttempts(quizAttempts) {\n    return quizAttempts.filter(attempt => {\n      // General quizzes typically don't have specialization prefixes\n      return (\n        (!attempt.quizId.includes('bp-ae-') &&\n          !attempt.quizId.includes('bp-dpa-')) ||\n        attempt.quizId.includes('fue-') ||\n        attempt.quizId.includes('general-')\n      );\n    });\n  }\n\n  /**\n   * Get specialization-specific completion statistics\n   * @param {string} specializationId - Specialization ID\n   * @returns {Object} Completion statistics\n   */\n  async getSpecializationStatistics(specializationId) {\n    try {\n      if (!specializationId) {\n        throw new Error('Specialization ID is required');\n      }\n\n      const progress = await this.getOverallProgress(specializationId);\n      const categoryBreakdown = progress.categoryBreakdown || {};\n\n      // Calculate statistics\n      const stats = {\n        specializationId,\n        overallCompletion: progress.overallPercentage,\n        moduleCompletion: progress.moduleCompletionPercentage,\n        averageQuizScore: progress.averageQuizScore,\n        totalModulesCompleted: progress.modulesCompleted,\n        totalQuizzesTaken: progress.quizzesTaken,\n        categoryStats: {},\n        strengths: [],\n        improvementAreas: [],\n      };\n\n      // Analyze category performance\n      Object.entries(categoryBreakdown).forEach(\n        ([categoryId, categoryData]) => {\n          const categoryCompletion =\n            categoryData.modulesCompleted > 0\n              ? Math.round(\n                  (categoryData.modulesCompleted /\n                    (categoryData.modulesCompleted + 1)) *\n                    100\n                )\n              : 0;\n\n          stats.categoryStats[categoryId] = {\n            name: categoryData.name,\n            completion: categoryCompletion,\n            averageQuizScore: categoryData.averageQuizScore,\n            modulesCompleted: categoryData.modulesCompleted,\n            quizzesTaken: categoryData.quizzesTaken,\n          };\n\n          // Identify strengths and improvement areas\n          if (categoryData.averageQuizScore >= 80) {\n            stats.strengths.push(categoryData.name);\n          } else if (\n            categoryData.averageQuizScore > 0 &&\n            categoryData.averageQuizScore < 60\n          ) {\n            stats.improvementAreas.push(categoryData.name);\n          }\n        }\n      );\n\n      return stats;\n    } catch (error) {\n      console.error(\n        `Error getting specialization statistics for ${specializationId}:`,\n        error\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Export progress as JSON with specialization support\n   */\n  async exportProgress() {\n    try {\n      const progress = this.stateManager.getState('progress') || {};\n      const currentSpecialization = this.specializationService\n        ? this.specializationService.getCurrentSpecialization()\n        : null;\n\n      const overallProgress = await this.getOverallProgress();\n      const specializationProgress = currentSpecialization\n        ? await this.getSpecializationProgress(currentSpecialization)\n        : null;\n\n      const exportData = {\n        exportDate: new Date().toISOString(),\n        currentSpecialization,\n        summary: overallProgress,\n        specializationSpecific: specializationProgress,\n        details: {\n          modulesCompleted: progress.modulesCompleted || [],\n          modulesInProgress: progress.modulesInProgress || [],\n          quizAttempts: progress.quizAttempts || [],\n          lastActivity: progress.lastActivity,\n          specializationProgress: progress.specializationProgress || {},\n        },\n      };\n\n      // Convert to JSON string with formatting\n      const jsonString = JSON.stringify(exportData, null, 2);\n\n      // Create blob and download link\n      const blob = new Blob([jsonString], { type: 'application/json' });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `learning-progress-${currentSpecialization || 'general'}-${new Date().toISOString().split('T')[0]}.json`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n\n      return exportData;\n    } catch (error) {\n      console.error('Error exporting progress:', error);\n      throw new Error('Failed to export progress data');\n    }\n  }\n}\n\nexport default ProgressService;\n","import StorageService from './StorageService.js';\n\n/**\n * QuizService - Quiz Business Logic Facade\n *\n * This service acts as a facade that delegates quiz data loading to IHKContentService\n * while providing quiz-specific business logic for:\n * - Answer validation and submission\n * - Score calculation\n * - Quiz attempt tracking and persistence\n *\n * This separation maintains clean architecture by keeping content loading\n * (handled by IHKContentService) separate from quiz-specific operations\n * (handled by this service).\n *\n * Architecture Pattern: Facade + Delegation\n * - Quiz data loading → Delegates to IHKContentService\n * - Quiz business logic → Implemented here\n */\nclass QuizService {\n  constructor(\n    stateManager,\n    storageService,\n    ihkContentService,\n    specializationService\n  ) {\n    this.stateManager = stateManager;\n    this.storage = storageService || new StorageService();\n    this.ihkContentService = ihkContentService;\n    this.specializationService = specializationService;\n  }\n\n  /**\n   * Get all quizzes (delegates to IHKContentService)\n   */\n  async getQuizzes() {\n    // Delegate to IHKContentService for unified quiz loading\n    return await this.ihkContentService.getAllQuizzes();\n  }\n\n  /**\n   * Get quiz by ID (delegates to IHKContentService)\n   */\n  async getQuizById(id) {\n    // Delegate to IHKContentService\n    const quiz = await this.ihkContentService.getQuizById(id);\n\n    if (!quiz) {\n      throw new Error(`Quiz with ID \"${id}\" not found`);\n    }\n\n    return quiz;\n  }\n\n  /**\n   * Submit answer with validation\n   */\n  async submitAnswer(quizId, questionId, answer) {\n    try {\n      if (!quizId || !questionId || answer === undefined) {\n        throw new Error(\n          'Invalid parameters: quizId, questionId, and answer are required'\n        );\n      }\n\n      // Get the quiz\n      const quiz = await this.getQuizById(quizId);\n\n      // Find the question\n      const question = quiz.questions.find(q => q.id === questionId);\n      if (!question) {\n        throw new Error(\n          `Question with ID \"${questionId}\" not found in quiz \"${quizId}\"`\n        );\n      }\n\n      // Validate answer is one of the options\n      if (!question.options.includes(answer)) {\n        throw new Error(\n          'Invalid answer: answer must be one of the provided options'\n        );\n      }\n\n      // Check if answer is correct\n      const isCorrect = answer === question.correctAnswer;\n\n      return {\n        questionId,\n        userAnswer: answer,\n        correctAnswer: question.correctAnswer,\n        isCorrect,\n        explanation: question.explanation,\n      };\n    } catch (error) {\n      console.error(\n        `Error submitting answer for quiz ${quizId}, question ${questionId}:`,\n        error\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Calculate score for quiz completion\n   */\n  async calculateScore(quizId, answers) {\n    try {\n      if (!quizId || !answers || !Array.isArray(answers)) {\n        throw new Error(\n          'Invalid parameters: quizId and answers array are required'\n        );\n      }\n\n      // Get the quiz\n      const quiz = await this.getQuizById(quizId);\n\n      // Calculate correct answers\n      let correctCount = 0;\n      const results = [];\n\n      for (const answer of answers) {\n        const question = quiz.questions.find(q => q.id === answer.questionId);\n        if (!question) {\n          console.warn(\n            `Question ${answer.questionId} not found in quiz ${quizId}`\n          );\n          continue;\n        }\n\n        const isCorrect = answer.userAnswer === question.correctAnswer;\n        if (isCorrect) {\n          correctCount++;\n        }\n\n        results.push({\n          questionId: answer.questionId,\n          userAnswer: answer.userAnswer,\n          correctAnswer: question.correctAnswer,\n          isCorrect,\n          explanation: question.explanation,\n        });\n      }\n\n      const totalQuestions = quiz.questions.length;\n      const percentage =\n        totalQuestions > 0\n          ? Math.round((correctCount / totalQuestions) * 100)\n          : 0;\n\n      return {\n        quizId,\n        totalQuestions,\n        correctAnswers: correctCount,\n        incorrectAnswers: totalQuestions - correctCount,\n        score: percentage,\n        results,\n      };\n    } catch (error) {\n      console.error(`Error calculating score for quiz ${quizId}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Save quiz attempt to persist quiz results\n   */\n  async saveQuizAttempt(quizId, score, answers) {\n    try {\n      if (!quizId || score === undefined || !answers) {\n        throw new Error(\n          'Invalid parameters: quizId, score, and answers are required'\n        );\n      }\n\n      // Get current progress\n      const progress = this.stateManager.getState('progress') || {};\n      const quizAttempts = progress.quizAttempts || [];\n\n      // Create quiz attempt record\n      const attempt = {\n        quizId,\n        score: score.score || score, // Handle both score object and number\n        totalQuestions: score.totalQuestions || answers.length,\n        correctAnswers: score.correctAnswers || 0,\n        date: new Date().toISOString(),\n        answers: answers.map(a => ({\n          questionId: a.questionId,\n          userAnswer: a.userAnswer,\n          correct: a.isCorrect || false,\n        })),\n      };\n\n      // Add to quiz attempts\n      this.stateManager.setState('progress.quizAttempts', [\n        ...quizAttempts,\n        attempt,\n      ]);\n\n      // Update last activity\n      this.stateManager.setState(\n        'progress.lastActivity',\n        new Date().toISOString()\n      );\n\n      return attempt;\n    } catch (error) {\n      console.error(`Error saving quiz attempt for ${quizId}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get quizzes filtered by specialization\n   * @param {string} specializationId - The specialization ID to filter for\n   * @param {Object} options - Filtering options\n   * @param {string} options.minRelevance - Minimum relevance level ('high', 'medium', 'low')\n   * @param {boolean} options.includeGeneral - Whether to include general content\n   * @returns {Promise<Array>} Filtered quizzes array\n   */\n  async getQuizzesBySpecialization(specializationId, options = {}) {\n    try {\n      if (!specializationId || typeof specializationId !== 'string') {\n        throw new Error('Invalid specialization ID');\n      }\n\n      // Get all quizzes first\n      const allQuizzes = await this.getQuizzes();\n\n      // If no specialization service available, return all quizzes\n      if (!this.specializationService) {\n        console.warn(\n          'SpecializationService not available, returning all quizzes'\n        );\n        return allQuizzes;\n      }\n\n      // Filter quizzes by specialization\n      const filteredQuizzes =\n        this.specializationService.filterContentBySpecialization(\n          allQuizzes,\n          specializationId,\n          {\n            minRelevance: options.minRelevance || 'low',\n            includeGeneral: options.includeGeneral !== false, // default to true\n          }\n        );\n\n      return filteredQuizzes;\n    } catch (error) {\n      console.error(\n        `Error getting quizzes by specialization ${specializationId}:`,\n        error\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Get quizzes organized by category for a specific specialization\n   * @param {string} specializationId - The specialization ID\n   * @returns {Promise<Object>} Object with categories as keys and quiz arrays as values\n   */\n  async getCategorizedQuizzes(specializationId) {\n    try {\n      if (!specializationId || typeof specializationId !== 'string') {\n        throw new Error('Invalid specialization ID');\n      }\n\n      // Get all quizzes\n      const allQuizzes = await this.getQuizzes();\n\n      // If no specialization service available, return quizzes under 'all' category\n      if (!this.specializationService) {\n        console.warn(\n          'SpecializationService not available, returning uncategorized quizzes'\n        );\n        return { all: allQuizzes };\n      }\n\n      // Get content categories for this specialization\n      const categories =\n        this.specializationService.getContentCategories(specializationId);\n      const categorizedQuizzes = {};\n\n      // Initialize categories\n      categories.forEach(category => {\n        categorizedQuizzes[category.id] = [];\n      });\n\n      // Add an 'all' category for convenience\n      categorizedQuizzes.all = allQuizzes;\n\n      // Categorize quizzes\n      allQuizzes.forEach(quiz => {\n        const categoryId = quiz.category || quiz.categoryId;\n\n        if (categoryId) {\n          // Get relevance for this category and specialization\n          const relevance = this.specializationService.getCategoryRelevance(\n            categoryId,\n            specializationId\n          );\n\n          // Add to appropriate category based on relevance\n          if (relevance === 'high' || relevance === 'medium') {\n            // Find the category this quiz belongs to\n            const category = categories.find(cat => cat.id === categoryId);\n            if (category) {\n              categorizedQuizzes[category.id].push(quiz);\n            } else {\n              // Check if it's general content\n              if (this._isGeneralContent(categoryId)) {\n                if (!categorizedQuizzes.general) {\n                  categorizedQuizzes.general = [];\n                }\n                categorizedQuizzes.general.push(quiz);\n              }\n            }\n          }\n        } else {\n          // Quiz without category - add to general if it exists\n          if (categorizedQuizzes.general) {\n            categorizedQuizzes.general.push(quiz);\n          }\n        }\n      });\n\n      return categorizedQuizzes;\n    } catch (error) {\n      console.error(\n        `Error getting categorized quizzes for specialization ${specializationId}:`,\n        error\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Get quizzes by category for a specific specialization\n   * @param {string} categoryId - The category ID to filter by\n   * @param {string} specializationId - The specialization ID\n   * @returns {Promise<Array>} Quizzes in the specified category\n   */\n  async getQuizzesByCategory(categoryId, specializationId) {\n    try {\n      if (!categoryId || typeof categoryId !== 'string') {\n        throw new Error('Invalid category ID');\n      }\n\n      if (!specializationId || typeof specializationId !== 'string') {\n        throw new Error('Invalid specialization ID');\n      }\n\n      // Get all quizzes\n      const allQuizzes = await this.getQuizzes();\n\n      // Filter quizzes by category\n      const categoryQuizzes = allQuizzes.filter(quiz => {\n        const quizCategoryId = quiz.category || quiz.categoryId;\n        return quizCategoryId === categoryId;\n      });\n\n      // If no specialization service available, return category quizzes as-is\n      if (!this.specializationService) {\n        console.warn(\n          'SpecializationService not available, returning unfiltered category quizzes'\n        );\n        return categoryQuizzes;\n      }\n\n      // Further filter by specialization relevance\n      const filteredQuizzes =\n        this.specializationService.filterContentBySpecialization(\n          categoryQuizzes,\n          specializationId,\n          {\n            minRelevance: 'low',\n            includeGeneral: true,\n          }\n        );\n\n      return filteredQuizzes;\n    } catch (error) {\n      console.error(\n        `Error getting quizzes by category ${categoryId} for specialization ${specializationId}:`,\n        error\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Check if content is general (applies to all specializations)\n   * @private\n   * @param {string} categoryId - The category ID to check\n   * @returns {boolean} True if content is general\n   */\n  _isGeneralContent(categoryId) {\n    if (!this.specializationService) {\n      return false;\n    }\n\n    // Delegate to SpecializationService\n    return this.specializationService._isGeneralContent(categoryId);\n  }\n\n  /**\n   * Get current user's specialization-filtered quizzes\n   * Convenience method that uses the current user's specialization\n   * @param {Object} options - Filtering options\n   * @returns {Promise<Array>} Filtered quizzes for current specialization\n   */\n  async getCurrentSpecializationQuizzes(options = {}) {\n    try {\n      if (!this.specializationService) {\n        console.warn(\n          'SpecializationService not available, returning all quizzes'\n        );\n        return await this.getQuizzes();\n      }\n\n      const currentSpecialization =\n        this.specializationService.getCurrentSpecialization();\n\n      if (!currentSpecialization) {\n        // No specialization selected, return all quizzes\n        return await this.getQuizzes();\n      }\n\n      return await this.getQuizzesBySpecialization(\n        currentSpecialization,\n        options\n      );\n    } catch (error) {\n      console.error('Error getting current specialization quizzes:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get quiz statistics by specialization\n   * @param {string} specializationId - The specialization ID\n   * @returns {Promise<Object>} Statistics object with counts by category and relevance\n   */\n  async getQuizStatistics(specializationId) {\n    try {\n      if (!specializationId || typeof specializationId !== 'string') {\n        throw new Error('Invalid specialization ID');\n      }\n\n      const allQuizzes = await this.getQuizzes();\n      const stats = {\n        total: allQuizzes.length,\n        byRelevance: {\n          high: 0,\n          medium: 0,\n          low: 0,\n          none: 0,\n        },\n        byCategory: {},\n        specialization: specializationId,\n      };\n\n      if (!this.specializationService) {\n        console.warn(\n          'SpecializationService not available, returning basic statistics'\n        );\n        return stats;\n      }\n\n      // Calculate statistics\n      allQuizzes.forEach(quiz => {\n        const categoryId = quiz.category || quiz.categoryId;\n\n        if (categoryId) {\n          const relevance = this.specializationService.getCategoryRelevance(\n            categoryId,\n            specializationId\n          );\n\n          // Count by relevance\n          if (stats.byRelevance[relevance] !== undefined) {\n            stats.byRelevance[relevance]++;\n          }\n\n          // Count by category\n          if (!stats.byCategory[categoryId]) {\n            stats.byCategory[categoryId] = {\n              count: 0,\n              relevance: relevance,\n            };\n          }\n          stats.byCategory[categoryId].count++;\n        } else {\n          // Quiz without category\n          stats.byRelevance.none++;\n        }\n      });\n\n      return stats;\n    } catch (error) {\n      console.error(\n        `Error getting quiz statistics for specialization ${specializationId}:`,\n        error\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Get quiz attempts filtered by specialization\n   * @param {string} specializationId - The specialization ID\n   * @returns {Promise<Array>} Quiz attempts for the specified specialization\n   */\n  async getQuizAttemptsBySpecialization(specializationId) {\n    try {\n      if (!specializationId || typeof specializationId !== 'string') {\n        throw new Error('Invalid specialization ID');\n      }\n\n      // Get all quiz attempts from progress\n      const progress = this.stateManager.getState('progress') || {};\n      const allAttempts = progress.quizAttempts || [];\n\n      if (!this.specializationService) {\n        console.warn(\n          'SpecializationService not available, returning all quiz attempts'\n        );\n        return allAttempts;\n      }\n\n      // Get all quizzes to check their categories\n      const allQuizzes = await this.getQuizzes();\n      const quizCategoryMap = {};\n\n      // Build a map of quiz ID to category\n      allQuizzes.forEach(quiz => {\n        quizCategoryMap[quiz.id] = quiz.category || quiz.categoryId;\n      });\n\n      // Filter attempts by specialization relevance\n      const filteredAttempts = allAttempts.filter(attempt => {\n        const categoryId = quizCategoryMap[attempt.quizId];\n\n        if (!categoryId) {\n          return true; // Include attempts for quizzes without category\n        }\n\n        const relevance = this.specializationService.getCategoryRelevance(\n          categoryId,\n          specializationId\n        );\n\n        // Include if relevant or general content\n        return (\n          relevance !== 'none' ||\n          this.specializationService._isGeneralContent(categoryId)\n        );\n      });\n\n      return filteredAttempts;\n    } catch (error) {\n      console.error(\n        `Error getting quiz attempts by specialization ${specializationId}:`,\n        error\n      );\n      throw error;\n    }\n  }\n}\n\nexport default QuizService;\n","/**\n * AccessibilityHelper - Utilities for accessibility features\n */\nclass AccessibilityHelper {\n  constructor() {\n    this.liveRegion = null;\n    this.focusHistory = [];\n  }\n\n  /**\n   * Initialize accessibility helper\n   */\n  init() {\n    this.liveRegion = document.getElementById('live-region');\n    if (!this.liveRegion) {\n      this.liveRegion = this._createLiveRegion();\n    }\n  }\n\n  /**\n   * Create live region if it doesn't exist\n   */\n  _createLiveRegion() {\n    const region = document.createElement('div');\n    region.id = 'live-region';\n    region.className = 'live-region';\n    region.setAttribute('role', 'status');\n    region.setAttribute('aria-live', 'polite');\n    region.setAttribute('aria-atomic', 'true');\n    document.body.appendChild(region);\n    return region;\n  }\n\n  /**\n   * Announce message to screen readers\n   * @param {string} message - Message to announce\n   * @param {string} priority - 'polite' or 'assertive'\n   */\n  announce(message, priority = 'polite') {\n    if (!this.liveRegion) {\n      this.init();\n    }\n\n    this.liveRegion.setAttribute('aria-live', priority);\n    this.liveRegion.textContent = '';\n\n    // Small delay to ensure screen readers pick up the change\n    setTimeout(() => {\n      this.liveRegion.textContent = message;\n    }, 100);\n\n    // Clear after announcement\n    setTimeout(() => {\n      this.liveRegion.textContent = '';\n    }, 3000);\n  }\n\n  /**\n   * Set focus to element\n   * @param {HTMLElement|string} element - Element or selector\n   */\n  setFocus(element) {\n    const el =\n      typeof element === 'string' ? document.querySelector(element) : element;\n\n    if (el) {\n      // Make element focusable if it isn't already\n      if (!el.hasAttribute('tabindex') && !this._isFocusable(el)) {\n        el.setAttribute('tabindex', '-1');\n      }\n\n      el.focus();\n    }\n  }\n\n  /**\n   * Check if element is naturally focusable\n   */\n  _isFocusable(element) {\n    const focusableTags = ['A', 'BUTTON', 'INPUT', 'SELECT', 'TEXTAREA'];\n    return (\n      focusableTags.includes(element.tagName) ||\n      element.hasAttribute('tabindex')\n    );\n  }\n\n  /**\n   * Save current focus for later restoration\n   */\n  saveFocus() {\n    this.focusHistory.push(document.activeElement);\n  }\n\n  /**\n   * Restore previously saved focus\n   */\n  restoreFocus() {\n    const element = this.focusHistory.pop();\n    if (element && element.focus) {\n      element.focus();\n    }\n  }\n\n  /**\n   * Trap focus within a container (for modals, menus, etc.)\n   * @param {HTMLElement} container - Container element\n   */\n  trapFocus(container) {\n    const focusableElements = this._getFocusableElements(container);\n\n    if (focusableElements.length === 0) return;\n\n    const firstElement = focusableElements[0];\n    const lastElement = focusableElements[focusableElements.length - 1];\n\n    const handleTabKey = e => {\n      if (e.key !== 'Tab') return;\n\n      if (e.shiftKey) {\n        // Shift + Tab\n        if (document.activeElement === firstElement) {\n          e.preventDefault();\n          lastElement.focus();\n        }\n      } else {\n        // Tab\n        if (document.activeElement === lastElement) {\n          e.preventDefault();\n          firstElement.focus();\n        }\n      }\n    };\n\n    container.addEventListener('keydown', handleTabKey);\n\n    // Return cleanup function\n    return () => {\n      container.removeEventListener('keydown', handleTabKey);\n    };\n  }\n\n  /**\n   * Get all focusable elements within a container\n   */\n  _getFocusableElements(container) {\n    const selector =\n      'a[href], button:not([disabled]), textarea:not([disabled]), input:not([disabled]), select:not([disabled]), [tabindex]:not([tabindex=\"-1\"])';\n\n    return Array.from(container.querySelectorAll(selector)).filter(\n      el => !el.hasAttribute('disabled') && el.offsetParent !== null\n    );\n  }\n\n  /**\n   * Set up keyboard navigation for a list\n   * @param {HTMLElement} container - Container element\n   * @param {string} itemSelector - Selector for list items\n   */\n  setupListNavigation(container, itemSelector) {\n    const items = Array.from(container.querySelectorAll(itemSelector));\n\n    if (items.length === 0) return;\n\n    items.forEach((item, index) => {\n      item.setAttribute('role', 'listitem');\n      item.setAttribute('tabindex', index === 0 ? '0' : '-1');\n\n      item.addEventListener('keydown', e => {\n        let targetIndex = index;\n\n        switch (e.key) {\n          case 'ArrowDown':\n          case 'ArrowRight':\n            e.preventDefault();\n            targetIndex = (index + 1) % items.length;\n            break;\n\n          case 'ArrowUp':\n          case 'ArrowLeft':\n            e.preventDefault();\n            targetIndex = (index - 1 + items.length) % items.length;\n            break;\n\n          case 'Home':\n            e.preventDefault();\n            targetIndex = 0;\n            break;\n\n          case 'End':\n            e.preventDefault();\n            targetIndex = items.length - 1;\n            break;\n\n          default:\n            return;\n        }\n\n        // Update tabindex\n        items.forEach((el, i) => {\n          el.setAttribute('tabindex', i === targetIndex ? '0' : '-1');\n        });\n\n        // Focus target\n        items[targetIndex].focus();\n      });\n    });\n\n    // Set role on container\n    container.setAttribute('role', 'list');\n  }\n\n  /**\n   * Add keyboard support for button-like elements\n   * @param {HTMLElement} element - Element to enhance\n   * @param {Function} callback - Click callback\n   */\n  makeKeyboardAccessible(element, callback) {\n    if (!element.hasAttribute('role')) {\n      element.setAttribute('role', 'button');\n    }\n\n    if (!element.hasAttribute('tabindex')) {\n      element.setAttribute('tabindex', '0');\n    }\n\n    element.addEventListener('keydown', e => {\n      if (e.key === 'Enter' || e.key === ' ') {\n        e.preventDefault();\n        callback(e);\n      }\n    });\n  }\n\n  /**\n   * Check if user prefers reduced motion\n   */\n  prefersReducedMotion() {\n    return window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n  }\n\n  /**\n   * Get appropriate animation duration based on user preference\n   */\n  getAnimationDuration(defaultDuration = 300) {\n    return this.prefersReducedMotion() ? 0 : defaultDuration;\n  }\n}\n\n// Export singleton instance\nconst accessibilityHelper = new AccessibilityHelper();\nexport default accessibilityHelper;\n","import accessibilityHelper from '../utils/AccessibilityHelper.js';\n\n/**\n * Router - Hash-based routing for single-page application\n * Enhanced with specialization context support while maintaining backward compatibility\n */\nclass Router {\n  constructor(appContainer) {\n    this.routes = new Map();\n    this.appContainer = appContainer;\n    this.currentView = null;\n    this.currentRoute = null;\n    this.notFoundHandler = null;\n    this.specializationService = null; // Will be set by app initialization\n  }\n\n  /**\n   * Set specialization service for context-aware routing\n   * @param {SpecializationService} specializationService - The specialization service\n   */\n  setSpecializationService(specializationService) {\n    this.specializationService = specializationService;\n  }\n\n  /**\n   * Register a route with its view factory\n   */\n  register(path, viewFactory) {\n    if (typeof path !== 'string' || !path) {\n      throw new Error('Route path must be a non-empty string');\n    }\n\n    if (typeof viewFactory !== 'function') {\n      throw new Error('View factory must be a function');\n    }\n\n    this.routes.set(path, viewFactory);\n  }\n\n  /**\n   * Register a 404 not found handler\n   */\n  registerNotFound(viewFactory) {\n    this.notFoundHandler = viewFactory;\n  }\n\n  /**\n   * Initialize router and start listening to hash changes\n   */\n  init() {\n    // Listen for hash changes\n    window.addEventListener('hashchange', () => this._handleRouteChange());\n\n    // Handle initial route\n    this._handleRouteChange();\n  }\n\n  /**\n   * Navigate to a route programmatically\n   * @param {string} path - The route path\n   * @param {Object} params - Query parameters\n   * @param {Object} options - Navigation options\n   * @param {boolean} options.preserveSpecialization - Whether to preserve specialization context\n   */\n  navigate(path, params = {}, options = {}) {\n    if (!path) {\n      path = '/';\n    }\n\n    const { preserveSpecialization = true } = options;\n\n    // Add specialization context if available and requested\n    if (preserveSpecialization && this.specializationService) {\n      const currentSpecialization =\n        this.specializationService.getCurrentSpecialization();\n      if (currentSpecialization && !params.specialization) {\n        params.specialization = currentSpecialization;\n      }\n    }\n\n    // Build hash with parameters\n    let hash = `#${path}`;\n\n    if (Object.keys(params).length > 0) {\n      const queryString = new URLSearchParams(params).toString();\n      hash += `?${queryString}`;\n    }\n\n    window.location.hash = hash;\n  }\n\n  /**\n   * Handle route changes\n   */\n  _handleRouteChange() {\n    const { path, params } = this._parseHash();\n\n    // Find matching route\n    const route = this._matchRoute(path);\n\n    if (route) {\n      this._renderView(route, path, params);\n    } else {\n      this._handle404(path);\n    }\n  }\n\n  /**\n   * Parse current hash into path and params\n   * Enhanced to handle specialization context while maintaining backward compatibility\n   */\n  _parseHash() {\n    const hash = window.location.hash.slice(1) || '/';\n\n    // Split path and query string\n    const [path, queryString] = hash.split('?');\n\n    // Parse query parameters\n    const params = {};\n    if (queryString) {\n      const searchParams = new URLSearchParams(queryString);\n      for (const [key, value] of searchParams) {\n        params[key] = value;\n      }\n    }\n\n    // Parse path parameters (e.g., /module/:id)\n    const pathParams = this._extractPathParams(path);\n\n    // Handle specialization context from URL\n    this._handleSpecializationContext(params);\n\n    return {\n      path: path || '/',\n      params: { ...params, ...pathParams },\n    };\n  }\n\n  /**\n   * Handle specialization context from URL parameters\n   * Provides fallback for legacy URLs without breaking existing functionality\n   * @private\n   * @param {Object} params - URL parameters\n   */\n  _handleSpecializationContext(params) {\n    if (!this.specializationService) {\n      return;\n    }\n\n    // If URL contains specialization parameter, validate and apply it\n    if (params.specialization) {\n      const availableSpecializations =\n        this.specializationService.getAvailableSpecializations();\n      const isValidSpecialization = availableSpecializations.some(\n        spec => spec.id === params.specialization\n      );\n\n      if (isValidSpecialization) {\n        const currentSpecialization =\n          this.specializationService.getCurrentSpecialization();\n\n        // Only update if different from current specialization\n        if (currentSpecialization !== params.specialization) {\n          console.warn(\n            `🔄 Switching specialization from URL: ${params.specialization}`\n          );\n          this.specializationService.setSpecialization(params.specialization, {\n            preserveProgress: true,\n          });\n        }\n      } else {\n        // Invalid specialization in URL - remove it but don't break navigation\n        console.warn(\n          `⚠️ Invalid specialization in URL: ${params.specialization}`\n        );\n        delete params.specialization;\n\n        // Optionally redirect to clean URL (without invalid specialization)\n        this._cleanupInvalidSpecializationUrl();\n      }\n    } else {\n      // No specialization in URL - this is fine for backward compatibility\n      // Legacy URLs will continue to work with user's current specialization\n    }\n  }\n\n  /**\n   * Clean up URL with invalid specialization parameter\n   * @private\n   */\n  _cleanupInvalidSpecializationUrl() {\n    try {\n      const currentHash = window.location.hash;\n      const [path, queryString] = currentHash.slice(1).split('?');\n\n      if (queryString) {\n        const searchParams = new URLSearchParams(queryString);\n        searchParams.delete('specialization');\n\n        const cleanQueryString = searchParams.toString();\n        const cleanHash = cleanQueryString\n          ? `#${path}?${cleanQueryString}`\n          : `#${path}`;\n\n        // Replace current URL without triggering navigation\n        window.history.replaceState(null, '', cleanHash);\n      }\n    } catch (error) {\n      console.error('Error cleaning up invalid specialization URL:', error);\n    }\n  }\n\n  /**\n   * Extract parameters from path (e.g., /module/123 -> { id: '123' })\n   */\n  _extractPathParams(path) {\n    const params = {};\n\n    // Check each registered route for parameter patterns\n    for (const [routePath] of this.routes) {\n      const pattern = this._routeToRegex(routePath);\n      const match = path.match(pattern);\n\n      if (match) {\n        // Extract parameter names from route path\n        const paramNames = this._getParamNames(routePath);\n\n        // Map matched values to parameter names\n        paramNames.forEach((name, index) => {\n          params[name] = match[index + 1];\n        });\n\n        break;\n      }\n    }\n\n    return params;\n  }\n\n  /**\n   * Convert route path to regex pattern\n   */\n  _routeToRegex(routePath) {\n    // Convert /module/:id to /module/([^/]+)\n    const pattern = routePath\n      .replace(/:[^/]+/g, '([^/]+)')\n      .replace(/\\//g, '\\\\/');\n\n    return new RegExp(`^${pattern}$`);\n  }\n\n  /**\n   * Get parameter names from route path\n   */\n  _getParamNames(routePath) {\n    const matches = routePath.match(/:([^/]+)/g);\n    if (!matches) return [];\n\n    return matches.map(match => match.slice(1));\n  }\n\n  /**\n   * Match current path to a registered route\n   */\n  _matchRoute(path) {\n    // Try exact match first\n    if (this.routes.has(path)) {\n      return { path, viewFactory: this.routes.get(path) };\n    }\n\n    // Try pattern matching for parameterized routes\n    for (const [routePath, viewFactory] of this.routes) {\n      if (routePath.includes(':')) {\n        const pattern = this._routeToRegex(routePath);\n        if (pattern.test(path)) {\n          return { path: routePath, viewFactory };\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Render a view\n   */\n  async _renderView(route, path, params) {\n    try {\n      // Clean up previous view if it has a cleanup method\n      if (this.currentView && typeof this.currentView.cleanup === 'function') {\n        this.currentView.cleanup();\n      }\n\n      // Show loading state\n      this.appContainer.innerHTML =\n        '<div class=\"loading\" role=\"status\" aria-live=\"polite\">Loading...</div>';\n\n      // Create and render new view\n      const viewResult = route.viewFactory(params);\n\n      // Handle async views (promises)\n      const view =\n        viewResult instanceof Promise ? await viewResult : viewResult;\n\n      // Clear container and trigger fade-in animation\n      this.appContainer.innerHTML = '';\n      this.appContainer.style.animation = 'none';\n\n      // Force reflow to restart animation\n      void this.appContainer.offsetWidth;\n      this.appContainer.style.animation = '';\n\n      // Render view\n      if (typeof view === 'string') {\n        this.appContainer.innerHTML = view;\n      } else if (view instanceof HTMLElement) {\n        this.appContainer.appendChild(view);\n      } else if (view && typeof view.render === 'function') {\n        const rendered = view.render();\n        const resolvedRender =\n          rendered instanceof Promise ? await rendered : rendered;\n\n        if (typeof resolvedRender === 'string') {\n          this.appContainer.innerHTML = resolvedRender;\n        } else if (resolvedRender instanceof HTMLElement) {\n          this.appContainer.appendChild(resolvedRender);\n        }\n      }\n\n      // Store current view and route\n      this.currentView = view;\n      this.currentRoute = { path, params };\n\n      // Scroll to top with smooth behavior (respects reduced motion)\n      const scrollBehavior = accessibilityHelper.prefersReducedMotion()\n        ? 'auto'\n        : 'smooth';\n      window.scrollTo({ top: 0, behavior: scrollBehavior });\n\n      // Update active navigation\n      this._updateActiveNav(path);\n\n      // Set focus to main content for keyboard users\n      setTimeout(() => {\n        const mainContent = document.getElementById('main-content');\n        if (mainContent) {\n          accessibilityHelper.setFocus(mainContent);\n        }\n      }, 100);\n\n      // Announce page change to screen readers\n      const pageName = this._getPageName(path);\n      accessibilityHelper.announce(`Navigated to ${pageName}`);\n    } catch (error) {\n      console.error('Error rendering view:', error);\n      this._renderError(error);\n    }\n  }\n\n  /**\n   * Handle 404 not found\n   */\n  async _handle404(path) {\n    console.warn(`Route not found: ${path}`);\n\n    if (this.notFoundHandler) {\n      try {\n        const viewResult = this.notFoundHandler({ path });\n        const view =\n          viewResult instanceof Promise ? await viewResult : viewResult;\n\n        this.appContainer.innerHTML = '';\n        this.appContainer.style.animation = 'none';\n        void this.appContainer.offsetWidth;\n        this.appContainer.style.animation = '';\n\n        if (typeof view === 'string') {\n          this.appContainer.innerHTML = view;\n        } else if (view instanceof HTMLElement) {\n          this.appContainer.appendChild(view);\n        }\n\n        // Scroll to top\n        const scrollBehavior = accessibilityHelper.prefersReducedMotion()\n          ? 'auto'\n          : 'smooth';\n        window.scrollTo({ top: 0, behavior: scrollBehavior });\n\n        // Announce to screen readers\n        accessibilityHelper.announce('Page not found');\n      } catch (error) {\n        console.error('Error rendering 404 view:', error);\n        // Fallback to home on error\n        this.navigate('/');\n      }\n    } else {\n      // Default 404 - redirect to home\n      this.navigate('/');\n    }\n  }\n\n  /**\n   * Render error view\n   */\n  _renderError(error) {\n    this.appContainer.innerHTML = `\n      <div class=\"error-view\">\n        <h1>Oops! Something went wrong</h1>\n        <p>${error.message}</p>\n        <button onclick=\"window.location.hash = '#/'\">Go Home</button>\n      </div>\n    `;\n  }\n\n  /**\n   * Update active navigation links\n   */\n  _updateActiveNav(path) {\n    // Remove active class from all nav links\n    document.querySelectorAll('[data-nav-link]').forEach(link => {\n      link.classList.remove('active');\n    });\n\n    // Add active class to matching link\n    const activeLink = document.querySelector(`[data-nav-link=\"${path}\"]`);\n    if (activeLink) {\n      activeLink.classList.add('active');\n    }\n  }\n\n  /**\n   * Get current route info\n   */\n  getCurrentRoute() {\n    return this.currentRoute;\n  }\n\n  /**\n   * Refresh the current route (useful after specialization changes)\n   */\n  refresh() {\n    this._handleRouteChange();\n  }\n\n  /**\n   * Generate URL with specialization context\n   * @param {string} path - The route path\n   * @param {Object} params - Additional parameters\n   * @param {boolean} includeSpecialization - Whether to include current specialization\n   * @returns {string} Complete URL hash\n   */\n  generateUrl(path, params = {}, includeSpecialization = true) {\n    const urlParams = { ...params };\n\n    // Add current specialization if requested and available\n    if (includeSpecialization && this.specializationService) {\n      const currentSpecialization =\n        this.specializationService.getCurrentSpecialization();\n      if (currentSpecialization && !urlParams.specialization) {\n        urlParams.specialization = currentSpecialization;\n      }\n    }\n\n    // Build URL\n    let url = `#${path}`;\n    if (Object.keys(urlParams).length > 0) {\n      const queryString = new URLSearchParams(urlParams).toString();\n      url += `?${queryString}`;\n    }\n\n    return url;\n  }\n\n  /**\n   * Check if current URL has specialization context\n   * @returns {boolean} True if URL contains specialization parameter\n   */\n  hasSpecializationContext() {\n    const { params } = this._parseHash();\n    return !!params.specialization;\n  }\n\n  /**\n   * Get specialization from current URL\n   * @returns {string|null} Specialization ID from URL or null\n   */\n  getUrlSpecialization() {\n    const { params } = this._parseHash();\n    return params.specialization || null;\n  }\n\n  /**\n   * Get human-readable page name from path\n   */\n  _getPageName(path) {\n    const pageNames = {\n      '/': 'Home',\n      '/modules': 'Learning Modules',\n      '/quizzes': 'Quizzes',\n      '/progress': 'Progress',\n    };\n\n    // Check for exact match\n    if (pageNames[path]) {\n      return pageNames[path];\n    }\n\n    // Check for pattern matches\n    if (path.startsWith('/module/')) {\n      return 'Module Details';\n    }\n    if (path.startsWith('/quizzes/')) {\n      return 'Quiz';\n    }\n\n    return 'Page';\n  }\n}\n\nexport default Router;\n","import categoriesData from '../data/ihk/metadata/categories.json';\n\n/**\n * SpecializationService - Manages user specialization preferences and content filtering\n * Handles specialization selection, content categorization, and filtering logic\n */\nclass SpecializationService {\n  constructor(stateManager, storageService, categoryMappingService = null) {\n    this.stateManager = stateManager;\n    this.storage = storageService;\n    this.categoryMappingService = categoryMappingService;\n    this.categoriesData = categoriesData;\n\n    // Initialize specialization state if not exists\n    this._initializeSpecializationState();\n  }\n\n  /**\n   * Initialize specialization state in StateManager\n   * @private\n   */\n  _initializeSpecializationState() {\n    const currentState = this.stateManager.getState();\n\n    if (!currentState.specialization) {\n      this.stateManager.setState('specialization', {\n        current: null,\n        hasSelected: false,\n        preferences: {\n          showAllContent: false,\n          preferredCategories: [],\n        },\n      });\n    }\n  }\n\n  /**\n   * Get all available specializations from categories data\n   * @returns {Array} Array of specialization objects\n   */\n  getAvailableSpecializations() {\n    const supportedSpecializations =\n      this.categoriesData.supportedSpecializations || [];\n\n    return supportedSpecializations.map(specializationId => {\n      // Find specialization config from categories\n      const config =\n        this._getSpecializationConfigFromCategories(specializationId);\n\n      return {\n        id: specializationId,\n        name: config.name,\n        shortName: config.shortName,\n        description: config.description,\n        color: config.color,\n        icon: config.icon,\n        examCode: config.examCode,\n      };\n    });\n  }\n\n  /**\n   * Get specialization configuration from categories data\n   * @private\n   * @param {string} specializationId - The specialization ID\n   * @returns {Object} Specialization configuration\n   */\n  _getSpecializationConfigFromCategories(specializationId) {\n    // Default configurations based on the design document\n    const defaultConfigs = {\n      anwendungsentwicklung: {\n        name: 'Anwendungsentwicklung',\n        shortName: 'AE',\n        description: 'Fachinformatiker für Anwendungsentwicklung',\n        color: '#10b981',\n        icon: '💻',\n        examCode: 'AP2-AE',\n      },\n      'daten-prozessanalyse': {\n        name: 'Daten- und Prozessanalyse',\n        shortName: 'DPA',\n        description: 'Fachinformatiker für Daten- und Prozessanalyse',\n        color: '#3b82f6',\n        icon: '📊',\n        examCode: 'AP2-DPA',\n      },\n    };\n\n    return (\n      defaultConfigs[specializationId] || {\n        name: specializationId,\n        shortName: specializationId.toUpperCase(),\n        description: `Fachinformatiker für ${specializationId}`,\n        color: '#6b7280',\n        icon: '⚙️',\n        examCode: 'AP2',\n      }\n    );\n  }\n\n  /**\n   * Get current user's specialization\n   * @returns {string|null} Current specialization ID or null if not set\n   */\n  getCurrentSpecialization() {\n    const specializationState = this.stateManager.getState('specialization');\n    return specializationState?.current || null;\n  }\n\n  /**\n   * Check if user has selected a specialization\n   * @returns {boolean} True if user has made a specialization selection\n   */\n  hasSelectedSpecialization() {\n    const specializationState = this.stateManager.getState('specialization');\n    return specializationState?.hasSelected || false;\n  }\n\n  /**\n   * Set user's specialization preference\n   * @param {string} specializationId - The specialization ID to set\n   * @param {Object} options - Additional options\n   * @param {boolean} options.preserveProgress - Whether to preserve progress (default: true)\n   * @returns {boolean} True if successful\n   */\n  setSpecialization(specializationId, options = {}) {\n    try {\n      if (!specializationId || typeof specializationId !== 'string') {\n        throw new Error('Invalid specialization ID');\n      }\n\n      const { preserveProgress = true } = options;\n\n      // Validate that the specialization is supported\n      const availableSpecializations = this.getAvailableSpecializations();\n      const isValid = availableSpecializations.some(\n        spec => spec.id === specializationId\n      );\n\n      if (!isValid) {\n        throw new Error(`Unsupported specialization: ${specializationId}`);\n      }\n\n      const previousSpecialization = this.getCurrentSpecialization();\n\n      // Preserve progress across specialization changes\n      if (\n        preserveProgress &&\n        previousSpecialization &&\n        previousSpecialization !== specializationId\n      ) {\n        this._preserveProgressAcrossSpecializations(\n          previousSpecialization,\n          specializationId\n        );\n      }\n\n      // Update state\n      this.stateManager.setState('specialization.current', specializationId);\n      this.stateManager.setState('specialization.hasSelected', true);\n\n      // Update last activity\n      this.stateManager.setState(\n        'progress.lastActivity',\n        new Date().toISOString()\n      );\n\n      // Log specialization change for analytics\n      this._logSpecializationChange(previousSpecialization, specializationId);\n\n      return true;\n    } catch (error) {\n      console.error('Error setting specialization:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Preserve progress when switching between specializations\n   * @private\n   * @param {string} fromSpecialization - Previous specialization\n   * @param {string} toSpecialization - New specialization\n   */\n  _preserveProgressAcrossSpecializations(fromSpecialization, toSpecialization) {\n    try {\n      const currentProgress = this.stateManager.getState('progress') || {};\n\n      // Create specialization-specific progress tracking if it doesn't exist\n      if (!currentProgress.specializationProgress) {\n        currentProgress.specializationProgress = {};\n      }\n\n      // Create three-tier category progress tracking if it doesn't exist\n      if (!currentProgress.threeTierCategoryProgress) {\n        currentProgress.threeTierCategoryProgress = {};\n      }\n\n      // Save current progress under the previous specialization\n      if (fromSpecialization) {\n        const progressSnapshot = {\n          modulesCompleted: [...(currentProgress.modulesCompleted || [])],\n          modulesInProgress: [...(currentProgress.modulesInProgress || [])],\n          quizAttempts: [...(currentProgress.quizAttempts || [])],\n          lastActivity: currentProgress.lastActivity,\n          savedAt: new Date().toISOString(),\n          // Add three-tier category breakdown\n          threeTierBreakdown:\n            this._categorizeProgressByThreeTier(currentProgress),\n        };\n\n        currentProgress.specializationProgress[fromSpecialization] =\n          progressSnapshot;\n      }\n\n      // Restore progress for the new specialization if it exists\n      if (currentProgress.specializationProgress[toSpecialization]) {\n        const savedProgress =\n          currentProgress.specializationProgress[toSpecialization];\n\n        // Merge saved progress with current general progress\n        const generalModules = this._getGeneralModules(\n          currentProgress.modulesCompleted || []\n        );\n        const generalInProgress = this._getGeneralModules(\n          currentProgress.modulesInProgress || []\n        );\n        const generalQuizzes = this._getGeneralQuizAttempts(\n          currentProgress.quizAttempts || []\n        );\n\n        currentProgress.modulesCompleted = [\n          ...generalModules,\n          ...savedProgress.modulesCompleted.filter(\n            id => !generalModules.includes(id)\n          ),\n        ];\n\n        currentProgress.modulesInProgress = [\n          ...generalInProgress,\n          ...savedProgress.modulesInProgress.filter(\n            id => !generalInProgress.includes(id)\n          ),\n        ];\n\n        currentProgress.quizAttempts = [\n          ...generalQuizzes,\n          ...savedProgress.quizAttempts.filter(\n            attempt =>\n              !generalQuizzes.some(general => general.quizId === attempt.quizId)\n          ),\n        ];\n\n        // Restore three-tier category progress if available\n        if (savedProgress.threeTierBreakdown) {\n          this._restoreThreeTierProgress(\n            currentProgress,\n            savedProgress.threeTierBreakdown\n          );\n        }\n      }\n\n      // Update the progress state\n      this.stateManager.setState('progress', currentProgress);\n    } catch (error) {\n      console.error('Error preserving progress across specializations:', error);\n    }\n  }\n\n  /**\n   * Categorize progress by three-tier categories\n   * @private\n   * @param {Object} progressData - Progress data to categorize\n   * @returns {Object} Progress categorized by three-tier system\n   */\n  _categorizeProgressByThreeTier(progressData) {\n    const breakdown = {\n      'daten-prozessanalyse': { modules: [], quizzes: [] },\n      anwendungsentwicklung: { modules: [], quizzes: [] },\n      allgemein: { modules: [], quizzes: [] },\n    };\n\n    // Categorize completed modules\n    (progressData.modulesCompleted || []).forEach(moduleId => {\n      const category = this._inferThreeTierCategoryFromId(moduleId);\n      breakdown[category].modules.push(moduleId);\n    });\n\n    // Categorize in-progress modules\n    (progressData.modulesInProgress || []).forEach(moduleId => {\n      const category = this._inferThreeTierCategoryFromId(moduleId);\n      if (!breakdown[category].modules.includes(moduleId)) {\n        breakdown[category].modules.push(moduleId);\n      }\n    });\n\n    // Categorize quiz attempts\n    (progressData.quizAttempts || []).forEach(attempt => {\n      const category = this._inferThreeTierCategoryFromId(attempt.quizId);\n      breakdown[category].quizzes.push(attempt);\n    });\n\n    return breakdown;\n  }\n\n  /**\n   * Infer three-tier category from content ID\n   * @private\n   * @param {string} contentId - Content ID to categorize\n   * @returns {string} Three-tier category\n   */\n  _inferThreeTierCategoryFromId(contentId) {\n    if (!contentId) return 'allgemein';\n\n    const idLower = contentId.toLowerCase();\n\n    if (idLower.includes('bp-dpa-') || idLower.includes('dpa-')) {\n      return 'daten-prozessanalyse';\n    }\n\n    if (idLower.includes('bp-ae-') || idLower.includes('ae-')) {\n      return 'anwendungsentwicklung';\n    }\n\n    return 'allgemein';\n  }\n\n  /**\n   * Restore three-tier category progress\n   * @private\n   * @param {Object} currentProgress - Current progress object to update\n   * @param {Object} threeTierBreakdown - Three-tier progress breakdown to restore\n   */\n  _restoreThreeTierProgress(currentProgress, threeTierBreakdown) {\n    if (!currentProgress.threeTierCategoryProgress) {\n      currentProgress.threeTierCategoryProgress = {};\n    }\n\n    // Store the breakdown for future reference\n    Object.keys(threeTierBreakdown).forEach(category => {\n      currentProgress.threeTierCategoryProgress[category] = {\n        ...threeTierBreakdown[category],\n        lastUpdated: new Date().toISOString(),\n      };\n    });\n  }\n\n  /**\n   * Get general modules from a list of module IDs\n   * @private\n   * @param {Array} moduleIds - Array of module IDs\n   * @returns {Array} Array of general module IDs\n   */\n  _getGeneralModules(moduleIds) {\n    return moduleIds.filter(moduleId => {\n      // General modules typically don't have specialization prefixes\n      // or are marked as general in categories\n      return (\n        (!moduleId.includes('bp-ae-') && !moduleId.includes('bp-dpa-')) ||\n        moduleId.includes('fue-') ||\n        moduleId.includes('general-')\n      );\n    });\n  }\n\n  /**\n   * Get general quiz attempts from a list of quiz attempts\n   * @private\n   * @param {Array} quizAttempts - Array of quiz attempts\n   * @returns {Array} Array of general quiz attempts\n   */\n  _getGeneralQuizAttempts(quizAttempts) {\n    return quizAttempts.filter(attempt => {\n      // General quizzes typically don't have specialization prefixes\n      return (\n        (!attempt.quizId.includes('bp-ae-') &&\n          !attempt.quizId.includes('bp-dpa-')) ||\n        attempt.quizId.includes('fue-') ||\n        attempt.quizId.includes('general-')\n      );\n    });\n  }\n\n  /**\n   * Log specialization change for analytics\n   * @private\n   * @param {string} fromSpecialization - Previous specialization\n   * @param {string} toSpecialization - New specialization\n   */\n  _logSpecializationChange(fromSpecialization, toSpecialization) {\n    try {\n      const changeLog = {\n        timestamp: new Date().toISOString(),\n        from: fromSpecialization,\n        to: toSpecialization,\n        userAgent: navigator.userAgent,\n        sessionId: this._getSessionId(),\n      };\n\n      // Store in analytics log (could be sent to analytics service)\n      const currentLogs =\n        this.stateManager.getState('analytics.specializationChanges') || [];\n      currentLogs.push(changeLog);\n\n      // Keep only last 10 changes to avoid storage bloat\n      if (currentLogs.length > 10) {\n        currentLogs.splice(0, currentLogs.length - 10);\n      }\n\n      this.stateManager.setState(\n        'analytics.specializationChanges',\n        currentLogs\n      );\n    } catch (error) {\n      console.error('Error logging specialization change:', error);\n    }\n  }\n\n  /**\n   * Get or create session ID for analytics\n   * @private\n   * @returns {string} Session ID\n   */\n  _getSessionId() {\n    let sessionId = this.stateManager.getState('session.id');\n    if (!sessionId) {\n      sessionId =\n        'session_' +\n        Date.now() +\n        '_' +\n        Math.random().toString(36).substring(2, 11);\n      this.stateManager.setState('session.id', sessionId);\n    }\n    return sessionId;\n  }\n\n  /**\n   * Get specialization configuration by ID\n   * @param {string} specializationId - The specialization ID\n   * @returns {Object|null} Specialization configuration or null if not found\n   */\n  getSpecializationConfig(specializationId) {\n    const availableSpecializations = this.getAvailableSpecializations();\n    return (\n      availableSpecializations.find(spec => spec.id === specializationId) ||\n      null\n    );\n  }\n\n  /**\n   * Get category relevance for a specific specialization\n   * @param {string} categoryId - The category ID\n   * @param {string} specializationId - The specialization ID\n   * @param {Object} options - Options for relevance calculation\n   * @param {boolean} options.useThreeTierCategories - Whether to use three-tier category system\n   * @returns {string} Relevance level: 'high', 'medium', 'low', 'none'\n   */\n  getCategoryRelevance(categoryId, specializationId, options = {}) {\n    if (!categoryId || !specializationId) {\n      return 'none';\n    }\n\n    const { useThreeTierCategories = false } = options;\n\n    // Use three-tier category relevance if requested and available\n    if (useThreeTierCategories || this._isThreeTierCategory(categoryId)) {\n      return this._getThreeTierCategoryRelevance(categoryId, specializationId);\n    }\n\n    // Use CategoryMappingService if available for enhanced relevance calculation\n    if (this.categoryMappingService) {\n      const threeTierRelevance =\n        this.categoryMappingService.getCategoryRelevance(\n          categoryId,\n          specializationId\n        );\n      if (threeTierRelevance !== 'none') {\n        return threeTierRelevance;\n      }\n    }\n\n    // Fallback to original category system\n    const category = this._findCategoryById(categoryId);\n\n    if (!category || !category.relevance) {\n      // Try to infer relevance from category naming patterns\n      return this._inferRelevanceFromCategoryName(categoryId, specializationId);\n    }\n\n    return category.relevance[specializationId] || 'none';\n  }\n\n  /**\n   * Check if a category ID belongs to the three-tier system\n   * @private\n   * @param {string} categoryId - Category ID to check\n   * @returns {boolean} True if it's a three-tier category\n   */\n  _isThreeTierCategory(categoryId) {\n    const threeTierCategories = [\n      'daten-prozessanalyse',\n      'anwendungsentwicklung',\n      'allgemein',\n    ];\n    return threeTierCategories.includes(categoryId);\n  }\n\n  /**\n   * Infer relevance from category naming patterns\n   * @private\n   * @param {string} categoryId - Category ID\n   * @param {string} specializationId - Specialization ID\n   * @returns {string} Inferred relevance level\n   */\n  _inferRelevanceFromCategoryName(categoryId, specializationId) {\n    const categoryLower = categoryId.toLowerCase();\n\n    // High relevance patterns\n    if (specializationId === 'daten-prozessanalyse') {\n      if (\n        categoryLower.includes('dpa') ||\n        categoryLower.includes('data') ||\n        categoryLower.includes('process') ||\n        categoryLower.includes('bi') ||\n        categoryLower.includes('etl') ||\n        categoryLower.includes('warehouse')\n      ) {\n        return 'high';\n      }\n    }\n\n    if (specializationId === 'anwendungsentwicklung') {\n      if (\n        categoryLower.includes('ae') ||\n        categoryLower.includes('app') ||\n        categoryLower.includes('dev') ||\n        categoryLower.includes('programming') ||\n        categoryLower.includes('software') ||\n        categoryLower.includes('code')\n      ) {\n        return 'high';\n      }\n    }\n\n    // Medium relevance for general IT topics\n    if (\n      categoryLower.includes('fue') ||\n      categoryLower.includes('general') ||\n      categoryLower.includes('grundlagen') ||\n      categoryLower.includes('basic')\n    ) {\n      return 'medium';\n    }\n\n    // Low relevance for cross-cutting concerns\n    if (\n      categoryLower.includes('security') ||\n      categoryLower.includes('network') ||\n      categoryLower.includes('system') ||\n      categoryLower.includes('project')\n    ) {\n      return 'low';\n    }\n\n    return 'none';\n  }\n\n  /**\n   * Get enhanced category relevance with detailed scoring\n   * @param {string} categoryId - The category ID\n   * @param {string} specializationId - The specialization ID\n   * @param {Object} options - Options for enhanced calculation\n   * @param {boolean} options.includeScore - Whether to include numerical score\n   * @param {boolean} options.includeReason - Whether to include reasoning\n   * @returns {Object|string} Enhanced relevance result or simple string\n   */\n  getEnhancedCategoryRelevance(categoryId, specializationId, options = {}) {\n    const { includeScore = false, includeReason = false } = options;\n\n    if (!includeScore && !includeReason) {\n      return this.getCategoryRelevance(categoryId, specializationId);\n    }\n\n    const relevance = this.getCategoryRelevance(categoryId, specializationId);\n    const result = { relevance };\n\n    if (includeScore) {\n      const scoreMap = { high: 3, medium: 2, low: 1, none: 0 };\n      result.score = scoreMap[relevance] || 0;\n    }\n\n    if (includeReason) {\n      result.reason = this._getRelevanceReason(\n        categoryId,\n        specializationId,\n        relevance\n      );\n    }\n\n    return result;\n  }\n\n  /**\n   * Get reason for relevance assignment\n   * @private\n   * @param {string} categoryId - Category ID\n   * @param {string} specializationId - Specialization ID\n   * @param {string} relevance - Assigned relevance level\n   * @returns {string} Reason for relevance assignment\n   */\n  _getRelevanceReason(categoryId, specializationId, relevance) {\n    if (this._isThreeTierCategory(categoryId)) {\n      if (categoryId === specializationId) {\n        return 'Direct specialization match in three-tier system';\n      }\n      if (categoryId === 'allgemein') {\n        return 'General content relevant to all specializations';\n      }\n      return 'Cross-specialization content in three-tier system';\n    }\n\n    if (this.categoryMappingService) {\n      return 'Calculated using category mapping service';\n    }\n\n    const category = this._findCategoryById(categoryId);\n    if (\n      category &&\n      category.relevance &&\n      category.relevance[specializationId]\n    ) {\n      return 'Defined in category metadata';\n    }\n\n    return 'Inferred from category naming patterns';\n  }\n\n  /**\n   * Calculate category-to-specialization relevance mapping for multiple categories\n   * @param {Array} categoryIds - Array of category IDs\n   * @param {Array} specializationIds - Array of specialization IDs\n   * @param {Object} options - Calculation options\n   * @param {boolean} options.useThreeTierCategories - Whether to use three-tier system\n   * @param {boolean} options.includeScores - Whether to include numerical scores\n   * @returns {Object} Relevance mapping matrix\n   */\n  calculateRelevanceMapping(categoryIds, specializationIds, options = {}) {\n    const { useThreeTierCategories = false, includeScores = false } = options;\n    const mapping = {};\n\n    categoryIds.forEach(categoryId => {\n      mapping[categoryId] = {};\n\n      specializationIds.forEach(specializationId => {\n        const relevanceOptions = { useThreeTierCategories };\n        const relevance = this.getCategoryRelevance(\n          categoryId,\n          specializationId,\n          relevanceOptions\n        );\n\n        if (includeScores) {\n          const scoreMap = { high: 3, medium: 2, low: 1, none: 0 };\n          mapping[categoryId][specializationId] = {\n            relevance,\n            score: scoreMap[relevance] || 0,\n          };\n        } else {\n          mapping[categoryId][specializationId] = relevance;\n        }\n      });\n    });\n\n    return mapping;\n  }\n\n  /**\n   * Ensure consistent relevance scoring across category systems\n   * @param {Object} contentItem - Content item to validate\n   * @param {Array} specializationIds - Specializations to check consistency for\n   * @returns {Object} Consistency validation result\n   */\n  validateRelevanceConsistency(contentItem, specializationIds) {\n    const result = {\n      isConsistent: true,\n      inconsistencies: [],\n      recommendations: [],\n    };\n\n    if (!contentItem) {\n      result.isConsistent = false;\n      result.inconsistencies.push('No content item provided');\n      return result;\n    }\n\n    const originalCategory = contentItem.category || contentItem.categoryId;\n    const threeTierCategory =\n      contentItem.threeTierCategory ||\n      this._inferThreeTierCategory(contentItem);\n\n    specializationIds.forEach(specializationId => {\n      const originalRelevance = originalCategory\n        ? this.getCategoryRelevance(originalCategory, specializationId)\n        : 'none';\n\n      const threeTierRelevance = this._getThreeTierCategoryRelevance(\n        threeTierCategory,\n        specializationId\n      );\n\n      // Check for major inconsistencies (high vs low, etc.)\n      const relevanceScores = { high: 3, medium: 2, low: 1, none: 0 };\n      const originalScore = relevanceScores[originalRelevance] || 0;\n      const threeTierScore = relevanceScores[threeTierRelevance] || 0;\n      const scoreDifference = Math.abs(originalScore - threeTierScore);\n\n      if (scoreDifference > 1) {\n        result.isConsistent = false;\n        result.inconsistencies.push({\n          specializationId,\n          originalCategory,\n          originalRelevance,\n          threeTierCategory,\n          threeTierRelevance,\n          scoreDifference,\n        });\n\n        // Provide recommendations\n        if (originalScore > threeTierScore) {\n          result.recommendations.push(\n            `Consider reviewing three-tier mapping for ${contentItem.id}: original relevance (${originalRelevance}) higher than three-tier (${threeTierRelevance})`\n          );\n        } else {\n          result.recommendations.push(\n            `Consider reviewing original category for ${contentItem.id}: three-tier relevance (${threeTierRelevance}) higher than original (${originalRelevance})`\n          );\n        }\n      }\n    });\n\n    return result;\n  }\n\n  /**\n   * Find category by ID in the categories data\n   * @private\n   * @param {string} categoryId - The category ID to find\n   * @returns {Object|null} Category object or null if not found\n   */\n  _findCategoryById(categoryId) {\n    // Search in main categories\n    for (const category of this.categoriesData.categories) {\n      if (category.id === categoryId) {\n        return category;\n      }\n\n      // Search in subcategories\n      if (category.subcategories) {\n        for (const subcategory of category.subcategories) {\n          if (subcategory.id === categoryId) {\n            return subcategory;\n          }\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Filter content array based on specialization and category relevance\n   * @param {Array} content - Array of content items (modules, quizzes, etc.)\n   * @param {string} specializationId - The specialization ID to filter for\n   * @param {Object} options - Filtering options\n   * @param {string} options.minRelevance - Minimum relevance level ('high', 'medium', 'low')\n   * @param {boolean} options.includeGeneral - Whether to include general content\n   * @param {boolean} options.useThreeTierCategories - Whether to use three-tier category system\n   * @returns {Array} Filtered content array\n   */\n  filterContentBySpecialization(content, specializationId, options = {}) {\n    if (!Array.isArray(content) || !specializationId) {\n      return content || [];\n    }\n\n    const {\n      minRelevance = 'low',\n      includeGeneral = true,\n      useThreeTierCategories = false,\n    } = options;\n\n    const relevanceLevels = {\n      high: 3,\n      medium: 2,\n      low: 1,\n      none: 0,\n    };\n\n    const minRelevanceScore = relevanceLevels[minRelevance] || 1;\n\n    return content.filter(item => {\n      // If item doesn't have category information, include it by default\n      if (!item.category && !item.categoryId && !item.threeTierCategory) {\n        return true;\n      }\n\n      let relevance;\n      let categoryId;\n\n      if (useThreeTierCategories && item.threeTierCategory) {\n        // Use three-tier category system\n        categoryId = item.threeTierCategory;\n        relevance = this.categoryMappingService\n          ? this.categoryMappingService.getCategoryRelevance(\n              categoryId,\n              specializationId\n            )\n          : this._getThreeTierCategoryRelevance(categoryId, specializationId);\n      } else {\n        // Use original category system\n        categoryId = item.category || item.categoryId;\n        relevance = this.getCategoryRelevance(categoryId, specializationId);\n      }\n\n      const relevanceScore = relevanceLevels[relevance] || 0;\n\n      // Include if relevance meets minimum threshold\n      if (relevanceScore >= minRelevanceScore) {\n        return true;\n      }\n\n      // Include general content if option is enabled\n      if (\n        includeGeneral &&\n        this._isGeneralContent(categoryId, useThreeTierCategories)\n      ) {\n        return true;\n      }\n\n      return false;\n    });\n  }\n\n  /**\n   * Filter content array using three-tier categories\n   * @param {Array} content - Array of content items (modules, quizzes, etc.)\n   * @param {string} specializationId - The specialization ID to filter for\n   * @param {Object} options - Filtering options\n   * @param {string} options.minRelevance - Minimum relevance level ('high', 'medium', 'low')\n   * @param {boolean} options.includeGeneral - Whether to include general content\n   * @param {string} options.threeTierCategory - Specific three-tier category to filter by\n   * @returns {Array} Filtered content array\n   */\n  filterContentByThreeTierCategory(content, specializationId, options = {}) {\n    if (!Array.isArray(content) || !specializationId) {\n      return content || [];\n    }\n\n    const {\n      minRelevance = 'low',\n      includeGeneral = true,\n      threeTierCategory = null,\n    } = options;\n\n    // If specific category is requested, filter by that category\n    if (threeTierCategory) {\n      return content.filter(item => {\n        const itemCategory =\n          item.threeTierCategory || this._inferThreeTierCategory(item);\n        return itemCategory === threeTierCategory;\n      });\n    }\n\n    // Otherwise use general three-tier filtering\n    return this.filterContentBySpecialization(content, specializationId, {\n      ...options,\n      useThreeTierCategories: true,\n    });\n  }\n\n  /**\n   * Infer three-tier category from content item if not explicitly set\n   * @private\n   * @param {Object} item - Content item\n   * @returns {string} Inferred three-tier category\n   */\n  _inferThreeTierCategory(item) {\n    if (this.categoryMappingService) {\n      const mappingResult =\n        this.categoryMappingService.mapToThreeTierCategory(item);\n      return mappingResult.threeTierCategory;\n    }\n\n    // Fallback inference based on category patterns\n    const category = item.category || item.categoryId || '';\n\n    if (/^(BP-DPA-|bp-dpa-)/i.test(category)) {\n      return 'daten-prozessanalyse';\n    }\n\n    if (/^(BP-AE-|bp-ae-)/i.test(category)) {\n      return 'anwendungsentwicklung';\n    }\n\n    return 'allgemein';\n  }\n\n  /**\n   * Check if content is general (applies to all specializations)\n   * @private\n   * @param {string} categoryId - The category ID to check\n   * @param {boolean} useThreeTierCategories - Whether to use three-tier category logic\n   * @returns {boolean} True if content is general\n   */\n  _isGeneralContent(categoryId, useThreeTierCategories = false) {\n    if (useThreeTierCategories) {\n      // In three-tier system, 'allgemein' category is general content\n      return categoryId === 'allgemein';\n    }\n\n    const category = this._findCategoryById(categoryId);\n\n    if (!category) {\n      return false;\n    }\n\n    // Check if category has high relevance for all supported specializations\n    const supportedSpecializations =\n      this.categoriesData.supportedSpecializations || [];\n\n    return supportedSpecializations.every(specializationId => {\n      const relevance = category.relevance?.[specializationId];\n      return relevance === 'high' || relevance === 'medium';\n    });\n  }\n\n  /**\n   * Get content statistics by specialization for three-tier categories\n   * @param {Array} content - Array of content items\n   * @param {string} specializationId - The specialization ID\n   * @param {Object} options - Options for statistics calculation\n   * @param {boolean} options.useThreeTierCategories - Whether to use three-tier categories\n   * @param {boolean} options.includeProgress - Whether to include progress information\n   * @returns {Object} Content statistics object\n   */\n  getContentStatsBySpecialization(content, specializationId, options = {}) {\n    if (!Array.isArray(content) || !specializationId) {\n      return {\n        totalItems: 0,\n        categories: {},\n        relevanceDistribution: {},\n        contentTypes: {},\n      };\n    }\n\n    const { useThreeTierCategories = false, includeProgress = false } = options;\n\n    const stats = {\n      totalItems: content.length,\n      categories: {},\n      relevanceDistribution: {\n        high: 0,\n        medium: 0,\n        low: 0,\n        none: 0,\n      },\n      contentTypes: {\n        modules: 0,\n        quizzes: 0,\n        other: 0,\n      },\n    };\n\n    // Get progress data if requested\n    let progressData = null;\n    if (includeProgress) {\n      progressData = this.stateManager.getState('progress') || {};\n    }\n\n    content.forEach(item => {\n      // Determine category and relevance\n      let categoryId, relevance;\n\n      if (useThreeTierCategories) {\n        categoryId =\n          item.threeTierCategory || this._inferThreeTierCategory(item);\n        relevance = this.categoryMappingService\n          ? this.categoryMappingService.getCategoryRelevance(\n              categoryId,\n              specializationId\n            )\n          : this._getThreeTierCategoryRelevance(categoryId, specializationId);\n      } else {\n        categoryId = item.category || item.categoryId || 'unknown';\n        relevance = this.getCategoryRelevance(categoryId, specializationId);\n      }\n\n      // Count by category\n      if (!stats.categories[categoryId]) {\n        stats.categories[categoryId] = {\n          count: 0,\n          relevance: relevance,\n          items: [],\n        };\n      }\n      stats.categories[categoryId].count++;\n      stats.categories[categoryId].items.push(item.id || 'unknown');\n\n      // Count by relevance\n      stats.relevanceDistribution[relevance] =\n        (stats.relevanceDistribution[relevance] || 0) + 1;\n\n      // Count by content type\n      const contentType = this._inferContentType(item);\n      stats.contentTypes[contentType] =\n        (stats.contentTypes[contentType] || 0) + 1;\n\n      // Add progress information if requested\n      if (includeProgress && progressData) {\n        if (!stats.categories[categoryId].progress) {\n          stats.categories[categoryId].progress = {\n            completed: 0,\n            inProgress: 0,\n            notStarted: 0,\n          };\n        }\n\n        const itemId = item.id;\n        if (progressData.modulesCompleted?.includes(itemId)) {\n          stats.categories[categoryId].progress.completed++;\n        } else if (progressData.modulesInProgress?.includes(itemId)) {\n          stats.categories[categoryId].progress.inProgress++;\n        } else {\n          stats.categories[categoryId].progress.notStarted++;\n        }\n      }\n    });\n\n    // Calculate additional metrics\n    stats.specializationRelevance = {\n      highRelevancePercentage: (\n        (stats.relevanceDistribution.high / stats.totalItems) *\n        100\n      ).toFixed(1),\n      mediumRelevancePercentage: (\n        (stats.relevanceDistribution.medium / stats.totalItems) *\n        100\n      ).toFixed(1),\n      lowRelevancePercentage: (\n        (stats.relevanceDistribution.low / stats.totalItems) *\n        100\n      ).toFixed(1),\n    };\n\n    // Add category metadata if using three-tier system\n    if (useThreeTierCategories) {\n      stats.categoryMetadata =\n        this._getThreeTierCategoryMetadata(specializationId);\n    }\n\n    return stats;\n  }\n\n  /**\n   * Get metadata for three-tier categories\n   * @private\n   * @param {string} specializationId - The specialization ID\n   * @returns {Object} Category metadata object\n   */\n  _getThreeTierCategoryMetadata(specializationId) {\n    const categories = this.getThreeTierContentCategories(specializationId);\n    const metadata = {};\n\n    categories.forEach(category => {\n      metadata[category.id] = {\n        name: category.name,\n        description: category.description,\n        color: category.color,\n        icon: category.icon,\n        relevance: category.relevance,\n        isSpecializationSpecific: category.id === specializationId,\n        isGeneral: category.id === 'allgemein',\n      };\n    });\n\n    return metadata;\n  }\n\n  /**\n   * Infer content type from item structure\n   * @private\n   * @param {Object} item - Content item\n   * @returns {string} Content type ('modules', 'quizzes', 'other')\n   */\n  _inferContentType(item) {\n    if (item.questions && Array.isArray(item.questions)) {\n      return 'quizzes';\n    }\n    if (item.content || item.sections || item.modules) {\n      return 'modules';\n    }\n    return 'other';\n  }\n\n  /**\n   * Get content categories for display/filtering\n   * @param {string} specializationId - The specialization ID\n   * @returns {Array} Array of category objects with relevance information\n   */\n  getContentCategories(specializationId) {\n    if (!specializationId) {\n      return [];\n    }\n\n    const categories = [];\n\n    // Add general category\n    categories.push({\n      id: 'general',\n      name: 'Allgemein',\n      description: 'Fachrichtungsübergreifende Inhalte',\n      color: '#6b7280',\n      relevance: 'high',\n    });\n\n    // Add specialization-specific categories\n    for (const category of this.categoriesData.categories) {\n      const relevance = this.getCategoryRelevance(\n        category.id,\n        specializationId\n      );\n\n      if (relevance !== 'none') {\n        categories.push({\n          id: category.id,\n          name: category.name,\n          description: category.description,\n          color: category.color,\n          relevance: relevance,\n        });\n      }\n    }\n\n    return categories;\n  }\n\n  /**\n   * Get three-tier content categories for display/filtering\n   * @param {string} specializationId - The specialization ID\n   * @returns {Array} Array of three-tier category objects with relevance information\n   */\n  getThreeTierContentCategories(specializationId) {\n    if (!specializationId) {\n      return [];\n    }\n\n    // Get three-tier categories from CategoryMappingService if available\n    if (this.categoryMappingService) {\n      const threeTierCategories =\n        this.categoryMappingService.getThreeTierCategories();\n\n      return threeTierCategories.map(category => ({\n        id: category.id,\n        name: category.name,\n        description: category.description,\n        color: category.color,\n        icon: category.icon,\n        relevance: this.categoryMappingService.getCategoryRelevance(\n          category.id,\n          specializationId\n        ),\n      }));\n    }\n\n    // Fallback to hardcoded three-tier categories if service not available\n    const fallbackCategories = [\n      {\n        id: 'daten-prozessanalyse',\n        name: 'Daten und Prozessanalyse',\n        description:\n          'Inhalte mit hoher Relevanz für die Fachrichtung Daten- und Prozessanalyse',\n        color: '#3b82f6',\n        icon: '📊',\n      },\n      {\n        id: 'anwendungsentwicklung',\n        name: 'Anwendungsentwicklung',\n        description:\n          'Inhalte mit hoher Relevanz für die Fachrichtung Anwendungsentwicklung',\n        color: '#10b981',\n        icon: '💻',\n      },\n      {\n        id: 'allgemein',\n        name: 'Allgemein',\n        description:\n          'Fachrichtungsübergreifende Inhalte und Grundlagen für beide Spezialisierungen',\n        color: '#6b7280',\n        icon: '📚',\n      },\n    ];\n\n    return fallbackCategories.map(category => ({\n      ...category,\n      relevance: this._getThreeTierCategoryRelevance(\n        category.id,\n        specializationId\n      ),\n    }));\n  }\n\n  /**\n   * Get relevance for three-tier categories (fallback implementation)\n   * @private\n   * @param {string} categoryId - Three-tier category ID\n   * @param {string} specializationId - Specialization ID\n   * @returns {string} Relevance level\n   */\n  _getThreeTierCategoryRelevance(categoryId, specializationId) {\n    const relevanceMap = {\n      'daten-prozessanalyse': {\n        'daten-prozessanalyse': 'high',\n        anwendungsentwicklung: 'low',\n      },\n      anwendungsentwicklung: {\n        anwendungsentwicklung: 'high',\n        'daten-prozessanalyse': 'low',\n      },\n      allgemein: {\n        anwendungsentwicklung: 'high',\n        'daten-prozessanalyse': 'high',\n      },\n    };\n\n    return relevanceMap[categoryId]?.[specializationId] || 'none';\n  }\n\n  /**\n   * Get user's content filtering preferences\n   * @returns {Object} User preferences object\n   */\n  getPreferences() {\n    const specializationState = this.stateManager.getState('specialization');\n    return (\n      specializationState?.preferences || {\n        showAllContent: false,\n        preferredCategories: [],\n      }\n    );\n  }\n\n  /**\n   * Update user's content filtering preferences\n   * @param {Object} preferences - Preferences object\n   * @param {boolean} preferences.showAllContent - Whether to show all content\n   * @param {Array} preferences.preferredCategories - Array of preferred category IDs\n   * @returns {boolean} True if successful\n   */\n  setPreferences(preferences) {\n    try {\n      if (!preferences || typeof preferences !== 'object') {\n        throw new Error('Invalid preferences object');\n      }\n\n      const currentPreferences = this.getPreferences();\n      const updatedPreferences = {\n        ...currentPreferences,\n        ...preferences,\n      };\n\n      this.stateManager.setState(\n        'specialization.preferences',\n        updatedPreferences\n      );\n      return true;\n    } catch (error) {\n      console.error('Error setting preferences:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Reset specialization selection (for testing or user reset)\n   * @returns {boolean} True if successful\n   */\n  resetSpecialization() {\n    try {\n      this.stateManager.setState('specialization', {\n        current: null,\n        hasSelected: false,\n        preferences: {\n          showAllContent: false,\n          preferredCategories: [],\n        },\n      });\n\n      return true;\n    } catch (error) {\n      console.error('Error resetting specialization:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Migrate existing users to have a default specialization\n   * This method should be called during app initialization for backward compatibility\n   * @param {string} defaultSpecialization - Default specialization for existing users\n   * @returns {Object} Migration result with status and details\n   */\n  migrateExistingUser(defaultSpecialization = 'anwendungsentwicklung') {\n    try {\n      // Check if migration has already been performed\n      const migrationStatus = this.stateManager.getState(\n        'migration.specialization'\n      );\n      if (migrationStatus && migrationStatus.completed) {\n        return {\n          performed: false,\n          reason: 'already_migrated',\n          timestamp: migrationStatus.timestamp,\n          version: migrationStatus.version,\n        };\n      }\n\n      const specializationState = this.stateManager.getState('specialization');\n      const progress = this.stateManager.getState('progress');\n\n      // Check if user has existing progress but no specialization set\n      const hasExistingProgress =\n        progress &&\n        ((progress.modulesCompleted && progress.modulesCompleted.length > 0) ||\n          (progress.modulesInProgress &&\n            progress.modulesInProgress.length > 0) ||\n          (progress.quizAttempts && progress.quizAttempts.length > 0));\n\n      // Check if user has any stored preferences or settings (indicates existing user)\n      const hasExistingSettings = this._hasExistingUserData();\n\n      // Determine if migration is needed\n      const needsMigration =\n        (hasExistingProgress || hasExistingSettings) &&\n        (!specializationState || !specializationState.hasSelected);\n\n      if (needsMigration) {\n        // Perform migration\n        const migrationResult = this._performMigration(defaultSpecialization, {\n          hasExistingProgress,\n          hasExistingSettings,\n          progressData: progress,\n        });\n\n        // Record migration status\n        this._recordMigrationStatus(migrationResult);\n\n        console.warn(\n          `✅ Migrated existing user to specialization: ${defaultSpecialization}`\n        );\n\n        return {\n          performed: true,\n          reason: 'existing_user_detected',\n          specialization: defaultSpecialization,\n          preservedProgress: migrationResult.preservedProgress,\n          timestamp: new Date().toISOString(),\n        };\n      }\n\n      // No migration needed - new user or already has specialization\n      return {\n        performed: false,\n        reason: specializationState?.hasSelected\n          ? 'already_has_specialization'\n          : 'new_user',\n        currentSpecialization: specializationState?.current || null,\n      };\n    } catch (error) {\n      console.error('❌ Error migrating existing user:', error);\n\n      // Record failed migration attempt\n      this._recordMigrationStatus({\n        success: false,\n        error: error.message,\n        timestamp: new Date().toISOString(),\n      });\n\n      return {\n        performed: false,\n        reason: 'migration_error',\n        error: error.message,\n      };\n    }\n  }\n\n  /**\n   * Check if user has existing data that indicates they're not a new user\n   * @private\n   * @returns {boolean} True if existing user data is found\n   */\n  _hasExistingUserData() {\n    try {\n      // Check for theme preferences\n      const themePreference = this.storage.get('theme-preference');\n\n      // Check for any stored state data\n      const storedState = this.storage.get('app-state');\n\n      // Check for any analytics or session data\n      const sessionData = this.stateManager.getState('session');\n      const analyticsData = this.stateManager.getState('analytics');\n\n      // Check for any exam progress data\n      const examProgress = this.stateManager.getState('examProgress');\n\n      return !!(\n        themePreference ||\n        storedState ||\n        sessionData ||\n        analyticsData ||\n        examProgress\n      );\n    } catch (error) {\n      console.warn('Error checking existing user data:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Perform the actual migration process\n   * @private\n   * @param {string} defaultSpecialization - The specialization to assign\n   * @param {Object} context - Migration context with user data\n   * @returns {Object} Migration result\n   */\n  _performMigration(defaultSpecialization, context) {\n    const { hasExistingProgress, progressData } = context;\n\n    // Set the specialization (this will preserve progress automatically)\n    const success = this.setSpecialization(defaultSpecialization, {\n      preserveProgress: true,\n    });\n\n    if (!success) {\n      throw new Error('Failed to set specialization during migration');\n    }\n\n    // Analyze and categorize existing progress\n    const progressAnalysis = this._analyzeExistingProgress(progressData);\n\n    // Perform three-tier category migration if CategoryMappingService is available\n    let threeTierMigration = null;\n    if (this.categoryMappingService && hasExistingProgress) {\n      threeTierMigration = this._migrateToThreeTierCategories(progressData);\n    }\n\n    // Update progress metadata to include migration information\n    if (hasExistingProgress) {\n      const currentProgress = this.stateManager.getState('progress') || {};\n      currentProgress.migrationInfo = {\n        migratedAt: new Date().toISOString(),\n        originalProgress: progressAnalysis,\n        assignedSpecialization: defaultSpecialization,\n        preservedItems: {\n          modules: progressAnalysis.totalModules,\n          quizzes: progressAnalysis.totalQuizAttempts,\n        },\n        threeTierMigration: threeTierMigration,\n      };\n\n      this.stateManager.setState('progress', currentProgress);\n    }\n\n    return {\n      success: true,\n      preservedProgress: progressAnalysis,\n      assignedSpecialization: defaultSpecialization,\n      threeTierMigration: threeTierMigration,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  /**\n   * Migrate existing progress to three-tier category system\n   * @private\n   * @param {Object} progressData - Progress data to migrate\n   * @returns {Object} Migration result for three-tier categories\n   */\n  _migrateToThreeTierCategories(progressData) {\n    if (!progressData || !this.categoryMappingService) {\n      return null;\n    }\n\n    const migration = {\n      status: 'success',\n      migratedItems: 0,\n      categoryMapping: {},\n      errors: [],\n    };\n\n    try {\n      // Create three-tier progress structure\n      const threeTierProgress = {\n        'daten-prozessanalyse': { modules: [], quizzes: [] },\n        anwendungsentwicklung: { modules: [], quizzes: [] },\n        allgemein: { modules: [], quizzes: [] },\n      };\n\n      // Migrate completed modules\n      (progressData.modulesCompleted || []).forEach(moduleId => {\n        try {\n          const mockItem = {\n            id: moduleId,\n            category: this._extractCategoryFromId(moduleId),\n          };\n          const mappingResult =\n            this.categoryMappingService.mapToThreeTierCategory(mockItem);\n          const category = mappingResult.threeTierCategory;\n\n          threeTierProgress[category].modules.push(moduleId);\n          migration.categoryMapping[moduleId] = category;\n          migration.migratedItems++;\n        } catch (error) {\n          migration.errors.push(\n            `Failed to migrate module ${moduleId}: ${error.message}`\n          );\n        }\n      });\n\n      // Migrate in-progress modules\n      (progressData.modulesInProgress || []).forEach(moduleId => {\n        try {\n          const mockItem = {\n            id: moduleId,\n            category: this._extractCategoryFromId(moduleId),\n          };\n          const mappingResult =\n            this.categoryMappingService.mapToThreeTierCategory(mockItem);\n          const category = mappingResult.threeTierCategory;\n\n          if (!threeTierProgress[category].modules.includes(moduleId)) {\n            threeTierProgress[category].modules.push(moduleId);\n          }\n\n          if (!migration.categoryMapping[moduleId]) {\n            migration.categoryMapping[moduleId] = category;\n            migration.migratedItems++;\n          }\n        } catch (error) {\n          migration.errors.push(\n            `Failed to migrate in-progress module ${moduleId}: ${error.message}`\n          );\n        }\n      });\n\n      // Migrate quiz attempts\n      (progressData.quizAttempts || []).forEach(attempt => {\n        try {\n          const mockItem = {\n            id: attempt.quizId,\n            category: this._extractCategoryFromId(attempt.quizId),\n          };\n          const mappingResult =\n            this.categoryMappingService.mapToThreeTierCategory(mockItem);\n          const category = mappingResult.threeTierCategory;\n\n          threeTierProgress[category].quizzes.push(attempt);\n          migration.categoryMapping[attempt.quizId] = category;\n          migration.migratedItems++;\n        } catch (error) {\n          migration.errors.push(\n            `Failed to migrate quiz ${attempt.quizId}: ${error.message}`\n          );\n        }\n      });\n\n      // Store the three-tier progress\n      const currentProgress = this.stateManager.getState('progress') || {};\n      currentProgress.threeTierCategoryProgress = threeTierProgress;\n      this.stateManager.setState('progress', currentProgress);\n\n      // Set status based on errors\n      if (migration.errors.length > 0) {\n        migration.status =\n          migration.errors.length === migration.migratedItems\n            ? 'failed'\n            : 'partial';\n      }\n\n      migration.threeTierProgress = threeTierProgress;\n    } catch (error) {\n      migration.status = 'failed';\n      migration.errors.push(`Migration failed: ${error.message}`);\n    }\n\n    return migration;\n  }\n\n  /**\n   * Extract category from content ID\n   * @private\n   * @param {string} contentId - Content ID\n   * @returns {string} Extracted category or inferred category\n   */\n  _extractCategoryFromId(contentId) {\n    if (!contentId) return '';\n\n    // Extract category from common ID patterns\n    const patterns = [\n      /^(BP-[A-Z]+-\\d+)/i, // BP-AE-01, BP-DPA-02\n      /^(bp-[a-z]+-\\d+)/i, // bp-ae-01, bp-dpa-02\n      /^(FÜ-\\d+)/i, // FÜ-01\n      /^(fue-\\d+)/i, // fue-01\n    ];\n\n    for (const pattern of patterns) {\n      const match = contentId.match(pattern);\n      if (match) {\n        return match[1];\n      }\n    }\n\n    // Fallback: use the first part before any delimiter\n    const parts = contentId.split(/[-_]/);\n    return parts.length > 1 ? parts.slice(0, 2).join('-') : contentId;\n  }\n\n  /**\n   * Analyze existing progress data for migration reporting\n   * @private\n   * @param {Object} progressData - The progress data to analyze\n   * @returns {Object} Analysis results\n   */\n  _analyzeExistingProgress(progressData) {\n    if (!progressData) {\n      return {\n        totalModules: 0,\n        totalQuizAttempts: 0,\n        generalContent: 0,\n        specializationContent: 0,\n      };\n    }\n\n    const modulesCompleted = progressData.modulesCompleted || [];\n    const modulesInProgress = progressData.modulesInProgress || [];\n    const quizAttempts = progressData.quizAttempts || [];\n\n    // Categorize modules\n    const allModules = [\n      ...new Set([...modulesCompleted, ...modulesInProgress]),\n    ];\n    const generalModules = this._getGeneralModules(allModules);\n    const specializationModules = allModules.filter(\n      id => !generalModules.includes(id)\n    );\n\n    // Categorize quiz attempts\n    const generalQuizzes = this._getGeneralQuizAttempts(quizAttempts);\n    const specializationQuizzes = quizAttempts.filter(\n      attempt =>\n        !generalQuizzes.some(general => general.quizId === attempt.quizId)\n    );\n\n    return {\n      totalModules: allModules.length,\n      totalQuizAttempts: quizAttempts.length,\n      generalContent: generalModules.length + generalQuizzes.length,\n      specializationContent:\n        specializationModules.length + specializationQuizzes.length,\n      breakdown: {\n        modules: {\n          completed: modulesCompleted.length,\n          inProgress: modulesInProgress.length,\n          general: generalModules.length,\n          specialization: specializationModules.length,\n        },\n        quizzes: {\n          total: quizAttempts.length,\n          general: generalQuizzes.length,\n          specialization: specializationQuizzes.length,\n        },\n      },\n    };\n  }\n\n  /**\n   * Record migration status for tracking and preventing duplicate migrations\n   * @private\n   * @param {Object} migrationResult - The result of the migration\n   */\n  _recordMigrationStatus(migrationResult) {\n    try {\n      const migrationRecord = {\n        completed: migrationResult.success,\n        timestamp: migrationResult.timestamp || new Date().toISOString(),\n        version: '1.0.0', // Migration version for future compatibility\n        result: migrationResult,\n        userAgent: navigator.userAgent,\n        sessionId: this._getSessionId(),\n      };\n\n      // Store migration status\n      this.stateManager.setState('migration.specialization', migrationRecord);\n\n      // Also add to migration history for analytics\n      const migrationHistory =\n        this.stateManager.getState('migration.history') || [];\n      migrationHistory.push(migrationRecord);\n\n      // Keep only last 5 migration records to avoid storage bloat\n      if (migrationHistory.length > 5) {\n        migrationHistory.splice(0, migrationHistory.length - 5);\n      }\n\n      this.stateManager.setState('migration.history', migrationHistory);\n    } catch (error) {\n      console.error('Error recording migration status:', error);\n    }\n  }\n\n  /**\n   * Get migration status for the current user\n   * @returns {Object|null} Migration status or null if no migration performed\n   */\n  getMigrationStatus() {\n    return this.stateManager.getState('migration.specialization') || null;\n  }\n\n  /**\n   * Check if user has been migrated\n   * @returns {boolean} True if user has been migrated\n   */\n  hasMigrated() {\n    const migrationStatus = this.getMigrationStatus();\n    return migrationStatus && migrationStatus.completed;\n  }\n\n  /**\n   * Ensure backward compatibility with existing method signatures\n   * This method maintains the original filterContentBySpecialization behavior\n   * @param {Array} content - Array of content items\n   * @param {string} specializationId - The specialization ID\n   * @param {Object} options - Filtering options (original format)\n   * @returns {Array} Filtered content array\n   */\n  filterContentBySpecializationLegacy(content, specializationId, options = {}) {\n    // Ensure we don't use three-tier categories for legacy calls\n    const legacyOptions = {\n      ...options,\n      useThreeTierCategories: false,\n    };\n\n    return this.filterContentBySpecialization(\n      content,\n      specializationId,\n      legacyOptions\n    );\n  }\n\n  /**\n   * Get content categories in legacy format for backward compatibility\n   * @param {string} specializationId - The specialization ID\n   * @returns {Array} Array of category objects in legacy format\n   */\n  getContentCategoriesLegacy(specializationId) {\n    // This maintains the original getContentCategories behavior\n    return this.getContentCategories(specializationId);\n  }\n\n  /**\n   * Check if three-tier category system is available and enabled\n   * @returns {boolean} True if three-tier system is available\n   */\n  isThreeTierSystemAvailable() {\n    return this.categoryMappingService !== null;\n  }\n\n  /**\n   * Get migration support status for three-tier system\n   * @returns {Object} Migration support information\n   */\n  getThreeTierMigrationSupport() {\n    const currentProgress = this.stateManager.getState('progress') || {};\n    const migrationInfo = currentProgress.migrationInfo || {};\n\n    return {\n      isAvailable: this.isThreeTierSystemAvailable(),\n      hasMigrated: !!migrationInfo.threeTierMigration,\n      migrationStatus:\n        migrationInfo.threeTierMigration?.status || 'not_started',\n      lastMigration: migrationInfo.migratedAt || null,\n      progressPreserved: !!currentProgress.threeTierCategoryProgress,\n    };\n  }\n\n  /**\n   * Validate that existing functionality still works after three-tier integration\n   * @returns {Object} Validation result\n   */\n  validateBackwardCompatibility() {\n    const validation = {\n      status: 'success',\n      tests: [],\n      errors: [],\n      warnings: [],\n    };\n\n    try {\n      // Test 1: Original method signatures still work\n      const testSpecialization = 'anwendungsentwicklung';\n\n      // Test getAvailableSpecializations\n      const specializations = this.getAvailableSpecializations();\n      validation.tests.push({\n        name: 'getAvailableSpecializations',\n        passed: Array.isArray(specializations) && specializations.length > 0,\n        result: `Found ${specializations.length} specializations`,\n      });\n\n      // Test getCurrentSpecialization\n      const current = this.getCurrentSpecialization();\n      validation.tests.push({\n        name: 'getCurrentSpecialization',\n        passed: typeof current === 'string' || current === null,\n        result: `Current: ${current}`,\n      });\n\n      // Test getCategoryRelevance with original parameters\n      const relevance = this.getCategoryRelevance(\n        'BP-AE-01',\n        testSpecialization\n      );\n      validation.tests.push({\n        name: 'getCategoryRelevance (legacy)',\n        passed: ['high', 'medium', 'low', 'none'].includes(relevance),\n        result: `Relevance: ${relevance}`,\n      });\n\n      // Test getContentCategories\n      const categories = this.getContentCategories(testSpecialization);\n      validation.tests.push({\n        name: 'getContentCategories',\n        passed: Array.isArray(categories),\n        result: `Found ${categories.length} categories`,\n      });\n\n      // Test filterContentBySpecialization with mock data\n      const mockContent = [\n        { id: 'test1', category: 'BP-AE-01' },\n        { id: 'test2', category: 'BP-DPA-01' },\n        { id: 'test3', category: 'FÜ-01' },\n      ];\n\n      const filtered = this.filterContentBySpecialization(\n        mockContent,\n        testSpecialization\n      );\n      validation.tests.push({\n        name: 'filterContentBySpecialization',\n        passed: Array.isArray(filtered),\n        result: `Filtered ${mockContent.length} to ${filtered.length} items`,\n      });\n\n      // Check for any failed tests\n      const failedTests = validation.tests.filter(test => !test.passed);\n      if (failedTests.length > 0) {\n        validation.status = 'error';\n        validation.errors.push(\n          `${failedTests.length} backward compatibility tests failed`\n        );\n      }\n\n      // Test three-tier integration if available\n      if (this.isThreeTierSystemAvailable()) {\n        const threeTierCategories =\n          this.getThreeTierContentCategories(testSpecialization);\n        validation.tests.push({\n          name: 'getThreeTierContentCategories',\n          passed:\n            Array.isArray(threeTierCategories) &&\n            threeTierCategories.length === 3,\n          result: `Found ${threeTierCategories.length} three-tier categories`,\n        });\n\n        const threeTierFiltered = this.filterContentByThreeTierCategory(\n          mockContent,\n          testSpecialization\n        );\n        validation.tests.push({\n          name: 'filterContentByThreeTierCategory',\n          passed: Array.isArray(threeTierFiltered),\n          result: `Three-tier filtering works`,\n        });\n      } else {\n        validation.warnings.push(\n          'Three-tier category system not available - some new features disabled'\n        );\n      }\n    } catch (error) {\n      validation.status = 'error';\n      validation.errors.push(`Validation failed: ${error.message}`);\n    }\n\n    return validation;\n  }\n\n  /**\n   * Set CategoryMappingService dependency (for dependency injection)\n   * @param {CategoryMappingService} categoryMappingService - The service instance\n   */\n  setCategoryMappingService(categoryMappingService) {\n    this.categoryMappingService = categoryMappingService;\n  }\n}\n\nexport default SpecializationService;\n","import StorageService from './StorageService.js';\n\n/**\n * StateManager - Centralized application state management\n */\nclass StateManager {\n  constructor() {\n    this.state = {\n      modules: [],\n      quizzes: [],\n      progress: {\n        modulesCompleted: [],\n        modulesInProgress: [],\n        quizAttempts: [],\n        lastActivity: null,\n      },\n      currentUser: null,\n    };\n    this.listeners = new Map();\n    this.storage = new StorageService();\n  }\n\n  /**\n   * Get state value by key\n   */\n  getState(key) {\n    if (key === undefined) {\n      return this.state;\n    }\n\n    // Support nested keys like 'progress.modulesCompleted'\n    const keys = key.split('.');\n    let value = this.state;\n\n    for (const k of keys) {\n      if (value && typeof value === 'object' && k in value) {\n        value = value[k];\n      } else {\n        return undefined;\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Set state value by key with validation\n   */\n  setState(key, value) {\n    if (!key || typeof key !== 'string') {\n      throw new Error('Invalid key: key must be a non-empty string');\n    }\n\n    // Support nested keys\n    const keys = key.split('.');\n    let target = this.state;\n\n    for (let i = 0; i < keys.length - 1; i++) {\n      const k = keys[i];\n      if (!(k in target)) {\n        target[k] = {};\n      }\n      target = target[k];\n    }\n\n    const lastKey = keys[keys.length - 1];\n    const oldValue = target[lastKey];\n    target[lastKey] = value;\n\n    // Notify listeners\n    this._notifyListeners(key, value, oldValue);\n\n    // Auto-save to storage\n    this.saveToStorage();\n  }\n\n  /**\n   * Subscribe to state changes\n   */\n  subscribe(key, callback) {\n    if (typeof callback !== 'function') {\n      throw new Error('Callback must be a function');\n    }\n\n    if (!this.listeners.has(key)) {\n      this.listeners.set(key, new Set());\n    }\n\n    this.listeners.get(key).add(callback);\n\n    // Return unsubscribe function\n    return () => this.unsubscribe(key, callback);\n  }\n\n  /**\n   * Unsubscribe from state changes\n   */\n  unsubscribe(key, callback) {\n    if (this.listeners.has(key)) {\n      this.listeners.get(key).delete(callback);\n\n      // Clean up empty listener sets\n      if (this.listeners.get(key).size === 0) {\n        this.listeners.delete(key);\n      }\n    }\n  }\n\n  /**\n   * Notify all listeners for a key\n   * Notifies both exact key matches and wildcard (*) listeners\n   * Errors in callbacks are caught and logged to prevent propagation\n   * @private\n   */\n  _notifyListeners(key, newValue, oldValue) {\n    // Notify exact key listeners\n    if (this.listeners.has(key)) {\n      this.listeners.get(key).forEach(callback => {\n        try {\n          callback(newValue, oldValue);\n        } catch (error) {\n          console.error(`Error in state listener for \"${key}\":`, error);\n        }\n      });\n    }\n\n    // Notify wildcard listeners (*)\n    if (this.listeners.has('*')) {\n      this.listeners.get('*').forEach(callback => {\n        try {\n          callback(key, newValue, oldValue);\n        } catch (error) {\n          console.error('Error in wildcard state listener:', error);\n        }\n      });\n    }\n  }\n\n  /**\n   * Load state from localStorage\n   */\n  loadFromStorage() {\n    try {\n      const savedState = this.storage.get('appState');\n\n      if (savedState && typeof savedState === 'object') {\n        // Merge saved state with default state\n        this.state = {\n          ...this.state,\n          ...savedState,\n          progress: {\n            ...this.state.progress,\n            ...(savedState.progress || {}),\n          },\n        };\n\n        return true;\n      }\n\n      return false;\n    } catch (error) {\n      console.error('Error loading state from storage:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Save state to localStorage\n   * If quota is exceeded, attempts to save minimal state (progress only)\n   * Dispatches custom events for quota warnings/errors\n   * @returns {boolean} True if save successful, false otherwise\n   */\n  saveToStorage() {\n    try {\n      this.storage.set('appState', this.state);\n      return true;\n    } catch (error) {\n      console.error('Error saving state to storage:', error);\n\n      // If quota exceeded, try to save minimal state\n      if (\n        error.name === 'QuotaExceededError' ||\n        error.message.includes('quota')\n      ) {\n        try {\n          const minimalState = {\n            progress: this.state.progress,\n          };\n          this.storage.set('appState', minimalState);\n          console.warn('Saved minimal state due to storage quota');\n\n          // Notify user via custom event\n          window.dispatchEvent(\n            new CustomEvent('storage-quota-warning', {\n              detail: { error, minimalStateSaved: true },\n            })\n          );\n        } catch (e) {\n          console.error('Failed to save even minimal state:', e);\n\n          // Notify user via custom event\n          window.dispatchEvent(\n            new CustomEvent('storage-quota-error', {\n              detail: { error: e },\n            })\n          );\n        }\n      }\n\n      return false;\n    }\n  }\n\n  /**\n   * Reset state to defaults\n   */\n  reset() {\n    this.state = {\n      modules: [],\n      quizzes: [],\n      progress: {\n        modulesCompleted: [],\n        modulesInProgress: [],\n        quizAttempts: [],\n        lastActivity: null,\n      },\n      currentUser: null,\n    };\n\n    this.storage.clear();\n    this._notifyListeners('*', this.state, null);\n  }\n}\n\nexport default StateManager;\n","import StorageService from './StorageService.js';\n\n/**\n * ThemeManager - Handles theme switching and persistence\n */\nclass ThemeManager {\n  constructor() {\n    this.storage = new StorageService();\n    this.currentTheme = 'light';\n    this.STORAGE_KEY = 'theme';\n    this.THEME_ATTRIBUTE = 'data-theme';\n  }\n\n  /**\n   * Initialize theme manager\n   */\n  init() {\n    // Try to load saved theme\n    const savedTheme = this.storage.get(this.STORAGE_KEY);\n\n    if (savedTheme && (savedTheme === 'light' || savedTheme === 'dark')) {\n      this.currentTheme = savedTheme;\n    } else {\n      // Detect system preference\n      this.currentTheme = this._detectSystemPreference();\n    }\n\n    this.applyTheme();\n  }\n\n  /**\n   * Detect system theme preference\n   */\n  _detectSystemPreference() {\n    if (\n      window.matchMedia &&\n      window.matchMedia('(prefers-color-scheme: dark)').matches\n    ) {\n      return 'dark';\n    }\n    return 'light';\n  }\n\n  /**\n   * Get current theme\n   */\n  getTheme() {\n    return this.currentTheme;\n  }\n\n  /**\n   * Set theme\n   */\n  setTheme(theme) {\n    if (theme !== 'light' && theme !== 'dark') {\n      console.error(`Invalid theme: ${theme}. Must be 'light' or 'dark'.`);\n      return false;\n    }\n\n    this.currentTheme = theme;\n    this.applyTheme();\n    this._saveTheme();\n\n    return true;\n  }\n\n  /**\n   * Toggle between light and dark theme\n   */\n  toggleTheme() {\n    const newTheme = this.currentTheme === 'light' ? 'dark' : 'light';\n    return this.setTheme(newTheme);\n  }\n\n  /**\n   * Apply theme to document\n   */\n  applyTheme() {\n    // Set data attribute on document root\n    document.documentElement.setAttribute(\n      this.THEME_ATTRIBUTE,\n      this.currentTheme\n    );\n\n    // Set classes for CSS selectors\n    document.documentElement.classList.remove(\n      'light',\n      'dark',\n      'light-theme',\n      'dark-theme'\n    );\n    document.documentElement.classList.add(this.currentTheme); // For :root.dark selectors\n    document.documentElement.classList.add(`${this.currentTheme}-theme`); // For backwards compatibility\n\n    // Dispatch custom event for components that need to react\n    window.dispatchEvent(\n      new CustomEvent('themechange', {\n        detail: { theme: this.currentTheme },\n      })\n    );\n  }\n\n  /**\n   * Save theme preference to storage\n   */\n  _saveTheme() {\n    try {\n      this.storage.set(this.STORAGE_KEY, this.currentTheme);\n    } catch (error) {\n      console.error('Error saving theme preference:', error);\n    }\n  }\n\n  /**\n   * Listen for system theme changes\n   */\n  watchSystemPreference() {\n    if (window.matchMedia) {\n      const darkModeQuery = window.matchMedia('(prefers-color-scheme: dark)');\n\n      darkModeQuery.addEventListener('change', e => {\n        // Only auto-switch if user hasn't manually set a preference\n        const savedTheme = this.storage.get(this.STORAGE_KEY);\n        if (!savedTheme) {\n          const newTheme = e.matches ? 'dark' : 'light';\n          this.setTheme(newTheme);\n        }\n      });\n    }\n  }\n}\n\nexport default ThemeManager;\n","import { HTTP_STATUS, RETRY } from '../utils/constants.js';\n\n/**\n * ErrorBoundary - Component for graceful error display\n * Provides a fallback UI when errors occur in views\n */\nclass ErrorBoundary {\n  constructor() {\n    this.hasError = false;\n    this.error = null;\n  }\n\n  /**\n   * Wrap a view render function with error boundary\n   */\n  static wrap(renderFn, context = {}) {\n    return async (...args) => {\n      try {\n        const result = await renderFn.apply(context, args);\n        return result;\n      } catch (error) {\n        console.error('Error in view:', error);\n        return ErrorBoundary.renderError(error, context);\n      }\n    };\n  }\n\n  /**\n   * Render error UI\n   */\n  static renderError(error) {\n    const container = document.createElement('div');\n    container.className = 'error-boundary';\n    container.setAttribute('role', 'alert');\n    container.setAttribute('aria-live', 'assertive');\n\n    const errorMessage = error.message || 'An unexpected error occurred';\n    const isStorageError =\n      error.message?.includes('quota') || error.message?.includes('storage');\n    const isNetworkError =\n      error.message?.includes('network') || error.message?.includes('fetch');\n    const isNotFoundError =\n      error.message?.includes('not found') ||\n      error.message?.includes(String(HTTP_STATUS.NOT_FOUND));\n\n    let userMessage = errorMessage;\n    let actionButton = '';\n    let icon = '⚠️';\n\n    if (isStorageError) {\n      userMessage =\n        'Storage is full. Please clear some data or export your progress.';\n      icon = '💾';\n      actionButton = `\n        <button class=\"btn-primary\" onclick=\"window.location.hash = '#/progress'\">\n          Go to Progress\n        </button>\n      `;\n    } else if (isNetworkError) {\n      userMessage =\n        'Unable to load data. Please check your connection and try again.';\n      icon = '🌐';\n      actionButton = `\n        <button class=\"btn-primary\" onclick=\"window.location.reload()\">\n          Retry\n        </button>\n      `;\n    } else if (isNotFoundError) {\n      userMessage = 'The requested content was not found.';\n      icon = '🔍';\n      actionButton = `\n        <button class=\"btn-primary\" onclick=\"window.location.hash = '#/'\">\n          Go Home\n        </button>\n      `;\n    } else {\n      actionButton = `\n        <button class=\"btn-primary\" onclick=\"window.location.reload()\">\n          Refresh Page\n        </button>\n        <button class=\"btn-secondary\" onclick=\"window.location.hash = '#/'\">\n          Go Home\n        </button>\n      `;\n    }\n\n    container.innerHTML = `\n      <div class=\"error-boundary-content\">\n        <div class=\"error-icon\" aria-hidden=\"true\">${icon}</div>\n        <h2 class=\"error-title\">Something went wrong</h2>\n        <p class=\"error-message\">${userMessage}</p>\n        <div class=\"error-actions\">\n          ${actionButton}\n        </div>\n        <details class=\"error-details\">\n          <summary>Technical Details</summary>\n          <pre class=\"error-stack\">${error.stack || error.message}</pre>\n        </details>\n      </div>\n    `;\n\n    return container;\n  }\n\n  /**\n   * Check if an error should not be retried\n   */\n  static isNonRetryableError(error) {\n    const nonRetryablePatterns = [\n      'not found',\n      String(HTTP_STATUS.NOT_FOUND),\n      'validation',\n    ];\n    return nonRetryablePatterns.some(pattern =>\n      error.message?.includes(pattern)\n    );\n  }\n\n  /**\n   * Calculate wait time for retry with exponential backoff\n   */\n  static calculateBackoffDelay(attempt, baseDelay, backoffMultiplier) {\n    return baseDelay * Math.pow(backoffMultiplier, attempt);\n  }\n\n  /**\n   * Wait for specified milliseconds\n   */\n  static async wait(milliseconds) {\n    return new Promise(resolve => setTimeout(resolve, milliseconds));\n  }\n\n  /**\n   * Create a retry wrapper for async functions\n   */\n  static withRetry(fn, options = {}) {\n    const {\n      maxRetries = RETRY.MAX_ATTEMPTS,\n      delay = RETRY.INITIAL_DELAY_MS,\n      backoff = RETRY.BACKOFF_MULTIPLIER,\n      onRetry = null,\n    } = options;\n\n    return async function retryWrapper(...args) {\n      let lastError;\n\n      for (let attempt = 0; attempt <= maxRetries; attempt++) {\n        try {\n          return await fn.apply(this, args);\n        } catch (error) {\n          lastError = error;\n\n          if (attempt < maxRetries) {\n            if (ErrorBoundary.isNonRetryableError(error)) {\n              throw error;\n            }\n\n            const waitTime = ErrorBoundary.calculateBackoffDelay(\n              attempt,\n              delay,\n              backoff\n            );\n\n            if (onRetry) {\n              onRetry(attempt + 1, maxRetries, waitTime, error);\n            }\n\n            await ErrorBoundary.wait(waitTime);\n          }\n        }\n      }\n\n      throw lastError;\n    };\n  }\n}\n\nexport default ErrorBoundary;\n","import { TIME, UI } from '../utils/constants.js';\n\n/**\n * ToastNotification - System for displaying user feedback messages\n * Provides toast notifications for success, error, warning, and info messages\n */\nclass ToastNotification {\n  constructor() {\n    this.container = null;\n    this.toasts = new Map();\n    this.nextId = 1;\n    this.init();\n  }\n\n  /**\n   * Initialize toast container\n   */\n  init() {\n    if (!this.container) {\n      this.container = document.createElement('div');\n      this.container.className = 'toast-container';\n      this.container.setAttribute('aria-live', 'polite');\n      this.container.setAttribute('aria-atomic', 'false');\n      document.body.appendChild(this.container);\n    }\n  }\n\n  /**\n   * Show a toast notification\n   */\n  show(options = {}) {\n    const {\n      type = 'info',\n      message = '',\n      duration = TIME.FIVE_SECONDS,\n      dismissible = true,\n      action = null,\n    } = options;\n\n    const id = this.nextId++;\n    const toast = this._createToast(id, type, message, dismissible, action);\n\n    this.toasts.set(id, toast);\n    this.container.appendChild(toast);\n\n    // Trigger animation\n    requestAnimationFrame(() => {\n      toast.classList.add('toast-show');\n    });\n\n    // Auto-dismiss after duration\n    if (duration > 0) {\n      setTimeout(() => {\n        this.dismiss(id);\n      }, duration);\n    }\n\n    return id;\n  }\n\n  /**\n   * Show success toast\n   */\n  success(message, options = {}) {\n    return this.show({\n      type: 'success',\n      message,\n      ...options,\n    });\n  }\n\n  /**\n   * Show error toast\n   */\n  error(message, options = {}) {\n    return this.show({\n      type: 'error',\n      message,\n      duration: TIME.SEVEN_SECONDS, // Errors stay longer\n      ...options,\n    });\n  }\n\n  /**\n   * Show warning toast\n   */\n  warning(message, options = {}) {\n    return this.show({\n      type: 'warning',\n      message,\n      ...options,\n    });\n  }\n\n  /**\n   * Show info toast\n   */\n  info(message, options = {}) {\n    return this.show({\n      type: 'info',\n      message,\n      ...options,\n    });\n  }\n\n  /**\n   * Dismiss a toast by ID\n   */\n  dismiss(id) {\n    const toast = this.toasts.get(id);\n    if (toast) {\n      toast.classList.remove('toast-show');\n      toast.classList.add('toast-hide');\n\n      // Remove from DOM after animation\n      setTimeout(() => {\n        if (toast.parentNode) {\n          toast.parentNode.removeChild(toast);\n        }\n        this.toasts.delete(id);\n      }, UI.ANIMATION_DURATION_MS);\n    }\n  }\n\n  /**\n   * Dismiss all toasts\n   */\n  dismissAll() {\n    this.toasts.forEach((toast, id) => {\n      this.dismiss(id);\n    });\n  }\n\n  /**\n   * Create toast element\n   */\n  _createToast(id, type, message, dismissible, action) {\n    const toast = document.createElement('div');\n    toast.className = `toast toast-${type}`;\n    toast.setAttribute('role', 'status');\n    toast.setAttribute('aria-live', type === 'error' ? 'assertive' : 'polite');\n    toast.dataset.toastId = id;\n\n    const icon = this._getIcon(type);\n    const dismissBtn = dismissible\n      ? `<button class=\"toast-dismiss\" aria-label=\"Dismiss notification\" data-dismiss=\"${id}\">×</button>`\n      : '';\n\n    const actionBtn = action\n      ? `<button class=\"toast-action\" data-action=\"${id}\">${action.label}</button>`\n      : '';\n\n    toast.innerHTML = `\n      <div class=\"toast-content\">\n        <span class=\"toast-icon\" aria-hidden=\"true\">${icon}</span>\n        <span class=\"toast-message\">${message}</span>\n      </div>\n      ${actionBtn}\n      ${dismissBtn}\n    `;\n\n    // Attach event listeners\n    if (dismissible) {\n      const dismissButton = toast.querySelector('.toast-dismiss');\n      dismissButton.addEventListener('click', () => {\n        this.dismiss(id);\n      });\n    }\n\n    if (action) {\n      const actionButton = toast.querySelector('.toast-action');\n      actionButton.addEventListener('click', () => {\n        if (action.onClick) {\n          action.onClick();\n        }\n        this.dismiss(id);\n      });\n    }\n\n    return toast;\n  }\n\n  /**\n   * Get icon for toast type\n   */\n  _getIcon(type) {\n    const icons = {\n      success: '✓',\n      error: '✕',\n      warning: '⚠',\n      info: 'ℹ',\n    };\n    return icons[type] || icons.info;\n  }\n\n  /**\n   * Handle storage quota errors\n   */\n  handleStorageError(_error) {\n    this.error(\n      'Storage is full. Please export your progress or clear some data.',\n      {\n        duration: TIME.TEN_SECONDS,\n        action: {\n          label: 'Go to Progress',\n          onClick: () => {\n            window.location.hash = '#/progress';\n          },\n        },\n      }\n    );\n  }\n\n  /**\n   * Handle network errors\n   */\n  handleNetworkError() {\n    this.error('Unable to load data. Please check your connection.', {\n      duration: TIME.SEVEN_SECONDS,\n      action: {\n        label: 'Retry',\n        onClick: () => {\n          window.location.reload();\n        },\n      },\n    });\n  }\n\n  /**\n   * Handle generic errors\n   */\n  handleError(error, context = '') {\n    const message = error.message || 'An unexpected error occurred';\n    const contextMsg = context ? `${context}: ${message}` : message;\n\n    // Check for specific error types\n    if (message.includes('quota') || message.includes('storage')) {\n      this.handleStorageError(error);\n    } else if (message.includes('network') || message.includes('fetch')) {\n      this.handleNetworkError(error);\n    } else {\n      this.error(contextMsg);\n    }\n  }\n}\n\n// Create singleton instance\nconst toastNotification = new ToastNotification();\n\nexport default toastNotification;\n","/**\n * Navigation - Header navigation component with theme toggle and specialization support\n */\nclass Navigation {\n  constructor(\n    themeManager,\n    router,\n    specializationService = null,\n    specializationSelector = null\n  ) {\n    this.themeManager = themeManager;\n    this.router = router;\n    this.specializationService = specializationService;\n    this.specializationSelector = specializationSelector;\n    this.element = null;\n    this.mobileMenuOpen = false;\n  }\n\n  /**\n   * Render specialization indicator\n   */\n  _renderSpecializationIndicator() {\n    // Specialization indicator removed per request - keep function for compatibility\n    return '';\n  }\n\n  /**\n   * Render navigation component\n   */\n  render() {\n    const currentTheme = this.themeManager.getTheme();\n    const themeIcon = currentTheme === 'dark' ? '☀️' : '🌙';\n    const themeLabel =\n      currentTheme === 'dark' ? 'Switch to light mode' : 'Switch to dark mode';\n\n    this.element = document.createElement('nav');\n    this.element.className = 'navigation';\n    this.element.setAttribute('role', 'navigation');\n    this.element.setAttribute('aria-label', 'Main navigation');\n    this.element.innerHTML = `\n      <div class=\"nav-container\">\n        <div class=\"nav-brand\">\n          <a href=\"#/\" class=\"nav-logo\" aria-label=\"LearnApp home\">\n            <span class=\"logo-icon\" aria-hidden=\"true\">📚</span>\n            <span class=\"logo-text\">LearnApp</span>\n          </a>\n        </div>\n\n        <button class=\"nav-toggle\" aria-label=\"Toggle navigation menu\" aria-expanded=\"false\" aria-controls=\"nav-menu\">\n          <span class=\"hamburger\"></span>\n          <span class=\"sr-only\">Menu</span>\n        </button>\n\n        <div class=\"nav-menu\" id=\"nav-menu\">\n          <ul class=\"nav-links\" role=\"list\">\n            <li><a href=\"#/\" data-nav-link=\"/\" class=\"nav-link\" aria-label=\"Go to home page\">Home</a></li>\n            <li><a href=\"#/modules\" data-nav-link=\"/modules\" class=\"nav-link\" aria-label=\"Browse all learning modules including IHK content\">Modules</a></li>\n            <li><a href=\"#/quizzes\" data-nav-link=\"/quizzes\" class=\"nav-link\" aria-label=\"View all available quizzes including IHK quizzes\">Quizzes</a></li>\n            <li><a href=\"#/wheel\" data-nav-link=\"/wheel\" class=\"nav-link\" aria-label=\"Spin the wheel to discover a random learning module\">🎯 Lern-Modul</a></li>\n            <li><a href=\"#/progress\" data-nav-link=\"/progress\" class=\"nav-link\" aria-label=\"View your progress\">Progress</a></li>\n          </ul>\n\n          <div class=\"nav-actions\">\n            ${this._renderSpecializationIndicator()}\n            <button class=\"theme-toggle\" aria-label=\"${themeLabel}\" title=\"${themeLabel}\">\n              <span class=\"theme-icon\" aria-hidden=\"true\">${themeIcon}</span>\n              <span class=\"sr-only\">${themeLabel}</span>\n            </button>\n          </div>\n        </div>\n      </div>\n      <div class=\"nav-scroll-progress\" role=\"progressbar\" aria-valuemin=\"0\" aria-valuemax=\"100\" aria-valuenow=\"0\" aria-hidden=\"false\">\n        <div class=\"bar\" aria-hidden=\"true\"></div>\n      </div>\n    `;\n\n    this._attachEventListeners();\n    this._updateActiveLink();\n\n    return this.element;\n  }\n\n  /**\n   * Attach event listeners\n   */\n  _attachEventListeners() {\n    // Theme toggle\n    const themeToggle = this.element.querySelector('.theme-toggle');\n    themeToggle.addEventListener('click', () => this._handleThemeToggle());\n\n    // Specialization selector\n    const specializationSelector = this.element.querySelector(\n      '.specialization-selector'\n    );\n    if (specializationSelector) {\n      specializationSelector.addEventListener('click', () =>\n        this._handleSpecializationSelector()\n      );\n    }\n\n    // Mobile menu toggle\n    const navToggle = this.element.querySelector('.nav-toggle');\n    navToggle.addEventListener('click', () => this._toggleMobileMenu());\n\n    // Close mobile menu when clicking any navigation link\n    const navLinks = this.element.querySelectorAll('.nav-link');\n    navLinks.forEach(link => {\n      link.addEventListener('click', e => {\n        // Only handle mobile menu closure if menu is open\n        if (this.mobileMenuOpen) {\n          // Prevent default navigation temporarily\n          e.preventDefault();\n\n          // Force immediate menu close\n          const navMenu = this.element.querySelector('.nav-menu');\n          const navToggle = this.element.querySelector('.nav-toggle');\n\n          if (navMenu) navMenu.classList.remove('active');\n          if (navToggle) {\n            navToggle.classList.remove('active');\n            navToggle.setAttribute('aria-expanded', 'false');\n          }\n\n          this.mobileMenuOpen = false;\n          document.body.style.overflow = '';\n\n          // Navigate after a small delay to ensure menu is closed\n          setTimeout(() => {\n            window.location.href = link.href;\n          }, 100);\n        }\n      });\n    });\n\n    // Also close menu when clicking the logo/brand link\n    const navLogo = this.element.querySelector('.nav-logo');\n    if (navLogo) {\n      navLogo.addEventListener('click', () => {\n        this._closeMobileMenu();\n      });\n    }\n\n    // Additional safety: close menu on any link click within nav-menu\n    const navMenu = this.element.querySelector('.nav-menu');\n    if (navMenu) {\n      navMenu.addEventListener('click', e => {\n        // Check if clicked element is a link (a tag)\n        const clickedLink =\n          e.target.tagName === 'A' ? e.target : e.target.closest('a');\n        if (clickedLink && this.mobileMenuOpen) {\n          // Prevent default navigation temporarily\n          e.preventDefault();\n\n          // Force immediate menu close\n          navMenu.classList.remove('active');\n          const navToggle = this.element.querySelector('.nav-toggle');\n          if (navToggle) {\n            navToggle.classList.remove('active');\n            navToggle.setAttribute('aria-expanded', 'false');\n          }\n          this.mobileMenuOpen = false;\n          document.body.style.overflow = '';\n\n          // Navigate after ensuring menu is closed\n          setTimeout(() => {\n            window.location.href = clickedLink.href;\n          }, 100);\n        }\n      });\n    }\n\n    // Close mobile menu when clicking outside\n    document.addEventListener('click', e => {\n      if (this.mobileMenuOpen && !this.element.contains(e.target)) {\n        this._closeMobileMenu();\n      }\n    });\n\n    // Close mobile menu on escape key\n    document.addEventListener('keydown', e => {\n      if (e.key === 'Escape' && this.mobileMenuOpen) {\n        this._closeMobileMenu();\n      }\n    });\n\n    // Handle window resize - close menu if switching to desktop\n    window.addEventListener('resize', () => {\n      if (window.innerWidth > 768 && this.mobileMenuOpen) {\n        this._closeMobileMenu();\n      }\n    });\n\n    // Listen for route changes to update active link and close mobile menu\n    window.addEventListener('hashchange', () => {\n      this._updateActiveLink();\n      // Always close mobile menu when route changes\n      this._closeMobileMenu();\n    });\n\n    // Emergency fix: Force close menu on any navigation\n    document.addEventListener('click', e => {\n      const clickedLink =\n        e.target.tagName === 'A' ? e.target : e.target.closest('a');\n      if (\n        clickedLink &&\n        clickedLink.href &&\n        clickedLink.href.includes('#') &&\n        this.mobileMenuOpen\n      ) {\n        // Force immediate visual closure\n        const navMenu = this.element.querySelector('.nav-menu');\n        const navToggle = this.element.querySelector('.nav-toggle');\n\n        if (navMenu) {\n          navMenu.classList.remove('active');\n          navMenu.style.transform = 'translateX(-100%)';\n          navMenu.style.visibility = 'hidden';\n        }\n        if (navToggle) {\n          navToggle.classList.remove('active');\n          navToggle.setAttribute('aria-expanded', 'false');\n        }\n\n        this.mobileMenuOpen = false;\n        document.body.style.overflow = '';\n      }\n    });\n\n    // Listen for theme changes\n    window.addEventListener('themechange', e => {\n      const themeIcon = e.detail.theme === 'dark' ? '☀️' : '🌙';\n      const themeIconEl = this.element.querySelector('.theme-icon');\n      if (themeIconEl) {\n        themeIconEl.textContent = themeIcon;\n      }\n    });\n\n    // Listen for specialization changes\n    window.addEventListener('specialization-changed', () => {\n      this._updateSpecializationIndicator();\n    });\n  }\n\n  /**\n   * Handle specialization selector click\n   */\n  _handleSpecializationSelector() {\n    if (!this.specializationSelector) {\n      console.warn('SpecializationSelector not available');\n      return;\n    }\n\n    const hasSelected = this.specializationService?.hasSelectedSpecialization();\n\n    if (hasSelected) {\n      // If user has already selected a specialization, show the modal to change it\n      this.specializationSelector.showSpecializationModal(false);\n    } else {\n      // If no specialization selected, show the selection modal\n      this.specializationSelector.showSpecializationModal(false);\n    }\n  }\n\n  /**\n   * Handle theme toggle\n   */\n  _handleThemeToggle() {\n    this.themeManager.toggleTheme();\n    const newTheme = this.themeManager.getTheme();\n    const themeLabel =\n      newTheme === 'dark' ? 'Switch to light mode' : 'Switch to dark mode';\n\n    // Update aria-label for accessibility\n    const themeToggle = this.element.querySelector('.theme-toggle');\n    if (themeToggle) {\n      themeToggle.setAttribute('aria-label', themeLabel);\n      themeToggle.setAttribute('title', themeLabel);\n\n      const srText = themeToggle.querySelector('.sr-only');\n      if (srText) {\n        srText.textContent = themeLabel;\n      }\n    }\n  }\n\n  /**\n   * Toggle mobile menu\n   */\n  _toggleMobileMenu() {\n    this.mobileMenuOpen = !this.mobileMenuOpen;\n    const navMenu = this.element.querySelector('.nav-menu');\n    const navToggle = this.element.querySelector('.nav-toggle');\n\n    if (this.mobileMenuOpen) {\n      navMenu.classList.add('active');\n      navToggle.classList.add('active');\n      navToggle.setAttribute('aria-expanded', 'true');\n      document.body.style.overflow = 'hidden';\n\n      // Focus management for accessibility\n      const firstLink = navMenu.querySelector('.nav-link');\n      if (firstLink) {\n        setTimeout(() => firstLink.focus(), 100);\n      }\n    } else {\n      navMenu.classList.remove('active');\n      navToggle.classList.remove('active');\n      navToggle.setAttribute('aria-expanded', 'false');\n      document.body.style.overflow = '';\n    }\n  }\n\n  /**\n   * Close mobile menu\n   */\n  _closeMobileMenu() {\n    if (this.mobileMenuOpen) {\n      this.mobileMenuOpen = false;\n      const navMenu = this.element.querySelector('.nav-menu');\n      const navToggle = this.element.querySelector('.nav-toggle');\n\n      // Remove active classes immediately\n      if (navMenu) navMenu.classList.remove('active');\n      if (navToggle) {\n        navToggle.classList.remove('active');\n        navToggle.setAttribute('aria-expanded', 'false');\n      }\n      document.body.style.overflow = '';\n    }\n  }\n\n  /**\n   * Update specialization indicator\n   */\n  _updateSpecializationIndicator() {\n    if (!this.specializationService) {\n      return;\n    }\n\n    const navActions = this.element.querySelector('.nav-actions');\n    if (!navActions) {\n      return;\n    }\n\n    // Find and replace the specialization indicator\n    const existingIndicator = navActions.querySelector(\n      '.specialization-indicator, .specialization-selector'\n    );\n    if (existingIndicator) {\n      const newIndicatorHTML = this._renderSpecializationIndicator();\n      const tempDiv = document.createElement('div');\n      tempDiv.innerHTML = newIndicatorHTML;\n      const newIndicator = tempDiv.firstElementChild;\n\n      if (newIndicator) {\n        existingIndicator.replaceWith(newIndicator);\n\n        // Re-attach event listener\n        const specializationSelector = navActions.querySelector(\n          '.specialization-selector'\n        );\n        if (specializationSelector) {\n          specializationSelector.addEventListener('click', () =>\n            this._handleSpecializationSelector()\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * Update active navigation link based on current route\n   */\n  _updateActiveLink() {\n    const currentPath = window.location.hash.slice(1).split('?')[0] || '/';\n    const navLinks = this.element.querySelectorAll('.nav-link');\n\n    navLinks.forEach(link => {\n      const linkPath = link.getAttribute('data-nav-link');\n\n      // Exact match or starts with for nested routes\n      if (\n        linkPath === currentPath ||\n        (linkPath !== '/' && currentPath.startsWith(linkPath))\n      ) {\n        link.classList.add('active');\n        link.setAttribute('aria-current', 'page');\n      } else {\n        link.classList.remove('active');\n        link.removeAttribute('aria-current');\n      }\n    });\n  }\n\n  /**\n   * Update specialization display\n   */\n  updateSpecialization(specializationId) {\n    this._updateSpecializationIndicator();\n  }\n\n  /**\n   * Cleanup\n   */\n  cleanup() {\n    // Remove event listeners if needed\n    if (this.mobileMenuOpen) {\n      document.body.style.overflow = '';\n    }\n  }\n}\n\nexport default Navigation;\n","/**\n * Formatting utilities for consistent data presentation\n */\n\n/**\n * Format bytes to human-readable size\n * @param {number} bytes - Number of bytes\n * @returns {string} Formatted size string\n */\nexport function formatBytes(bytes) {\n  if (bytes === 0) return '0 Bytes';\n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n}\n\n/**\n * Format date to localized string\n * @param {string|Date} dateString - Date string or Date object\n * @param {string} locale - Locale string (default: 'de-DE')\n * @returns {string} Formatted date string\n */\nexport function formatDate(dateString, locale = 'de-DE') {\n  if (!dateString) return 'N/A';\n\n  try {\n    const date = new Date(dateString);\n    if (isNaN(date.getTime())) return 'Invalid Date';\n\n    return date.toLocaleDateString(locale, {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n    });\n  } catch (error) {\n    console.error('Error formatting date:', error);\n    return 'Invalid Date';\n  }\n}\n\n/**\n * Format time relative to now (e.g., \"2 hours ago\", \"Yesterday\")\n * @param {string|Date} dateString - Date string or Date object\n * @returns {string} Relative time string\n */\nexport function formatTime(dateString) {\n  if (!dateString) return 'Recently';\n\n  try {\n    const date = new Date(dateString);\n    if (isNaN(date.getTime())) return 'Recently';\n\n    const now = new Date();\n    const diffMs = now - date;\n    const diffMinutes = Math.floor(diffMs / (1000 * 60));\n    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n\n    if (diffMinutes < 1) return 'Just now';\n    if (diffMinutes < 60)\n      return `${diffMinutes} minute${diffMinutes > 1 ? 's' : ''} ago`;\n    if (diffHours < 24)\n      return `${diffHours} hour${diffHours > 1 ? 's' : ''} ago`;\n    if (diffDays === 1) return 'Yesterday';\n    if (diffDays < 7) return `${diffDays} days ago`;\n\n    return formatDate(dateString);\n  } catch (error) {\n    console.error('Error formatting time:', error);\n    return 'Recently';\n  }\n}\n\n/**\n * Format percentage with optional decimal places\n * @param {number} value - Value to format as percentage\n * @param {number} decimals - Number of decimal places (default: 1)\n * @returns {string} Formatted percentage string\n */\nexport function formatPercentage(value, decimals = 1) {\n  if (typeof value !== 'number' || isNaN(value)) return '0%';\n  return `${value.toFixed(decimals)}%`;\n}\n\n/**\n * Format duration in milliseconds to human-readable string\n * @param {number} ms - Duration in milliseconds\n * @returns {string} Formatted duration string\n */\nexport function formatDuration(ms) {\n  if (typeof ms !== 'number' || ms < 0) return '0ms';\n\n  if (ms < 1000) return `${Math.round(ms)}ms`;\n  if (ms < 60000) return `${(ms / 1000).toFixed(1)}s`;\n  if (ms < 3600000)\n    return `${Math.floor(ms / 60000)}m ${Math.floor((ms % 60000) / 1000)}s`;\n\n  const hours = Math.floor(ms / 3600000);\n  const minutes = Math.floor((ms % 3600000) / 60000);\n  return `${hours}h ${minutes}m`;\n}\n","import { formatTime } from '../utils/formatUtils.js';\n\n/**\n * HomeView - Landing page with overview and quick actions\n */\nclass HomeView {\n  constructor(services) {\n    this.progressService = services.progressService;\n    this.moduleService = services.moduleService;\n    this.stateManager = services.stateManager;\n    this.router = services.router;\n  }\n\n  /**\n   * Render home view\n   */\n  async render() {\n    const container = document.createElement('main');\n    container.className = 'home-view';\n    container.id = 'main-content';\n    container.setAttribute('role', 'main');\n    container.setAttribute('aria-label', 'Home page');\n\n    try {\n      // Get progress data (now async)\n      const progress = await this.progressService.getOverallProgress();\n      const modules = await this.moduleService.getModules();\n      const recentActivity = this._getRecentActivity();\n\n      container.innerHTML = `\n        ${this._renderHero(progress)}\n        ${this._renderQuickStats(progress, modules)}\n        ${this._renderQuickActions()}\n        ${this._renderRecentActivity(recentActivity)}\n      `;\n\n      this._attachEventListeners(container);\n    } catch (error) {\n      console.error('Error rendering home view:', error);\n      container.innerHTML = this._renderError();\n    }\n\n    return container;\n  }\n\n  /**\n   * Render hero section\n   */\n  _renderHero(progress) {\n    const greeting = this._getGreeting();\n    const percentage = progress.overallPercentage || 0;\n\n    return `\n      <section class=\"hero\" aria-labelledby=\"hero-title\">\n        <div class=\"hero-content\">\n          <h1 id=\"hero-title\" class=\"hero-title\">${greeting}</h1>\n          <p class=\"hero-subtitle\">Continue your learning journey</p>\n          <div class=\"hero-progress\" role=\"region\" aria-label=\"Overall progress indicator\">\n            <div class=\"progress-info\">\n              <span class=\"progress-label\">Overall Progress</span>\n              <span class=\"progress-percentage\" aria-label=\"${percentage} percent complete\">${percentage}%</span>\n            </div>\n            <div class=\"progress-bar\" role=\"progressbar\" aria-valuenow=\"${percentage}\" aria-valuemin=\"0\" aria-valuemax=\"100\" aria-label=\"Overall progress\">\n              <div class=\"progress-fill\" style=\"width: ${percentage}%\"></div>\n            </div>\n          </div>\n        </div>\n      </section>\n    `;\n  }\n\n  /**\n   * Render quick stats cards\n   */\n  _renderQuickStats(progress, modules) {\n    const completedModules = progress.modulesCompleted || 0;\n    const totalModules = progress.totalModules || 0;\n    const totalQuizzes = progress.totalQuizzes || 0;\n    const quizzesTaken = progress.quizzesTaken || 0;\n    const averageScore = progress.averageQuizScore || 0;\n    const inProgressCount = modules.filter(m => m.inProgress).length;\n\n    return `\n      <section class=\"quick-stats\" aria-labelledby=\"stats-heading\">\n        <h2 id=\"stats-heading\" class=\"sr-only\">Learning Statistics</h2>\n        <div class=\"stats-grid\" role=\"list\">\n          <div class=\"stat-card\" role=\"listitem\">\n            <div class=\"stat-icon\" aria-hidden=\"true\">📚</div>\n            <div class=\"stat-content\">\n              <div class=\"stat-value\" aria-label=\"${completedModules} of ${totalModules} modules completed\">${completedModules}/${totalModules}</div>\n              <div class=\"stat-label\">Modules Completed</div>\n            </div>\n          </div>\n\n          <div class=\"stat-card\" role=\"listitem\">\n            <div class=\"stat-icon\" aria-hidden=\"true\">📝</div>\n            <div class=\"stat-content\">\n              <div class=\"stat-value\" aria-label=\"${quizzesTaken} of ${totalQuizzes} quizzes taken\">${quizzesTaken}/${totalQuizzes}</div>\n              <div class=\"stat-label\">Quizzes Taken</div>\n            </div>\n          </div>\n\n          <div class=\"stat-card\" role=\"listitem\">\n            <div class=\"stat-icon\" aria-hidden=\"true\">⭐</div>\n            <div class=\"stat-content\">\n              <div class=\"stat-value\" aria-label=\"Average score ${averageScore} percent\">${averageScore}%</div>\n              <div class=\"stat-label\">Average Score</div>\n            </div>\n          </div>\n\n          <div class=\"stat-card\" role=\"listitem\">\n            <div class=\"stat-icon\" aria-hidden=\"true\">🎯</div>\n            <div class=\"stat-content\">\n              <div class=\"stat-value\" aria-label=\"${inProgressCount} modules in progress\">${inProgressCount}</div>\n              <div class=\"stat-label\">In Progress</div>\n            </div>\n          </div>\n        </div>\n      </section>\n    `;\n  }\n\n  /**\n   * Render quick action buttons\n   */\n  _renderQuickActions() {\n    return `\n      <section class=\"quick-actions\" aria-labelledby=\"actions-heading\">\n        <h2 id=\"actions-heading\" class=\"section-title\">Quick Actions</h2>\n        <div class=\"actions-grid\" role=\"group\" aria-label=\"Quick action buttons\">\n          <button class=\"action-card\" data-action=\"start-learning\" aria-label=\"Start learning - Browse and study modules\">\n            <div class=\"action-icon\" aria-hidden=\"true\">📖</div>\n            <div class=\"action-content\">\n              <h3 class=\"action-title\">Start Learning</h3>\n              <p class=\"action-description\">Browse and study modules</p>\n            </div>\n          </button>\n\n          <button class=\"action-card\" data-action=\"take-quiz\" aria-label=\"Take quiz - Test your knowledge\">\n            <div class=\"action-icon\" aria-hidden=\"true\">✏️</div>\n            <div class=\"action-content\">\n              <h3 class=\"action-title\">Take Quiz</h3>\n              <p class=\"action-description\">Test your knowledge</p>\n            </div>\n          </button>\n\n          <button class=\"action-card\" data-action=\"view-progress\" aria-label=\"View progress - Track your achievements\">\n            <div class=\"action-icon\" aria-hidden=\"true\">📊</div>\n            <div class=\"action-content\">\n              <h3 class=\"action-title\">View Progress</h3>\n              <p class=\"action-description\">Track your achievements</p>\n            </div>\n          </button>\n        </div>\n      </section>\n    `;\n  }\n\n  /**\n   * Render recent activity list\n   */\n  _renderRecentActivity(activities) {\n    if (!activities || activities.length === 0) {\n      return `\n        <section class=\"recent-activity\" aria-labelledby=\"activity-heading\">\n          <h2 id=\"activity-heading\" class=\"section-title\">Recent Activity</h2>\n          <div class=\"empty-state\" role=\"status\">\n            <p>No recent activity yet. Start learning to see your progress here!</p>\n          </div>\n        </section>\n      `;\n    }\n\n    const activityItems = activities\n      .map(\n        activity => `\n        <div class=\"activity-item\" role=\"listitem\">\n          <div class=\"activity-icon\" aria-hidden=\"true\">${activity.icon}</div>\n          <div class=\"activity-content\">\n            <div class=\"activity-title\">${activity.title}</div>\n            <div class=\"activity-time\">${activity.time}</div>\n          </div>\n        </div>\n      `\n      )\n      .join('');\n\n    return `\n      <section class=\"recent-activity\" aria-labelledby=\"activity-heading\">\n        <h2 id=\"activity-heading\" class=\"section-title\">Recent Activity</h2>\n        <div class=\"activity-list\" role=\"list\" aria-label=\"Recent learning activities\">\n          ${activityItems}\n        </div>\n      </section>\n    `;\n  }\n\n  /**\n   * Render error state\n   */\n  _renderError() {\n    return `\n      <div class=\"error-state\">\n        <h2>Unable to load dashboard</h2>\n        <p>Please try refreshing the page.</p>\n        <button class=\"btn-primary\" onclick=\"window.location.reload()\">Refresh</button>\n      </div>\n    `;\n  }\n\n  /**\n   * Get greeting based on time of day\n   */\n  _getGreeting() {\n    const hour = new Date().getHours();\n    if (hour < 12) return 'Good Morning! 🌅';\n    if (hour < 18) return 'Good Afternoon! ☀️';\n    return 'Good Evening! 🌙';\n  }\n\n  /**\n   * Get recent activity from state\n   */\n  _getRecentActivity() {\n    const progress = this.stateManager.getState('progress') || {};\n    const activities = [];\n\n    // Get completed modules\n    const modulesCompleted = progress.modulesCompleted || [];\n    const modules = this.stateManager.getState('modules') || [];\n\n    modulesCompleted.slice(-3).forEach(moduleId => {\n      const module = modules.find(m => m.id === moduleId);\n      if (module) {\n        activities.push({\n          icon: '✅',\n          title: `Completed: ${module.title}`,\n          time: formatTime(progress.lastActivity),\n        });\n      }\n    });\n\n    // Get recent quiz attempts\n    const quizAttempts = progress.quizAttempts || [];\n    quizAttempts.slice(-3).forEach(attempt => {\n      activities.push({\n        icon: attempt.score >= 70 ? '🎉' : '📝',\n        title: `Quiz completed with ${attempt.score}%`,\n        time: formatTime(attempt.date),\n      });\n    });\n\n    // Sort by time and limit to 5\n    return activities.slice(0, 5);\n  }\n\n  /**\n   * Attach event listeners\n   */\n  _attachEventListeners(container) {\n    // Quick action buttons\n    const startLearning = container.querySelector(\n      '[data-action=\"start-learning\"]'\n    );\n    const takeQuiz = container.querySelector('[data-action=\"take-quiz\"]');\n    const viewProgress = container.querySelector(\n      '[data-action=\"view-progress\"]'\n    );\n\n    if (startLearning) {\n      startLearning.addEventListener('click', () => {\n        window.location.hash = '#/modules';\n      });\n    }\n\n    if (takeQuiz) {\n      takeQuiz.addEventListener('click', () => {\n        window.location.hash = '#/quizzes';\n      });\n    }\n\n    if (viewProgress) {\n      viewProgress.addEventListener('click', () => {\n        window.location.hash = '#/progress';\n      });\n    }\n  }\n\n  /**\n   * Cleanup\n   */\n  cleanup() {\n    // Cleanup if needed\n  }\n}\n\nexport default HomeView;\n","/**\n * EmptyState - Component for displaying empty states\n * Provides user-friendly messages when lists or content are empty\n */\nclass EmptyState {\n  /**\n   * Create an empty state element\n   */\n  static create(options = {}) {\n    const {\n      icon = '📭',\n      title = 'No items found',\n      message = 'There are no items to display.',\n      action = null,\n      type = 'default',\n    } = options;\n\n    const container = document.createElement('div');\n    container.className = `empty-state empty-state-${type}`;\n    container.setAttribute('role', 'status');\n    container.setAttribute('aria-label', title);\n\n    const actionButton = action\n      ? `<button class=\"btn-primary empty-state-action\" data-action=\"empty-state\">\n           ${action.label}\n         </button>`\n      : '';\n\n    container.innerHTML = `\n      <div class=\"empty-state-content\">\n        <div class=\"empty-state-icon\" aria-hidden=\"true\">${icon}</div>\n        <h3 class=\"empty-state-title\">${title}</h3>\n        <p class=\"empty-state-message\">${message}</p>\n        ${actionButton}\n      </div>\n    `;\n\n    // Attach action handler\n    if (action && action.onClick) {\n      const button = container.querySelector('[data-action=\"empty-state\"]');\n      button.addEventListener('click', action.onClick);\n    }\n\n    return container;\n  }\n\n  /**\n   * Create empty state for no modules\n   */\n  static noModules(filter = 'all') {\n    const messages = {\n      all: {\n        title: 'No modules available',\n        message: 'There are no learning modules available at the moment.',\n      },\n      completed: {\n        title: 'No completed modules',\n        message:\n          \"You haven't completed any modules yet. Start learning to see your progress here!\",\n      },\n      'in-progress': {\n        title: 'No modules in progress',\n        message:\n          \"You don't have any modules in progress. Start a new module to begin learning!\",\n      },\n      'not-started': {\n        title: 'All modules started',\n        message: \"Great job! You've started all available modules.\",\n      },\n    };\n\n    const config = messages[filter] || messages.all;\n\n    return EmptyState.create({\n      icon: '📚',\n      title: config.title,\n      message: config.message,\n      action:\n        filter !== 'all'\n          ? {\n              label: 'View All Modules',\n              onClick: () => {\n                window.location.hash = '#/modules';\n              },\n            }\n          : null,\n    });\n  }\n\n  /**\n   * Create empty state for no quizzes\n   */\n  static noQuizzes(_filter = 'all') {\n    return EmptyState.create({\n      icon: '📝',\n      title: 'No quizzes available',\n      message: 'There are no quizzes available at the moment.',\n      action: {\n        label: 'Browse Modules',\n        onClick: () => {\n          window.location.hash = '#/modules';\n        },\n      },\n    });\n  }\n\n  /**\n   * Create empty state for no quiz history\n   */\n  static noQuizHistory() {\n    return EmptyState.create({\n      icon: '📊',\n      title: 'No quiz history',\n      message:\n        \"You haven't taken any quizzes yet. Take a quiz to see your results here!\",\n      action: {\n        label: 'Browse Quizzes',\n        onClick: () => {\n          window.location.hash = '#/quizzes';\n        },\n      },\n    });\n  }\n\n  /**\n   * Create empty state for no progress\n   */\n  static noProgress() {\n    return EmptyState.create({\n      icon: '🎯',\n      title: 'No progress yet',\n      message: 'Start learning to track your progress!',\n      action: {\n        label: 'Start Learning',\n        onClick: () => {\n          window.location.hash = '#/modules';\n        },\n      },\n    });\n  }\n\n  /**\n   * Create empty state for search results\n   */\n  static noSearchResults(query = '') {\n    return EmptyState.create({\n      icon: '🔍',\n      title: 'No results found',\n      message: query\n        ? `No results found for \"${query}\". Try a different search term.`\n        : 'No results found. Try adjusting your search.',\n      type: 'search',\n    });\n  }\n\n  /**\n   * Create empty state for filtered results\n   */\n  static noFilteredResults(filterName = '') {\n    return EmptyState.create({\n      icon: '🔎',\n      title: 'No matching items',\n      message: filterName\n        ? `No items match the \"${filterName}\" filter. Try a different filter.`\n        : 'No items match your current filters.',\n      type: 'filter',\n    });\n  }\n\n  /**\n   * Create empty state for errors\n   */\n  static error(message = 'Something went wrong') {\n    return EmptyState.create({\n      icon: '⚠️',\n      title: 'Unable to load content',\n      message: message,\n      type: 'error',\n      action: {\n        label: 'Try Again',\n        onClick: () => {\n          window.location.reload();\n        },\n      },\n    });\n  }\n}\n\nexport default EmptyState;\n","/**\n * LoadingSpinner - Component for displaying loading states\n * Provides visual feedback during async operations\n */\nclass LoadingSpinner {\n  /**\n   * Render loading spinner as HTML string\n   * @param {string} message - Loading message\n   * @returns {string} HTML string\n   */\n  static render(message = 'Loading...') {\n    return `\n      <div class=\"loading-spinner loading-spinner-medium\" role=\"status\" aria-live=\"polite\" aria-busy=\"true\">\n        <div class=\"spinner-content\">\n          <div class=\"spinner\" aria-hidden=\"true\">\n            <div class=\"spinner-circle\"></div>\n          </div>\n          <p class=\"spinner-message\">${message}</p>\n          <span class=\"sr-only\">${message}</span>\n        </div>\n      </div>\n    `;\n  }\n\n  /**\n   * Create a loading spinner element\n   */\n  static create(options = {}) {\n    const {\n      size = 'medium',\n      message = 'Loading...',\n      fullscreen = false,\n      overlay = false,\n    } = options;\n\n    const container = document.createElement('div');\n    container.className = `loading-spinner loading-spinner-${size}`;\n    container.setAttribute('role', 'status');\n    container.setAttribute('aria-live', 'polite');\n    container.setAttribute('aria-busy', 'true');\n\n    if (fullscreen) {\n      container.classList.add('loading-spinner-fullscreen');\n    }\n\n    if (overlay) {\n      container.classList.add('loading-spinner-overlay');\n    }\n\n    container.innerHTML = `\n      <div class=\"spinner-content\">\n        <div class=\"spinner\" aria-hidden=\"true\">\n          <div class=\"spinner-circle\"></div>\n        </div>\n        <p class=\"spinner-message\">${message}</p>\n        <span class=\"sr-only\">${message}</span>\n      </div>\n    `;\n\n    return container;\n  }\n\n  /**\n   * Show loading spinner in a container\n   */\n  static show(container, options = {}) {\n    const spinner = LoadingSpinner.create(options);\n    spinner.dataset.loadingSpinner = 'true';\n\n    // Clear container and add spinner\n    const previousContent = container.innerHTML;\n    container.innerHTML = '';\n    container.appendChild(spinner);\n\n    // Store previous content for restoration\n    container.dataset.previousContent = previousContent;\n\n    return spinner;\n  }\n\n  /**\n   * Hide loading spinner and restore content\n   */\n  static hide(container) {\n    const spinner = container.querySelector('[data-loading-spinner=\"true\"]');\n    if (spinner) {\n      spinner.remove();\n    }\n\n    // Restore previous content if available\n    if (container.dataset.previousContent) {\n      container.innerHTML = container.dataset.previousContent;\n      delete container.dataset.previousContent;\n    }\n  }\n\n  /**\n   * Wrap an async function with loading state\n   */\n  static async withLoading(container, asyncFn, _options = {}) {\n    try {\n      const result = await asyncFn();\n      LoadingSpinner.hide(container);\n      return result;\n    } catch (error) {\n      LoadingSpinner.hide(container);\n      throw error;\n    }\n  }\n\n  /**\n   * Create inline loading indicator (for buttons, etc.)\n   */\n  static createInline(message = '') {\n    const span = document.createElement('span');\n    span.className = 'loading-inline';\n    span.setAttribute('role', 'status');\n    span.setAttribute('aria-live', 'polite');\n\n    span.innerHTML = `\n      <span class=\"spinner-inline\" aria-hidden=\"true\"></span>\n      ${message ? `<span class=\"spinner-inline-text\">${message}</span>` : ''}\n      <span class=\"sr-only\">Loading${message ? ': ' + message : ''}</span>\n    `;\n\n    return span;\n  }\n\n  /**\n   * Show loading state on a button\n   */\n  static setButtonLoading(button, loading = true) {\n    if (loading) {\n      button.disabled = true;\n      button.dataset.originalText = button.innerHTML;\n      button.innerHTML = '';\n      button.appendChild(LoadingSpinner.createInline());\n      button.classList.add('btn-loading');\n    } else {\n      button.disabled = false;\n      if (button.dataset.originalText) {\n        button.innerHTML = button.dataset.originalText;\n        delete button.dataset.originalText;\n      }\n      button.classList.remove('btn-loading');\n    }\n  }\n\n  /**\n   * Create a skeleton loader for content\n   */\n  static createSkeleton(type = 'card', count = 1) {\n    const container = document.createElement('div');\n    container.className = 'skeleton-container';\n    container.setAttribute('aria-busy', 'true');\n    container.setAttribute('aria-label', 'Loading content');\n\n    const skeletons = [];\n    for (let i = 0; i < count; i++) {\n      skeletons.push(LoadingSpinner._getSkeletonTemplate(type));\n    }\n\n    container.innerHTML = skeletons.join('');\n    return container;\n  }\n\n  /**\n   * Get skeleton template by type\n   */\n  static _getSkeletonTemplate(type) {\n    switch (type) {\n      case 'card':\n        return `\n          <div class=\"skeleton skeleton-card\">\n            <div class=\"skeleton-header\">\n              <div class=\"skeleton-line skeleton-line-short\"></div>\n            </div>\n            <div class=\"skeleton-body\">\n              <div class=\"skeleton-line skeleton-line-long\"></div>\n              <div class=\"skeleton-line skeleton-line-medium\"></div>\n              <div class=\"skeleton-line skeleton-line-short\"></div>\n            </div>\n          </div>\n        `;\n      case 'list':\n        return `\n          <div class=\"skeleton skeleton-list-item\">\n            <div class=\"skeleton-line skeleton-line-long\"></div>\n            <div class=\"skeleton-line skeleton-line-medium\"></div>\n          </div>\n        `;\n      case 'text':\n        return `\n          <div class=\"skeleton skeleton-text\">\n            <div class=\"skeleton-line skeleton-line-long\"></div>\n            <div class=\"skeleton-line skeleton-line-long\"></div>\n            <div class=\"skeleton-line skeleton-line-medium\"></div>\n          </div>\n        `;\n      default:\n        return `<div class=\"skeleton skeleton-default\"></div>`;\n    }\n  }\n}\n\nexport default LoadingSpinner;\n","import EmptyState from './EmptyState.js';\nimport LoadingSpinner from './LoadingSpinner.js';\nimport toastNotification from './ToastNotification.js';\n\n/**\n * ModuleListView - Display all available learning modules with specialization support\n */\nclass ModuleListView {\n  constructor(services) {\n    this.moduleService = services.moduleService;\n    this.progressService = services.progressService;\n    this.specializationService = services.specializationService;\n    this.router = services.router;\n    this.currentFilter = 'all';\n    this.currentCategoryFilter = 'all';\n  }\n\n  /**\n   * Render module list view\n   */\n  async render() {\n    const container = document.createElement('main');\n    container.className = 'module-list-view';\n    container.id = 'main-content';\n    container.setAttribute('role', 'main');\n    container.setAttribute('aria-label', 'Learning modules page');\n\n    // Show loading state\n    const loadingSpinner = LoadingSpinner.create({\n      message: 'Loading modules...',\n      size: 'medium',\n    });\n    container.appendChild(loadingSpinner);\n\n    try {\n      // Get current specialization for filtering\n      this.currentSpecialization =\n        this.specializationService.getCurrentSpecialization();\n\n      // Get all modules (let category filters handle the filtering)\n      const modules = await this.moduleService.getModules();\n      this.modules = modules;\n\n      // Remove loading spinner\n      loadingSpinner.remove();\n\n      container.innerHTML = `\n        <div class=\"module-list-header\">\n          <h1 class=\"page-title\">Learning Modules</h1>\n          <p class=\"page-description\">Browse and study our collection of learning modules</p>\n        </div>\n\n        ${this._renderFilters()}\n        ${this._renderCategoryFilters()}\n        ${this._renderModuleGrid(modules)}\n      `;\n\n      this._attachEventListeners(container);\n    } catch (error) {\n      console.error('Error rendering module list:', error);\n      toastNotification.error('Failed to load modules. Please try again.');\n\n      // Remove loading spinner and show error\n      loadingSpinner.remove();\n      const errorState = EmptyState.error(\n        'Unable to load modules. Please try again.'\n      );\n      container.appendChild(errorState);\n    }\n\n    return container;\n  }\n\n  /**\n   * Render filter buttons\n   */\n  _renderFilters() {\n    return `\n      <div class=\"module-filters\" role=\"group\" aria-label=\"Filter modules by status\">\n        <button class=\"filter-btn active\" data-filter=\"all\" aria-pressed=\"true\" aria-label=\"Show all modules\">\n          All Modules\n        </button>\n        <button class=\"filter-btn\" data-filter=\"completed\" aria-pressed=\"false\" aria-label=\"Show completed modules only\">\n          Completed\n        </button>\n        <button class=\"filter-btn\" data-filter=\"in-progress\" aria-pressed=\"false\" aria-label=\"Show in progress modules only\">\n          In Progress\n        </button>\n        <button class=\"filter-btn\" data-filter=\"not-started\" aria-pressed=\"false\" aria-label=\"Show not started modules only\">\n          Not Started\n        </button>\n      </div>\n    `;\n  }\n\n  /**\n   * Render category filter buttons\n   */\n  _renderCategoryFilters() {\n    const categories = this._getCategoryFilters();\n\n    const categoryButtons = categories\n      .map(\n        category => `\n      <button \n        class=\"category-filter-btn ${category.id === 'all' ? 'active' : ''}\" \n        data-category=\"${category.id}\" \n        aria-pressed=\"${category.id === 'all' ? 'true' : 'false'}\"\n        aria-label=\"Show ${category.name} modules\"\n        style=\"--category-color: ${category.color}\"\n      >\n        <span class=\"category-icon\" aria-hidden=\"true\">${category.icon}</span>\n        <span class=\"category-name\">${category.name}</span>\n      </button>\n    `\n      )\n      .join('');\n\n    return `\n      <div class=\"module-category-filters\" role=\"group\" aria-label=\"Filter modules by category\">\n        <h3 class=\"category-filters-title\">Filter by Category</h3>\n        <div class=\"category-filters-buttons\">\n          ${categoryButtons}\n        </div>\n      </div>\n    `;\n  }\n\n  /**\n   * Get category filters - show all available three-tier categories\n   */\n  _getCategoryFilters() {\n    const categories = [\n      {\n        id: 'all',\n        name: 'All Categories',\n        icon: '📚',\n        color: '#6b7280',\n      },\n      {\n        id: 'daten-prozessanalyse',\n        name: 'Daten und Prozessanalyse',\n        icon: '📊',\n        color: '#2563eb',\n      },\n      {\n        id: 'anwendungsentwicklung',\n        name: 'Anwendungsentwicklung',\n        icon: '💻',\n        color: '#dc2626',\n      },\n      {\n        id: 'allgemein',\n        name: 'Allgemein',\n        icon: '📖',\n        color: '#059669',\n      },\n    ];\n\n    return categories;\n  }\n\n  /**\n   * Render module grid\n   */\n  _renderModuleGrid(modules) {\n    console.warn(\n      '🎯 Rendering',\n      modules.length,\n      'modules with filter:',\n      this.currentCategoryFilter\n    );\n    const filteredModules = this._filterModules(modules);\n    console.warn(\n      '🎯 After filtering:',\n      filteredModules.length,\n      'modules remain'\n    );\n\n    if (filteredModules.length === 0) {\n      const emptyState = EmptyState.noModules(this.currentFilter);\n      return emptyState.outerHTML;\n    }\n\n    const moduleCards = filteredModules\n      .map(module => this._renderModuleCard(module))\n      .join('');\n\n    return `\n      <div class=\"module-grid\" role=\"list\" aria-label=\"Learning modules\">\n        ${moduleCards}\n      </div>\n    `;\n  }\n\n  /**\n   * Render individual module card\n   */\n  _renderModuleCard(module) {\n    // Add defensive checks for undefined module properties\n    if (!module || !module.id) {\n      console.warn('Invalid module data:', module);\n      return '';\n    }\n\n    const title = module.title || 'Untitled Module';\n    const description = module.description || 'No description available';\n    const category = module.category || 'General';\n    const duration = module.duration || module.estimatedTime || 30;\n\n    const progress = module.completed ? 100 : module.inProgress ? 50 : 0;\n    const statusBadge = this._getStatusBadge(module);\n    const categoryIndicator = this._getCategoryIndicator(module);\n    const prerequisites =\n      module.prerequisites && module.prerequisites.length > 0\n        ? `<div class=\"module-prerequisites\">\n           <span class=\"prereq-label\">Prerequisites:</span>\n           <span class=\"prereq-count\">${module.prerequisites.length} module${module.prerequisites.length > 1 ? 's' : ''}</span>\n         </div>`\n        : '';\n\n    const actionText = module.completed\n      ? 'Review'\n      : module.inProgress\n        ? 'Continue'\n        : 'Start';\n\n    return `\n      <article class=\"module-card ${categoryIndicator.cssClass}\" data-module-id=\"${module.id}\" data-category=\"${categoryIndicator.category}\" role=\"listitem\" aria-labelledby=\"module-title-${module.id}\">\n        <div class=\"module-card-header\">\n          <div class=\"module-category-display\">\n            <span class=\"category-indicator\" style=\"background-color: ${categoryIndicator.color}\" aria-hidden=\"true\">${categoryIndicator.icon}</span>\n            <span class=\"category-text\">${categoryIndicator.displayName}</span>\n          </div>\n          ${statusBadge}\n        </div>\n\n        <div class=\"module-card-body\">\n          <h3 id=\"module-title-${module.id}\" class=\"module-title\">${title}</h3>\n          <p class=\"module-description\">${description}</p>\n\n          <div class=\"module-meta\">\n            <div class=\"module-duration\">\n              <span class=\"meta-icon\" aria-hidden=\"true\">⏱️</span>\n              <span><span class=\"sr-only\">Duration: </span>${duration} minutes</span>\n            </div>\n            ${prerequisites}\n          </div>\n\n          <div class=\"module-progress\">\n            <div class=\"progress-bar\" role=\"progressbar\" aria-valuenow=\"${progress}\" aria-valuemin=\"0\" aria-valuemax=\"100\" aria-label=\"Module progress: ${progress} percent\">\n              <div class=\"progress-fill\" style=\"width: ${progress}%\"></div>\n            </div>\n            <div class=\"progress-text\" aria-hidden=\"true\">${progress}% complete</div>\n          </div>\n        </div>\n\n        <div class=\"module-card-footer\">\n          <button class=\"btn-primary btn-sm\" data-action=\"view-module\" data-module-id=\"${module.id}\" aria-label=\"${actionText} module: ${title}\">\n            ${actionText} Module\n          </button>\n        </div>\n      </article>\n    `;\n  }\n\n  /**\n   * Get category indicator for module using three-tier category system\n   */\n  _getCategoryIndicator(module) {\n    // First check if module has three-tier category information\n    if (module.threeTierCategory) {\n      return this._getThreeTierCategoryIndicator(module.threeTierCategory);\n    }\n\n    // Fallback to legacy category mapping\n    const categoryId = module.category || module.categoryId;\n\n    if (!categoryId) {\n      return this._getThreeTierCategoryIndicator('allgemein');\n    }\n\n    // Map legacy categories to three-tier system\n    if (categoryId.includes('BP-DPA') || categoryId.includes('bp-dpa')) {\n      return this._getThreeTierCategoryIndicator('daten-prozessanalyse');\n    } else if (\n      categoryId.includes('BP-AE') ||\n      categoryId.includes('bp-ae') ||\n      categoryId === 'BP-01' ||\n      categoryId === 'BP-02' ||\n      categoryId === 'BP-03' ||\n      categoryId === 'BP-04' ||\n      categoryId === 'BP-05'\n    ) {\n      return this._getThreeTierCategoryIndicator('anwendungsentwicklung');\n    } else {\n      return this._getThreeTierCategoryIndicator('allgemein');\n    }\n  }\n\n  /**\n   * Get three-tier category indicator configuration\n   * @private\n   */\n  _getThreeTierCategoryIndicator(threeTierCategoryId) {\n    const categoryConfigs = {\n      'daten-prozessanalyse': {\n        category: 'daten-prozessanalyse',\n        cssClass: 'module-daten-prozessanalyse',\n        icon: '📊',\n        color: '#2563eb',\n        displayName: 'Daten und Prozessanalyse',\n      },\n      anwendungsentwicklung: {\n        category: 'anwendungsentwicklung',\n        cssClass: 'module-anwendungsentwicklung',\n        icon: '💻',\n        color: '#dc2626',\n        displayName: 'Anwendungsentwicklung',\n      },\n      allgemein: {\n        category: 'allgemein',\n        cssClass: 'module-allgemein',\n        icon: '📖',\n        color: '#059669',\n        displayName: 'Allgemein',\n      },\n    };\n\n    return categoryConfigs[threeTierCategoryId] || categoryConfigs['allgemein'];\n  }\n\n  /**\n   * Get status badge for module\n   */\n  _getStatusBadge(module) {\n    if (module.completed) {\n      return '<span class=\"badge badge-success\">✓ Completed</span>';\n    }\n    if (module.inProgress) {\n      return '<span class=\"badge badge-warning\">In Progress</span>';\n    }\n    return '<span class=\"badge badge-default\">Not Started</span>';\n  }\n\n  /**\n   * Filter modules based on current filters\n   */\n  _filterModules(modules) {\n    let filteredModules = modules;\n\n    // Apply status filter\n    switch (this.currentFilter) {\n      case 'completed':\n        filteredModules = filteredModules.filter(m => m.completed);\n        break;\n      case 'in-progress':\n        filteredModules = filteredModules.filter(\n          m => m.inProgress && !m.completed\n        );\n        break;\n      case 'not-started':\n        filteredModules = filteredModules.filter(\n          m => !m.completed && !m.inProgress\n        );\n        break;\n      case 'all':\n      default:\n        // No status filtering\n        break;\n    }\n\n    // Apply category filter\n    if (this.currentCategoryFilter !== 'all') {\n      filteredModules = filteredModules.filter(module => {\n        const categoryIndicator = this._getCategoryIndicator(module);\n        return categoryIndicator.category === this.currentCategoryFilter;\n      });\n    }\n\n    return filteredModules;\n  }\n\n  /**\n   * Attach event listeners\n   */\n  _attachEventListeners(container) {\n    // Status filter buttons\n    const filterButtons = container.querySelectorAll('.filter-btn');\n    filterButtons.forEach(btn => {\n      btn.addEventListener('click', e => {\n        const filter = e.target.dataset.filter;\n        this._handleFilterChange(filter, container);\n      });\n    });\n\n    // Category filter buttons\n    const categoryFilterButtons = container.querySelectorAll(\n      '.category-filter-btn'\n    );\n    categoryFilterButtons.forEach((btn, index) => {\n      btn.addEventListener('click', e => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        // Find the button element (in case we clicked on a child element)\n        const button = e.target.closest('.category-filter-btn');\n        const category = button\n          ? button.dataset.category\n          : btn.dataset.category;\n\n        // console.log('🖱️ Category button clicked:', category);\n        this._handleCategoryFilterChange(category, container);\n      });\n    });\n\n    // View module buttons\n    const viewButtons = container.querySelectorAll(\n      '[data-action=\"view-module\"]'\n    );\n    viewButtons.forEach(btn => {\n      btn.addEventListener('click', e => {\n        const moduleId = e.target.dataset.moduleId;\n        window.location.hash = `#/modules/${moduleId}`;\n      });\n    });\n\n    // Module card click (entire card clickable)\n    const moduleCards = container.querySelectorAll('.module-card');\n    moduleCards.forEach(card => {\n      card.addEventListener('click', e => {\n        // Don't trigger if clicking on button\n        if (e.target.closest('button')) return;\n\n        const moduleId = card.dataset.moduleId;\n        window.location.hash = `#/modules/${moduleId}`;\n      });\n\n      // Add hover cursor\n      card.style.cursor = 'pointer';\n    });\n  }\n\n  /**\n   * Handle filter change\n   */\n  _handleFilterChange(filter, container) {\n    this.currentFilter = filter;\n\n    // Update active filter button\n    const filterButtons = container.querySelectorAll('.filter-btn');\n    filterButtons.forEach(btn => {\n      if (btn.dataset.filter === filter) {\n        btn.classList.add('active');\n        btn.setAttribute('aria-pressed', 'true');\n      } else {\n        btn.classList.remove('active');\n        btn.setAttribute('aria-pressed', 'false');\n      }\n    });\n\n    this._refreshModuleGrid(container);\n  }\n\n  /**\n   * Handle category filter change\n   */\n  _handleCategoryFilterChange(category, container) {\n    this.currentCategoryFilter = category;\n\n    // Update active category filter button\n    const categoryFilterButtons = container.querySelectorAll(\n      '.category-filter-btn'\n    );\n    categoryFilterButtons.forEach(btn => {\n      if (btn.dataset.category === category) {\n        btn.classList.add('active');\n        btn.setAttribute('aria-pressed', 'true');\n      } else {\n        btn.classList.remove('active');\n        btn.setAttribute('aria-pressed', 'false');\n      }\n    });\n\n    this._refreshModuleGrid(container);\n  }\n\n  /**\n   * Refresh module grid with current filters\n   */\n  _refreshModuleGrid(container) {\n    // Find the existing module grid\n    const existingModuleGrid = container.querySelector('.module-grid');\n\n    if (existingModuleGrid) {\n      // Replace just the module grid content\n      const newModuleGridHTML = this._renderModuleGrid(this.modules);\n\n      // Create a temporary container to parse the HTML\n      const tempDiv = document.createElement('div');\n      tempDiv.innerHTML = newModuleGridHTML;\n      const newModuleGrid = tempDiv.querySelector('.module-grid');\n\n      if (newModuleGrid) {\n        // Replace the existing grid with the new one\n        existingModuleGrid.parentNode.replaceChild(\n          newModuleGrid,\n          existingModuleGrid\n        );\n\n        // Re-attach event listeners for new module cards\n        const viewButtons = newModuleGrid.querySelectorAll(\n          '[data-action=\"view-module\"]'\n        );\n        viewButtons.forEach(btn => {\n          btn.addEventListener('click', e => {\n            const moduleId = e.target.dataset.moduleId;\n            window.location.hash = `#/modules/${moduleId}`;\n          });\n        });\n\n        const moduleCards = newModuleGrid.querySelectorAll('.module-card');\n        moduleCards.forEach(card => {\n          card.addEventListener('click', e => {\n            if (e.target.closest('button')) return;\n            const moduleId = card.dataset.moduleId;\n            window.location.hash = `#/modules/${moduleId}`;\n          });\n          card.style.cursor = 'pointer';\n          card.setAttribute('tabindex', '0');\n\n          // Add keyboard support for card click\n          card.addEventListener('keydown', e => {\n            if (e.key === 'Enter' || e.key === ' ') {\n              if (!e.target.closest('button')) {\n                e.preventDefault();\n                const moduleId = card.dataset.moduleId;\n                window.location.hash = `#/modules/${moduleId}`;\n              }\n            }\n          });\n        });\n      }\n    }\n  }\n\n  /**\n   * Cleanup\n   */\n  cleanup() {\n    // Cleanup if needed\n  }\n}\n\nexport default ModuleListView;\n","/**\n * ModuleDetailView - Display module content with markdown rendering\n */\nclass ModuleDetailView {\n  constructor(services, params) {\n    this.moduleService = services.moduleService;\n    this.quizService = services.quizService;\n    this.ihkContentService = services.ihkContentService;\n    this.router = services.router;\n    this.moduleId = params.id;\n    this.module = null;\n    this.scrollProgress = 0;\n\n    // Lazy load dependencies\n    this.marked = null;\n    this.hljs = null;\n  }\n\n  /**\n   * Lazy load markdown and syntax highlighting libraries\n   */\n  async _loadDependencies() {\n    if (!this.marked || !this.hljs) {\n      try {\n        const [markedModule, hljsModule] = await Promise.all([\n          import('marked'),\n          import('highlight.js'),\n        ]);\n\n        this.marked = markedModule.marked;\n        this.hljs = hljsModule.default;\n\n        // Configure marked\n        this.marked.setOptions({\n          highlight: (code, lang) => {\n            if (lang && this.hljs.getLanguage && this.hljs.getLanguage(lang)) {\n              try {\n                return this.hljs.highlight(code, { language: lang }).value;\n              } catch (err) {\n                console.warn('Highlight error:', err);\n              }\n            }\n            if (this.hljs && typeof this.hljs.highlightAuto === 'function') {\n              return this.hljs.highlightAuto(code).value;\n            }\n            // last-resort: escape and wrap\n            return this._escapeHtml(code);\n          },\n          breaks: true,\n          gfm: true,\n        });\n      } catch (err) {\n        // If imports fail (dev server hiccup, network), provide a tiny fallback parser\n        // so the view can still render and inline micro-quiz hosts can be mounted.\n\n        console.warn(\n          'Failed to load markdown/highlight dependencies; using fallback parser',\n          err\n        );\n\n        this.hljs = {\n          getLanguage: () => false,\n          highlightAuto: code => ({ value: this._escapeHtml(code) }),\n        };\n\n        // Minimal markdown fallback: headings, code fences, inline code, links, paragraphs\n        this.marked = {\n          parse: md => {\n            if (!md) return '';\n            // Basic escape\n            let out = String(md);\n\n            // Code fences ```lang\\n...\\n```\n            out = out.replace(\n              /```([a-zA-Z0-9-_]*)\\n([\\s\\S]*?)```/g,\n              (m, lang, code) => {\n                return `<pre><code>${this._escapeHtml(code)}</code></pre>`;\n              }\n            );\n\n            // Headings (#, ##, ###)\n            out = out.replace(/^###\\s*(.*)$/gm, '<h3>$1</h3>');\n            out = out.replace(/^##\\s*(.*)$/gm, '<h2>$1</h2>');\n            out = out.replace(/^#\\s*(.*)$/gm, '<h1>$1</h1>');\n\n            // Inline code `code`\n            out = out.replace(\n              /`([^`]+)`/g,\n              (m, code) => `<code>${this._escapeHtml(code)}</code>`\n            );\n\n            // Links [text](url)\n            out = out.replace(\n              /\\[([^\\]]+)\\]\\(([^)]+)\\)/g,\n              '<a href=\"$2\">$1</a>'\n            );\n\n            // Paragraphs: split on two newlines\n            const parts = out\n              .split(/\\n\\s*\\n/)\n              .map(p => p.trim())\n              .filter(Boolean);\n            return parts.map(p => `<p>${p}</p>`).join('\\n');\n          },\n        };\n      }\n    }\n  }\n\n  /**\n   * Render module detail view\n   */\n  async render() {\n    const container = document.createElement('div');\n    container.className = 'module-detail-view';\n    container.id = 'main-content';\n    container.setAttribute('role', 'main');\n    container.setAttribute('aria-label', 'Module content');\n\n    try {\n      // Load dependencies and module data in parallel\n      await Promise.all([\n        this._loadDependencies(),\n        this.moduleService.getModuleById(this.moduleId).then(module => {\n          this.module = module;\n        }),\n      ]);\n\n      container.innerHTML = `\n        ${this._renderScrollProgress()}\n        ${this._renderHeader()}\n        <div class=\"module-detail-container\">\n          ${this._renderSidebar()}\n          ${this._renderContent()}\n        </div>\n      `;\n\n      this._attachEventListeners(container);\n      // Mount micro-quiz panel into sidebar if module defines microQuizzes and feature flag enabled\n      try {\n        const { isFeatureEnabled } = await import('../config/featureFlags.js');\n        if (\n          isFeatureEnabled &&\n          isFeatureEnabled('quizGating') &&\n          this.module.microQuizzes &&\n          this.module.microQuizzes.length > 0\n        ) {\n          const { default: MicroQuizPanel } = await import(\n            '../assessment/components/MicroQuizPanel.js'\n          );\n          const sidebarActions = container.querySelector('.sidebar-actions');\n          if (sidebarActions) {\n            // Create host for micro quiz panel\n            const mqHost = document.createElement('div');\n            mqHost.className = 'micro-quiz-host';\n            sidebarActions.insertBefore(mqHost, sidebarActions.firstChild);\n            this._microQuizPanel = new MicroQuizPanel(mqHost);\n            // Render first micro-quiz (assume array of micro quiz ids or objects)\n            const mq = this.module.microQuizzes[0];\n            // If the micro-quiz is an id, try to resolve it via ihkContentService\n            let quizObj = mq;\n            if (typeof mq === 'string') {\n              try {\n                quizObj = await this.ihkContentService.getQuizById(mq);\n              } catch (e) {\n                quizObj = null;\n              }\n            }\n            if (quizObj)\n              this._microQuizPanel.render(quizObj, {\n                requiredSections: this.module.requiredSections || [],\n              });\n          }\n        }\n      } catch (e) {\n        // Best-effort: do not fail rendering the whole view\n\n        console.warn('MicroQuizPanel mount failed', e);\n      }\n      this._generateTableOfContents(container);\n      this._setupScrollTracking(container);\n      // If no explicit inline markers are present but the module defines microQuizzes,\n      // insert an inline host into the rendered markdown so users can answer questions\n      // in-context (best-effort, non-destructive).\n      try {\n        const contentEl = container.querySelector('.markdown-content');\n        if (\n          contentEl &&\n          this.module.microQuizzes &&\n          this.module.microQuizzes.length > 0\n        ) {\n          const hasInline = contentEl.querySelector('.micro-quiz-inline');\n          if (!hasInline) {\n            const host = document.createElement('div');\n            host.className = 'micro-quiz-inline';\n            host.dataset.quizId = this.module.microQuizzes[0];\n\n            // Prefer inserting after the first code block (<pre>), otherwise after first heading, otherwise append\n            const afterNode =\n              contentEl.querySelector('pre') ||\n              contentEl.querySelector('h2') ||\n              contentEl.querySelector('h3');\n            if (afterNode && afterNode.parentNode) {\n              afterNode.parentNode.insertBefore(host, afterNode.nextSibling);\n            } else {\n              contentEl.appendChild(host);\n            }\n          }\n        }\n      } catch (e) {\n        // non-fatal\n        console.warn('Failed to inject inline micro-quiz host', e);\n      }\n      // Mount inline micro-quiz panels within the content (markers: <!-- micro-quiz:quizId -->)\n      try {\n        const inlineHosts = container.querySelectorAll('.micro-quiz-inline');\n        if (inlineHosts && inlineHosts.length > 0) {\n          const { default: MicroQuizPanel } = await import(\n            '../assessment/components/MicroQuizPanel.js'\n          );\n          this._inlineMicroQuizPanels = this._inlineMicroQuizPanels || [];\n          for (const host of Array.from(inlineHosts)) {\n            const quizId = host.dataset.quizId;\n            if (!quizId) continue;\n            let quizObj = null;\n            try {\n              // Primary resolution via content service\n              quizObj = await this.ihkContentService.getQuizById(quizId);\n            } catch (_) {\n              // resolution failed; try fallback import below\n              quizObj = null;\n            }\n\n            // Fallback: try dynamic import directly if content service couldn't resolve (best-effort)\n            if (!quizObj) {\n              try {\n                // dynamic import relative to this module file\n                const mod = await import(`../data/ihk/quizzes/${quizId}.json`);\n                quizObj = mod && mod.default ? mod.default : mod;\n              } catch (_) {\n                quizObj = null;\n              }\n            }\n\n            if (quizObj) {\n              const panel = new MicroQuizPanel(host);\n              panel.render(quizObj, {\n                requiredSections: this.module.requiredSections || [],\n              });\n              this._inlineMicroQuizPanels.push(panel);\n            } else {\n              // unable to resolve this quiz id - continue without failing the view\n              console.debug &&\n                console.warn(\n                  '[ModuleDetailView] unresolved micro-quiz id',\n                  quizId\n                );\n            }\n          }\n        }\n      } catch (e) {\n        // best-effort: mounting inline quizzes should not break module rendering\n        console.warn &&\n          console.warn(\n            'Failed to mount inline micro quizzes',\n            e && e.message ? e.message : e\n          );\n      }\n    } catch (error) {\n      console.error('Error rendering module detail:', error);\n      container.innerHTML = this._renderError(error.message);\n    }\n\n    return container;\n  }\n\n  /**\n   * Render scroll progress indicator\n   */\n  _renderScrollProgress() {\n    return `\n      <div class=\"scroll-progress-bar\" role=\"progressbar\" aria-label=\"Reading progress\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\">\n        <div class=\"scroll-progress-fill\" style=\"width: 0%\"></div>\n      </div>\n    `;\n  }\n\n  /**\n   * Render module header\n   */\n  _renderHeader() {\n    const statusBadge = this.module.completed\n      ? '<span class=\"badge badge-success\">✓ Completed</span>'\n      : this.module.inProgress\n        ? '<span class=\"badge badge-warning\">In Progress</span>'\n        : '<span class=\"badge badge-default\">Not Started</span>';\n\n    return `\n      <header class=\"module-detail-header\" role=\"banner\">\n        <button class=\"btn-ghost back-btn\" data-action=\"back\" aria-label=\"Go back to modules list\">\n          <span aria-hidden=\"true\">←</span> Back to Modules\n        </button>\n\n        <div class=\"module-header-content\">\n          <div class=\"module-header-meta\">\n            <span class=\"module-category\">${this.module.category || 'General'}</span>\n            ${statusBadge}\n          </div>\n\n          <h1 class=\"module-detail-title\">${this.module.title}</h1>\n          <p class=\"module-detail-description\">${this.formatInlineText(this.module.description)}</p>\n\n          <div class=\"module-header-info\" role=\"list\">\n            <div class=\"info-item\" role=\"listitem\">\n              <span class=\"info-icon\" aria-hidden=\"true\">⏱️</span>\n              <span><span class=\"sr-only\">Duration: </span>${this.module.duration || 30} minutes</span>\n            </div>\n            ${this._renderPrerequisites()}\n          </div>\n        </div>\n      </header>\n    `;\n  }\n\n  /**\n   * Normalize content that may contain literal backslash-n sequences\n   * and return a string suitable for markdown parsing.\n   */\n  _normalizeContent(text) {\n    if (!text) return '';\n    // Convert literal backslash-n and backslash-r\\n sequences to real newlines\n    return String(text)\n      .replace(/\\\\r\\\\n/g, '\\n')\n      .replace(/\\\\n/g, '\\n');\n  }\n\n  /**\n   * Format inline text fields (escape HTML and convert newlines to <br>)\n   */\n  formatInlineText(text) {\n    if (!text) return '';\n    const t = String(text).replace(/\\\\n/g, '\\n');\n    const escaped = this._escapeHtml(t);\n    return escaped.replace(/\\n/g, '<br>');\n  }\n\n  /**\n   * Escape HTML (internal helper for ModuleDetailView)\n   */\n  _escapeHtml(text) {\n    const div = document.createElement('div');\n    div.textContent = text;\n    return div.innerHTML;\n  }\n\n  /**\n   * Render prerequisites\n   */\n  _renderPrerequisites() {\n    if (!this.module.prerequisites || this.module.prerequisites.length === 0) {\n      return '';\n    }\n\n    return `\n      <div class=\"info-item\" role=\"listitem\">\n        <span class=\"info-icon\" aria-hidden=\"true\">📋</span>\n        <span>${this.module.prerequisites.length} prerequisite${this.module.prerequisites.length > 1 ? 's' : ''}</span>\n      </div>\n    `;\n  }\n\n  /**\n   * Render sidebar with table of contents\n   */\n  _renderSidebar() {\n    return `\n      <aside class=\"module-sidebar\" role=\"complementary\" aria-label=\"Module navigation and actions\">\n        <div class=\"sidebar-sticky\">\n          <h2 class=\"sidebar-title\">Table of Contents</h2>\n          <nav class=\"table-of-contents\" id=\"toc\" aria-label=\"Table of contents\">\n            <!-- Generated dynamically -->\n          </nav>\n\n          <div class=\"sidebar-actions\" role=\"group\" aria-label=\"Module actions\">\n            <button class=\"btn-primary w-full\" data-action=\"mark-complete\" ${this.module.completed ? 'disabled' : ''} aria-label=\"${this.module.completed ? 'Module already completed' : 'Mark this module as complete'}\">\n              ${this.module.completed ? '✓ Completed' : 'Mark as Complete'}\n            </button>\n            <button class=\"btn-secondary w-full\" data-action=\"view-quiz\" aria-label=\"Take quiz for this module\">\n              Take Quiz <span aria-hidden=\"true\">→</span>\n            </button>\n          </div>\n        </div>\n      </aside>\n    `;\n  }\n\n  /**\n   * Render module content\n   */\n  _renderContent() {\n    const raw = this.module.content || '# No content available';\n    const normalized = this._normalizeContent(raw);\n    // Convert inline micro-quiz markers in the markdown into host divs\n    // Marker syntax: <!-- micro-quiz:quizId -->\n    const replaced = String(normalized).replace(\n      /<!--\\s*micro-quiz:([a-zA-Z0-9-_]+)\\s*-->/g,\n      (m, id) => {\n        return `<div class=\"micro-quiz-inline\" data-quiz-id=\"${id}\"></div>`;\n      }\n    );\n\n    const htmlContent = this.marked.parse(replaced);\n\n    return `\n      <div class=\"module-content\" role=\"region\" aria-label=\"Module content\">\n        <article class=\"markdown-content\">\n          ${htmlContent}\n        </article>\n      </div>\n    `;\n  }\n\n  /**\n   * Render error state\n   */\n  _renderError(message) {\n    return `\n      <div class=\"error-state\">\n        <h2>Unable to load module</h2>\n        <p>${message}</p>\n        <button class=\"btn-primary\" onclick=\"window.location.hash = '#/modules'\">\n          Back to Modules\n        </button>\n      </div>\n    `;\n  }\n\n  /**\n   * Generate table of contents from headings\n   */\n  _generateTableOfContents(container) {\n    const content = container.querySelector('.markdown-content');\n    const toc = container.querySelector('#toc');\n\n    if (!content || !toc) return;\n\n    const headings = content.querySelectorAll('h1, h2, h3');\n    if (headings.length === 0) {\n      toc.innerHTML = '<p class=\"toc-empty\">No sections</p>';\n      return;\n    }\n\n    const tocItems = Array.from(headings).map((heading, index) => {\n      const id = `heading-${index}`;\n      heading.id = id;\n\n      const level = parseInt(heading.tagName.substring(1));\n      const indent = level > 1 ? `toc-level-${level}` : '';\n\n      return `\n        <a href=\"#${id}\" class=\"toc-item ${indent}\" data-heading-id=\"${id}\">\n          ${heading.textContent}\n        </a>\n      `;\n    });\n\n    toc.innerHTML = tocItems.join('');\n\n    // Add smooth scroll to TOC links\n    toc.querySelectorAll('.toc-item').forEach(link => {\n      link.addEventListener('click', e => {\n        e.preventDefault();\n        const targetId = link.dataset.headingId;\n        const target = document.getElementById(targetId);\n        if (target) {\n          target.scrollIntoView({ behavior: 'smooth', block: 'start' });\n          // Update active TOC item\n          this._updateActiveTocItem(targetId, container);\n        }\n      });\n    });\n  }\n\n  /**\n   * Setup scroll tracking\n   */\n  _setupScrollTracking(container) {\n    const updateProgress = () => {\n      const windowHeight = window.innerHeight;\n      const documentHeight = document.documentElement.scrollHeight;\n      const scrollTop = window.scrollY;\n      const scrollPercent = (scrollTop / (documentHeight - windowHeight)) * 100;\n      const clampedPercent = Math.min(Math.max(scrollPercent, 0), 100);\n\n      const progressBar = container.querySelector('.scroll-progress-bar');\n      const progressFill = container.querySelector('.scroll-progress-fill');\n      if (progressFill) {\n        progressFill.style.width = `${clampedPercent}%`;\n      }\n      if (progressBar) {\n        progressBar.setAttribute('aria-valuenow', Math.round(clampedPercent));\n      }\n\n      // Update active TOC item based on scroll position\n      this._updateActiveTocItemOnScroll(container);\n    };\n\n    window.addEventListener('scroll', updateProgress);\n    this.scrollHandler = updateProgress;\n  }\n\n  /**\n   * Update active TOC item on scroll\n   */\n  _updateActiveTocItemOnScroll(container) {\n    const headings = container.querySelectorAll(\n      '.markdown-content [id^=\"heading-\"]'\n    );\n    const tocItems = container.querySelectorAll('.toc-item');\n\n    let activeId = null;\n    const scrollPos = window.scrollY + 100;\n\n    headings.forEach(heading => {\n      if (heading.offsetTop <= scrollPos) {\n        activeId = heading.id;\n      }\n    });\n\n    tocItems.forEach(item => {\n      if (item.dataset.headingId === activeId) {\n        item.classList.add('active');\n      } else {\n        item.classList.remove('active');\n      }\n    });\n  }\n\n  /**\n   * Update active TOC item\n   */\n  _updateActiveTocItem(headingId, container) {\n    const tocItems = container.querySelectorAll('.toc-item');\n    tocItems.forEach(item => {\n      if (item.dataset.headingId === headingId) {\n        item.classList.add('active');\n      } else {\n        item.classList.remove('active');\n      }\n    });\n  }\n\n  /**\n   * Attach event listeners\n   */\n  _attachEventListeners(container) {\n    // Back button\n    const backBtn = container.querySelector('[data-action=\"back\"]');\n    if (backBtn) {\n      backBtn.addEventListener('click', () => {\n        window.location.hash = '#/modules';\n      });\n    }\n\n    // Mark as complete button\n    const completeBtn = container.querySelector(\n      '[data-action=\"mark-complete\"]'\n    );\n    if (completeBtn && !this.module.completed) {\n      completeBtn.addEventListener('click', async () => {\n        try {\n          await this.moduleService.markModuleComplete(this.moduleId);\n          completeBtn.disabled = true;\n          completeBtn.textContent = '✓ Completed';\n          completeBtn.classList.add('btn-success');\n\n          // Show success message\n          this._showNotification('Module marked as complete! 🎉');\n        } catch (error) {\n          console.error('Error marking module complete:', error);\n          this._showNotification('Failed to mark module as complete', 'error');\n        }\n      });\n    }\n\n    // View quiz button\n    const quizBtn = container.querySelector('[data-action=\"view-quiz\"]');\n    if (quizBtn) {\n      quizBtn.addEventListener('click', async () => {\n        try {\n          const quizzes = await this.ihkContentService.getAllQuizzes();\n          const relatedQuiz = quizzes.find(q => q.moduleId === this.moduleId);\n\n          if (relatedQuiz) {\n            window.location.hash = `#/quizzes/${relatedQuiz.id}`;\n          } else {\n            this._showNotification(\n              'No quiz available for this module',\n              'warning'\n            );\n          }\n        } catch (error) {\n          console.error('Error loading quiz:', error);\n          this._showNotification('Failed to load quiz', 'error');\n        }\n      });\n    }\n  }\n\n  /**\n   * Show notification (simple implementation)\n   */\n  _showNotification(message, type = 'success') {\n    const notification = document.createElement('div');\n    notification.className = `notification notification-${type}`;\n    notification.textContent = message;\n    document.body.appendChild(notification);\n\n    setTimeout(() => {\n      notification.classList.add('show');\n    }, 10);\n\n    setTimeout(() => {\n      notification.classList.remove('show');\n      setTimeout(() => notification.remove(), 300);\n    }, 3000);\n  }\n\n  /**\n   * Cleanup\n   */\n  cleanup() {\n    if (this.scrollHandler) {\n      window.removeEventListener('scroll', this.scrollHandler);\n    }\n    // cleanup micro-quiz panel if mounted\n    try {\n      if (\n        this._microQuizPanel &&\n        typeof this._microQuizPanel.destroy === 'function'\n      )\n        this._microQuizPanel.destroy();\n    } catch (e) {\n      // swallow\n    }\n  }\n}\n\nexport default ModuleDetailView;\n","/**\n * Event handling utilities for consistent event management across components\n */\n\n/**\n * Attach multiple event listeners with a single function call\n * @param {HTMLElement} container - Container element to search within\n * @param {Array} eventConfigs - Array of event configuration objects\n *\n * Example usage:\n * attachEventListeners(container, [\n *   { selector: '.btn-primary', event: 'click', handler: () => console.warn('clicked') },\n *   { selector: '.input', event: 'input', handler: (e) => console.warn(e.target.value) }\n * ]);\n */\nexport function attachEventListeners(container, eventConfigs) {\n  eventConfigs.forEach(config => {\n    const { selector, event, handler, options = {} } = config;\n\n    if (selector && event && handler) {\n      const elements = container.querySelectorAll(selector);\n      elements.forEach(element => {\n        element.addEventListener(event, handler, options);\n      });\n    }\n  });\n}\n\n/**\n * Create a standardized filter button handler\n * @param {HTMLElement} container - Container with filter buttons\n * @param {Function} onFilterChange - Callback when filter changes\n * @param {string} activeClass - CSS class for active filter (default: 'active')\n */\nexport function attachFilterListeners(\n  container,\n  onFilterChange,\n  activeClass = 'active'\n) {\n  const filterButtons = container.querySelectorAll('.filter-btn');\n\n  filterButtons.forEach(btn => {\n    btn.addEventListener('click', e => {\n      // Update active state\n      filterButtons.forEach(b => b.classList.remove(activeClass));\n      btn.classList.add(activeClass);\n\n      // Get filter value\n      const filter = btn.dataset.filter || btn.textContent.toLowerCase();\n\n      // Call handler\n      if (onFilterChange) {\n        onFilterChange(filter, btn, e);\n      }\n    });\n  });\n}\n\n/**\n * Create standardized navigation button handlers\n * @param {HTMLElement} container - Container with navigation buttons\n * @param {Object} router - Router instance for navigation\n * @param {Object} routes - Map of button selectors to routes\n *\n * Example:\n * attachNavigationListeners(container, router, {\n *   '[data-action=\"back\"]': '/modules',\n *   '[data-action=\"home\"]': '/',\n *   '.module-card': (element) => `/modules/${element.dataset.moduleId}`\n * });\n */\nexport function attachNavigationListeners(container, router, routes) {\n  Object.entries(routes).forEach(([selector, route]) => {\n    const elements = container.querySelectorAll(selector);\n\n    elements.forEach(element => {\n      element.addEventListener('click', e => {\n        e.preventDefault();\n\n        // Determine route\n        let targetRoute;\n        if (typeof route === 'function') {\n          targetRoute = route(element, e);\n        } else {\n          targetRoute = route;\n        }\n\n        // Navigate\n        if (router && targetRoute) {\n          router.navigate(targetRoute);\n        } else if (targetRoute) {\n          window.location.hash = `#${targetRoute}`;\n        }\n      });\n    });\n  });\n}\n\n/**\n * Create standardized action button handlers with loading states\n * @param {HTMLElement} container - Container with action buttons\n * @param {Object} actions - Map of button selectors to action functions\n *\n * Example:\n * attachActionListeners(container, {\n *   '[data-action=\"complete\"]': async (btn, e) => {\n *     await completeModule();\n *     btn.textContent = 'Completed!';\n *   },\n *   '[data-action=\"export\"]': exportData\n * });\n */\nexport function attachActionListeners(container, actions) {\n  Object.entries(actions).forEach(([selector, actionFn]) => {\n    const elements = container.querySelectorAll(selector);\n\n    elements.forEach(element => {\n      element.addEventListener('click', async e => {\n        e.preventDefault();\n\n        if (!actionFn) return;\n\n        // Store original state\n        const originalText = element.textContent;\n        const originalDisabled = element.disabled;\n\n        try {\n          // Set loading state\n          element.disabled = true;\n\n          // Execute action\n          await actionFn(element, e);\n        } catch (error) {\n          console.error('Action failed:', error);\n\n          // Show error state briefly\n          element.textContent = 'Error';\n          element.classList.add('btn-error');\n\n          setTimeout(() => {\n            element.textContent = originalText;\n            element.classList.remove('btn-error');\n          }, 2000);\n        } finally {\n          // Restore original state\n          element.disabled = originalDisabled;\n        }\n      });\n    });\n  });\n}\n\n/**\n * Create a delegated event listener for dynamic content\n * @param {HTMLElement} container - Container element\n * @param {string} selector - CSS selector for target elements\n * @param {string} event - Event type\n * @param {Function} handler - Event handler function\n */\nexport function attachDelegatedListener(container, selector, event, handler) {\n  container.addEventListener(event, e => {\n    const target = e.target.closest(selector);\n    if (target) {\n      handler(e, target);\n    }\n  });\n}\n\n/**\n * Create standardized tab switching functionality\n * @param {HTMLElement} container - Container with tabs\n * @param {Function} onTabChange - Callback when tab changes\n * @param {string} tabSelector - CSS selector for tab buttons (default: '.tab-btn')\n * @param {string} activeClass - CSS class for active tab (default: 'active')\n */\nexport function attachTabListeners(\n  container,\n  onTabChange,\n  tabSelector = '.tab-btn',\n  activeClass = 'active'\n) {\n  const tabs = container.querySelectorAll(tabSelector);\n\n  tabs.forEach(tab => {\n    tab.addEventListener('click', e => {\n      e.preventDefault();\n\n      // Update active state\n      tabs.forEach(t => t.classList.remove(activeClass));\n      tab.classList.add(activeClass);\n\n      // Get tab identifier\n      const tabId = tab.dataset.tab || tab.textContent.toLowerCase();\n\n      // Call handler\n      if (onTabChange) {\n        onTabChange(tabId, tab, e);\n      }\n    });\n  });\n}\n\n/**\n * Debounce function for search inputs and other frequent events\n * @param {Function} func - Function to debounce\n * @param {number} wait - Wait time in milliseconds\n * @param {boolean} immediate - Execute immediately on first call\n * @returns {Function} Debounced function\n */\nexport function debounce(func, wait, immediate = false) {\n  let timeout;\n\n  return function executedFunction(...args) {\n    const later = () => {\n      timeout = null;\n      if (!immediate) func.apply(this, args);\n    };\n\n    const callNow = immediate && !timeout;\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n\n    if (callNow) func.apply(this, args);\n  };\n}\n\n/**\n * Create standardized search input handler with debouncing\n * @param {HTMLElement} searchInput - Search input element\n * @param {Function} onSearch - Search handler function\n * @param {number} debounceMs - Debounce delay in milliseconds (default: 300)\n */\nexport function attachSearchListener(searchInput, onSearch, debounceMs = 300) {\n  const debouncedSearch = debounce(query => {\n    if (onSearch) {\n      onSearch(query.trim());\n    }\n  }, debounceMs);\n\n  searchInput.addEventListener('input', e => {\n    debouncedSearch(e.target.value);\n  });\n\n  // Handle enter key\n  searchInput.addEventListener('keydown', e => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      if (onSearch) {\n        onSearch(e.target.value.trim());\n      }\n    }\n  });\n}\n","/**\n * IHK Quiz List View\n * Displays all IHK quizzes with filtering\n */\n\nimport accessibilityHelper from '../utils/AccessibilityHelper.js';\nimport { debounce } from '../utils/eventUtils.js';\n\nimport EmptyState from './EmptyState.js';\nimport LoadingSpinner from './LoadingSpinner.js';\nimport toastNotification from './ToastNotification.js';\n\nclass IHKQuizListView {\n  constructor(services) {\n    this.services = services;\n    this.ihkContentService = services.ihkContentService;\n    this.specializationService = services.specializationService;\n    this.categoryMappingService = services.categoryMappingService;\n    this.stateManager = services.stateManager;\n    this.router = services.router;\n    this.quizzes = [];\n\n    // Initialize filter states with proper defaults\n    this.currentCategoryFilter = 'all';\n    this.currentStatusFilter = 'all';\n\n    // Initialize filter state tracking\n    this.filterInitialized = false;\n\n    // Initialize debounced filter operations\n    this.debouncedRefreshQuizGrid = debounce(\n      container => this._performQuizGridRefresh(container),\n      100, // 100ms debounce for responsive feel\n      false\n    );\n\n    // Track filter operation state\n    this.filterOperationInProgress = false;\n    this.pendingFilterOperations = new Set();\n  }\n\n  /**\n   * Render the quiz list view\n   */\n  async render() {\n    const container = document.createElement('div');\n    container.className = 'ihk-quiz-list-view';\n    container.innerHTML = LoadingSpinner.render('Loading IHK quizzes...');\n\n    // Load quizzes asynchronously\n    window.setTimeout(async () => {\n      try {\n        await this.loadQuizzes();\n        container.innerHTML = '';\n        container.appendChild(this.renderContent());\n        accessibilityHelper.announce(\n          `${this.quizzes.length} IHK quizzes loaded`\n        );\n      } catch (error) {\n        console.error('Error loading IHK quizzes:', error);\n\n        // Get user-friendly error message\n        const friendlyMessage = this._getUserFriendlyFilterErrorMessage(error, {\n          operation: 'loading',\n          quizCount: this.quizzes?.length || 0,\n        });\n\n        const errorState = EmptyState.create({\n          icon: '⚠️',\n          title: 'Error Loading Quizzes',\n          message: friendlyMessage,\n          action: {\n            label: 'Retry',\n            onClick: () => this.render(),\n          },\n        });\n        container.innerHTML = '';\n        container.appendChild(errorState);\n\n        // Show appropriate notification based on error type\n        const errorType = this._categorizeFilterError(error);\n        if (errorType === 'network') {\n          toastNotification.error(\n            'Network error loading quizzes. Check your connection.'\n          );\n        } else {\n          toastNotification.error('Failed to load IHK quizzes');\n        }\n      }\n    }, 0);\n\n    return container;\n  }\n\n  /**\n   * Load all quizzes with validation\n   */\n  async loadQuizzes() {\n    try {\n      // Get all quizzes from IHKContentService\n      this.quizzes = await this.ihkContentService.getAllQuizzes();\n\n      // Validate quiz data structure\n      if (!Array.isArray(this.quizzes)) {\n        throw new Error('Invalid quiz data: expected array');\n      }\n\n      // Get current specialization for filtering\n      this.currentSpecialization =\n        this.specializationService.getCurrentSpecialization();\n\n      // Enrich with progress data\n      this.enrichQuizzesWithProgress();\n\n      // Validate category data and show warnings if needed\n      const validationReport = this._validateAllQuizCategories();\n      this._showCategoryValidationWarnings(validationReport);\n\n      // Log loading success\n      console.warn('Quizzes loaded successfully:', {\n        totalQuizzes: this.quizzes.length,\n        validQuizzes: validationReport.validQuizzes,\n        invalidQuizzes: validationReport.invalidQuizzes,\n        categoryDistribution: validationReport.categoryDistribution,\n      });\n    } catch (error) {\n      console.error('Error loading quizzes:', error);\n\n      // Ensure quizzes array is always valid\n      if (!Array.isArray(this.quizzes)) {\n        this.quizzes = [];\n      }\n\n      throw error; // Re-throw to be handled by render method\n    }\n  }\n\n  /**\n   * Enrich quizzes with progress data\n   */\n  enrichQuizzesWithProgress() {\n    const progress = this.stateManager.getState('progress') || {};\n    const quizAttempts = progress.quizAttempts || [];\n\n    this.quizzes = this.quizzes.map(quiz => {\n      const attempts = quizAttempts.filter(a => a.quizId === quiz.id);\n      const bestScore =\n        attempts.length > 0 ? Math.max(...attempts.map(a => a.score)) : null;\n      const lastAttempt =\n        attempts.length > 0 ? attempts[attempts.length - 1] : null;\n\n      return {\n        ...quiz,\n        attempts: attempts.length,\n        bestScore,\n        lastAttempt,\n        completed: bestScore !== null && bestScore >= 70,\n      };\n    });\n  }\n\n  /**\n   * Render the main content\n   */\n  renderContent() {\n    const content = document.createElement('div');\n    content.className = 'ihk-quiz-list-content';\n\n    // Header\n    const header = this.renderHeader();\n    content.appendChild(header);\n\n    // Filters\n    const filters = this.renderFilters();\n    content.appendChild(filters);\n\n    // Quiz grid\n    const quizGrid = this.renderQuizGrid();\n    content.appendChild(quizGrid);\n\n    // Attach event listeners\n    this.attachEventListeners(content);\n\n    // Initialize filter states after rendering\n    this._initializeFilterStates(content);\n\n    return content;\n  }\n\n  /**\n   * Render header\n   */\n  renderHeader() {\n    const header = document.createElement('div');\n    header.className = 'page-header';\n\n    // Calculate initial quiz count\n    const filteredQuizzes = this._filterQuizzes(this.quizzes);\n    const countDisplay = this._createQuizCountDisplay(\n      filteredQuizzes.length,\n      this.quizzes.length\n    );\n\n    header.innerHTML = `\n      <h1>IHK Quizzes</h1>\n      <p class=\"subtitle\">Teste dein Wissen mit prüfungsrelevanten Quizzes</p>\n      <div class=\"quiz-count-display\" role=\"status\" aria-live=\"polite\">\n        ${countDisplay}\n      </div>\n    `;\n    return header;\n  }\n\n  /**\n   * Render filters\n   */\n  renderFilters() {\n    const filtersContainer = document.createElement('div');\n    filtersContainer.className = 'quiz-filters-container';\n\n    // Status filters\n    const statusFilters = this.renderStatusFilters();\n    filtersContainer.appendChild(statusFilters);\n\n    // Category filters (only if specialization is selected)\n    if (this.currentSpecialization) {\n      const categoryFilters = this.renderCategoryFilters();\n      filtersContainer.appendChild(categoryFilters);\n    }\n\n    return filtersContainer;\n  }\n\n  /**\n   * Render status filter buttons with proper initialization\n   */\n  renderStatusFilters() {\n    // Ensure currentStatusFilter is initialized to 'all' if not set\n    if (!this.currentStatusFilter) {\n      this.currentStatusFilter = 'all';\n    }\n\n    const statusOptions = [\n      { id: 'all', label: 'All Quizzes' },\n      { id: 'completed', label: 'Completed' },\n      { id: 'attempted', label: 'Attempted' },\n      { id: 'not-started', label: 'Not Started' },\n    ];\n\n    const statusButtons = statusOptions\n      .map(status => {\n        const isActive = status.id === this.currentStatusFilter;\n        return `\n        <button \n          class=\"filter-btn ${isActive ? 'active' : ''}\" \n          data-status=\"${status.id}\" \n          aria-pressed=\"${isActive ? 'true' : 'false'}\"\n          aria-label=\"Show ${status.label.toLowerCase()}\"\n        >\n          ${status.label}\n        </button>\n      `;\n      })\n      .join('');\n\n    const statusFilters = document.createElement('div');\n    statusFilters.className = 'quiz-status-filters';\n    statusFilters.innerHTML = `\n      <h3 class=\"filter-section-title\">Filter by Status</h3>\n      <div class=\"filter-buttons\">\n        ${statusButtons}\n      </div>\n    `;\n    return statusFilters;\n  }\n\n  /**\n   * Render category filter buttons with proper initialization\n   */\n  renderCategoryFilters() {\n    const categories = this._getCategoryFilters();\n\n    // Ensure currentCategoryFilter is initialized to 'all' if not set\n    if (!this.currentCategoryFilter) {\n      this.currentCategoryFilter = 'all';\n    }\n\n    const categoryButtons = categories\n      .map(category => {\n        const isActive = category.id === this.currentCategoryFilter;\n        return `\n        <button \n          class=\"category-filter-btn ${isActive ? 'active' : ''}\" \n          data-category=\"${category.id}\" \n          aria-pressed=\"${isActive ? 'true' : 'false'}\"\n          aria-label=\"Show ${category.name} quizzes\"\n          style=\"--category-color: ${category.color}\"\n        >\n          <span class=\"category-icon\" aria-hidden=\"true\">${category.icon}</span>\n          <span class=\"category-name\">${category.name}</span>\n        </button>\n      `;\n      })\n      .join('');\n\n    const categoryFilters = document.createElement('div');\n    categoryFilters.className = 'quiz-category-filters';\n    categoryFilters.innerHTML = `\n      <h3 class=\"filter-section-title\">Filter by Category</h3>\n      <div class=\"category-filter-buttons\">\n        ${categoryButtons}\n      </div>\n    `;\n\n    return categoryFilters;\n  }\n\n  /**\n   * Get category filters using three-tier category system\n   */\n  _getCategoryFilters() {\n    const categories = [\n      {\n        id: 'all',\n        name: 'All Categories',\n        icon: '📚',\n        color: '#6b7280',\n      },\n      {\n        id: 'daten-prozessanalyse',\n        name: 'Daten und Prozessanalyse',\n        icon: '📊',\n        color: '#2563eb',\n      },\n      {\n        id: 'anwendungsentwicklung',\n        name: 'Anwendungsentwicklung',\n        icon: '💻',\n        color: '#dc2626',\n      },\n      {\n        id: 'allgemein',\n        name: 'Allgemein',\n        icon: '📖',\n        color: '#059669',\n      },\n    ];\n\n    return categories;\n  }\n\n  /**\n   * Render quiz grid\n   */\n  renderQuizGrid() {\n    const grid = document.createElement('div');\n    grid.className = 'quiz-grid';\n\n    const filteredQuizzes = this._filterQuizzes(this.quizzes);\n\n    if (filteredQuizzes.length === 0) {\n      const emptyState = this._createEnhancedEmptyState();\n      grid.appendChild(emptyState);\n      return grid;\n    }\n\n    filteredQuizzes.forEach(quiz => {\n      const card = this.renderQuizCard(quiz);\n      grid.appendChild(card);\n    });\n\n    return grid;\n  }\n\n  /**\n   * Filter quizzes based on current filters with comprehensive error handling\n   */\n  _filterQuizzes(quizzes) {\n    try {\n      // Validate input\n      if (!Array.isArray(quizzes)) {\n        console.error('_filterQuizzes: Invalid quizzes input - not an array', {\n          quizzes,\n        });\n        return [];\n      }\n\n      let filteredQuizzes = [...quizzes];\n      const filterStartTime = performance.now();\n\n      // Apply status filter with error handling\n      try {\n        filteredQuizzes = this._applyStatusFilter(filteredQuizzes);\n      } catch (statusError) {\n        console.error('Error applying status filter:', {\n          error: statusError.message,\n          currentStatusFilter: this.currentStatusFilter,\n          quizCount: filteredQuizzes.length,\n        });\n        // Continue with unfiltered quizzes for status\n      }\n\n      // Apply category filter with error handling\n      if (this.currentCategoryFilter !== 'all') {\n        try {\n          filteredQuizzes = this._applyCategoryFilter(filteredQuizzes);\n        } catch (categoryError) {\n          console.error('Error applying category filter:', {\n            error: categoryError.message,\n            currentCategoryFilter: this.currentCategoryFilter,\n            quizCount: filteredQuizzes.length,\n          });\n          // Continue with status-filtered quizzes only\n        }\n      }\n\n      const filterEndTime = performance.now();\n      const filterDuration = filterEndTime - filterStartTime;\n\n      // Log performance warning if filtering takes too long\n      if (filterDuration > 100) {\n        console.warn('Filter operation took longer than expected:', {\n          duration: `${filterDuration.toFixed(2)}ms`,\n          inputCount: quizzes.length,\n          outputCount: filteredQuizzes.length,\n          statusFilter: this.currentStatusFilter,\n          categoryFilter: this.currentCategoryFilter,\n        });\n      }\n\n      // Debug logging when enabled\n      if (this._isDebugEnabled()) {\n        console.warn('Filter operation completed:', {\n          inputCount: quizzes.length,\n          outputCount: filteredQuizzes.length,\n          duration: `${filterDuration.toFixed(2)}ms`,\n          statusFilter: this.currentStatusFilter,\n          categoryFilter: this.currentCategoryFilter,\n        });\n      }\n\n      return filteredQuizzes;\n    } catch (error) {\n      console.error('Critical error in _filterQuizzes:', {\n        error: error.message,\n        stack: error.stack,\n        quizCount: quizzes?.length || 0,\n        statusFilter: this.currentStatusFilter,\n        categoryFilter: this.currentCategoryFilter,\n        timestamp: new Date().toISOString(),\n      });\n\n      // Return all quizzes as fallback\n      return Array.isArray(quizzes) ? quizzes : [];\n    }\n  }\n\n  /**\n   * Apply status filter with error handling\n   * @private\n   */\n  _applyStatusFilter(quizzes) {\n    switch (this.currentStatusFilter) {\n      case 'completed':\n        return quizzes.filter(quiz => {\n          try {\n            return (\n              quiz && typeof quiz.completed === 'boolean' && quiz.completed\n            );\n          } catch (error) {\n            console.warn(\n              `Error checking completion status for quiz ${quiz?.id}:`,\n              error\n            );\n            return false;\n          }\n        });\n      case 'attempted':\n        return quizzes.filter(quiz => {\n          try {\n            return (\n              quiz &&\n              typeof quiz.attempts === 'number' &&\n              quiz.attempts > 0 &&\n              (!quiz.completed || quiz.completed === false)\n            );\n          } catch (error) {\n            console.warn(\n              `Error checking attempt status for quiz ${quiz?.id}:`,\n              error\n            );\n            return false;\n          }\n        });\n      case 'not-started':\n        return quizzes.filter(quiz => {\n          try {\n            return (\n              quiz &&\n              (typeof quiz.attempts === 'number' ? quiz.attempts === 0 : true)\n            );\n          } catch (error) {\n            console.warn(\n              `Error checking not-started status for quiz ${quiz?.id}:`,\n              error\n            );\n            return false;\n          }\n        });\n      case 'all':\n      default:\n        return quizzes;\n    }\n  }\n\n  /**\n   * Apply category filter with error handling\n   * @private\n   */\n  _applyCategoryFilter(quizzes) {\n    const categoryErrors = [];\n\n    const filteredQuizzes = quizzes.filter(quiz => {\n      try {\n        const categoryIndicator = this._getCategoryIndicator(quiz);\n\n        // Check if this was a fallback category\n        if (categoryIndicator._isFallback) {\n          categoryErrors.push({\n            quizId: quiz?.id,\n            reason: categoryIndicator._fallbackReason,\n          });\n        }\n\n        return categoryIndicator.category === this.currentCategoryFilter;\n      } catch (error) {\n        console.warn(`Error filtering quiz ${quiz?.id} by category:`, {\n          error: error.message,\n          quizId: quiz?.id,\n          targetCategory: this.currentCategoryFilter,\n        });\n        return false;\n      }\n    });\n\n    // Log category errors if any occurred\n    if (categoryErrors.length > 0) {\n      console.warn('Category filtering encountered fallbacks:', {\n        errorCount: categoryErrors.length,\n        totalQuizzes: quizzes.length,\n        targetCategory: this.currentCategoryFilter,\n        errors: categoryErrors.slice(0, 5), // Log first 5 errors\n      });\n    }\n\n    return filteredQuizzes;\n  }\n\n  /**\n   * Render a single quiz card\n   */\n  renderQuizCard(quiz) {\n    const categoryIndicator = this._getCategoryIndicator(quiz);\n\n    const card = document.createElement('article');\n    card.className = `quiz-card ${categoryIndicator.cssClass}`;\n    card.setAttribute('data-category', categoryIndicator.category);\n    if (quiz.completed) card.classList.add('completed');\n\n    const statusBadge = quiz.completed\n      ? '<span class=\"badge badge-success\">✓ Bestanden</span>'\n      : quiz.attempts > 0\n        ? '<span class=\"badge badge-info\">Versucht</span>'\n        : '';\n\n    const scoreDisplay =\n      quiz.bestScore !== null\n        ? `<div class=\"quiz-score\">\n           <span class=\"score-label\">Beste Punktzahl:</span>\n           <span class=\"score-value\">${quiz.bestScore}%</span>\n         </div>`\n        : '';\n\n    card.innerHTML = `\n      <div class=\"quiz-card-header\">\n        <div class=\"quiz-title-section\">\n          <div class=\"quiz-category-display\">\n            <span class=\"category-indicator\" style=\"background-color: ${categoryIndicator.color}\" aria-hidden=\"true\">${categoryIndicator.icon}</span>\n            <span class=\"category-text\">${categoryIndicator.displayName}</span>\n          </div>\n          <h3>${quiz.title}</h3>\n        </div>\n        <div class=\"quiz-badges\">\n          ${statusBadge}\n        </div>\n      </div>\n      <p class=\"quiz-description\">${quiz.description}</p>\n      <div class=\"quiz-meta\">\n        <span class=\"difficulty difficulty-${quiz.difficulty}\">\n          ${this.getDifficultyLabel(quiz.difficulty)}\n        </span>\n        <span class=\"questions\">\n          <span aria-hidden=\"true\">❓</span>\n          ${quiz.questions.length} Fragen\n        </span>\n        ${\n          quiz.timeLimit\n            ? `\n          <span class=\"time-limit\">\n            <span aria-hidden=\"true\">⏱️</span>\n            ${quiz.timeLimit}min\n          </span>\n        `\n            : ''\n        }\n      </div>\n      ${scoreDisplay}\n      ${\n        quiz.attempts > 0\n          ? `\n        <div class=\"quiz-attempts\">\n          Versuche: ${quiz.attempts}\n        </div>\n      `\n          : ''\n      }\n      <div class=\"quiz-card-footer\">\n        <button \n          class=\"btn btn-primary\"\n          onclick=\"window.location.hash = '#/quizzes/${quiz.id}'\"\n          aria-label=\"Start quiz: ${quiz.title}\"\n        >\n          ${quiz.attempts > 0 ? 'Quiz wiederholen' : 'Quiz starten'}\n        </button>\n      </div>\n    `;\n\n    return card;\n  }\n\n  /**\n   * Get category indicator for quiz using CategoryMappingService\n   */\n  _getCategoryIndicator(quiz) {\n    try {\n      // Validate quiz data before processing\n      if (!quiz) {\n        console.warn('_getCategoryIndicator: Quiz object is null or undefined');\n        return this._createFallbackCategoryIndicator('Quiz data missing');\n      }\n\n      if (!quiz.id) {\n        console.warn('_getCategoryIndicator: Quiz missing ID field', { quiz });\n        return this._createFallbackCategoryIndicator('Quiz ID missing');\n      }\n\n      // Use CategoryMappingService for consistent category detection\n      const mappingResult =\n        this.categoryMappingService.mapToThreeTierCategory(quiz);\n\n      if (mappingResult && mappingResult.threeTierCategory) {\n        // Log successful mapping for debugging when enabled\n        if (this._isDebugEnabled()) {\n          console.warn(`Category mapping successful for quiz ${quiz.id}:`, {\n            quizId: quiz.id,\n            originalCategory: quiz.category || quiz.categoryId,\n            mappedCategory: mappingResult.threeTierCategory,\n            mappingSource: mappingResult.source || 'unknown',\n          });\n        }\n        return this._getThreeTierCategoryIndicator(\n          mappingResult.threeTierCategory\n        );\n      } else {\n        // Enhanced logging for mapping failures\n        console.warn(`Category mapping failed for quiz ${quiz.id}:`, {\n          quizId: quiz.id,\n          quizTitle: quiz.title,\n          originalCategory: quiz.category,\n          originalCategoryId: quiz.categoryId,\n          threeTierCategory: quiz.threeTierCategory,\n          mappingResult: mappingResult,\n          fallbackApplied: 'allgemein',\n        });\n        return this._createFallbackCategoryIndicator('Category mapping failed');\n      }\n    } catch (error) {\n      // Comprehensive error logging with context\n      console.error(\n        `Error mapping category for quiz ${quiz?.id || 'unknown'}:`,\n        {\n          error: error.message,\n          stack: error.stack,\n          quizId: quiz?.id,\n          quizTitle: quiz?.title,\n          quizData: quiz\n            ? {\n                category: quiz.category,\n                categoryId: quiz.categoryId,\n                threeTierCategory: quiz.threeTierCategory,\n              }\n            : null,\n          timestamp: new Date().toISOString(),\n          fallbackApplied: 'allgemein',\n        }\n      );\n\n      return this._createFallbackCategoryIndicator('Category processing error');\n    }\n  }\n\n  /**\n   * Create fallback category indicator with error context\n   * @private\n   */\n  _createFallbackCategoryIndicator(reason) {\n    const fallbackIndicator = this._getThreeTierCategoryIndicator('allgemein');\n\n    // Add error context for debugging\n    return {\n      ...fallbackIndicator,\n      _fallbackReason: reason,\n      _isFallback: true,\n    };\n  }\n\n  /**\n   * Check if debug logging is enabled\n   * @private\n   */\n  _isDebugEnabled() {\n    // Check for debug flag in localStorage or URL params\n    return (\n      localStorage.getItem('ihk-debug') === 'true' ||\n      new URLSearchParams(window.location.search).has('debug')\n    );\n  }\n\n  /**\n   * Get three-tier category indicator configuration\n   * @private\n   */\n  _getThreeTierCategoryIndicator(threeTierCategoryId) {\n    const categoryConfigs = {\n      'daten-prozessanalyse': {\n        category: 'daten-prozessanalyse',\n        cssClass: 'quiz-daten-prozessanalyse',\n        icon: '📊',\n        color: '#2563eb',\n        displayName: 'Daten und Prozessanalyse',\n      },\n      anwendungsentwicklung: {\n        category: 'anwendungsentwicklung',\n        cssClass: 'quiz-anwendungsentwicklung',\n        icon: '💻',\n        color: '#dc2626',\n        displayName: 'Anwendungsentwicklung',\n      },\n      allgemein: {\n        category: 'allgemein',\n        cssClass: 'quiz-allgemein',\n        icon: '📖',\n        color: '#059669',\n        displayName: 'Allgemein',\n      },\n    };\n\n    return categoryConfigs[threeTierCategoryId] || categoryConfigs['allgemein'];\n  }\n\n  /**\n   * Get difficulty label\n   */\n  getDifficultyLabel(difficulty) {\n    const labels = {\n      beginner: 'Anfänger',\n      intermediate: 'Fortgeschritten',\n      advanced: 'Experte',\n    };\n    return labels[difficulty] || difficulty;\n  }\n\n  /**\n   * Attach event listeners\n   */\n  attachEventListeners(container) {\n    // Status filter buttons\n    const statusFilterButtons = container.querySelectorAll('[data-status]');\n    statusFilterButtons.forEach(btn => {\n      btn.addEventListener('click', e => {\n        const status = e.currentTarget.dataset.status;\n        this._handleStatusFilterChange(status, container);\n      });\n    });\n\n    // Category filter buttons\n    const categoryFilterButtons = container.querySelectorAll('[data-category]');\n    categoryFilterButtons.forEach(btn => {\n      btn.addEventListener('click', e => {\n        const category = e.currentTarget.dataset.category;\n        this._handleCategoryFilterChange(category, container);\n      });\n    });\n  }\n\n  /**\n   * Handle status filter change with enhanced state persistence\n   */\n  _handleStatusFilterChange(status, container) {\n    const operationId = `status-filter-${Date.now()}`;\n    const startTime = performance.now();\n\n    try {\n      // Validate input\n      if (!status || typeof status !== 'string') {\n        console.warn(\n          `Invalid status parameter received: ${status}. Ignoring filter change.`\n        );\n        return;\n      }\n\n      if (!container) {\n        throw new Error('Container element is required');\n      }\n\n      // Store previous state for rollback if needed\n      const previousState = {\n        statusFilter: this.currentStatusFilter,\n        categoryFilter: this.currentCategoryFilter, // Preserve category filter\n        timestamp: Date.now(),\n      };\n\n      // Log filter change attempt\n      if (this._isDebugEnabled()) {\n        console.warn(`Starting status filter change (${operationId}):`, {\n          fromStatus: previousState.statusFilter,\n          toStatus: status,\n          preservedCategoryFilter: previousState.categoryFilter,\n          timestamp: new Date().toISOString(),\n        });\n      }\n\n      // Validate status exists in available filters\n      const availableStatuses = [\n        'all',\n        'completed',\n        'attempted',\n        'not-started',\n      ];\n      if (!availableStatuses.includes(status)) {\n        throw new Error(\n          `Invalid status: ${status}. Available: ${availableStatuses.join(', ')}`\n        );\n      }\n\n      // Atomic update: Update internal state while preserving category filter\n      this.currentStatusFilter = status;\n      // Explicitly preserve category filter - no changes to this.currentCategoryFilter\n\n      // Update visual state with error handling\n      try {\n        this._updateStatusFilterVisualState(status, container);\n      } catch (visualError) {\n        console.error(\n          'Error updating status filter visual state:',\n          visualError\n        );\n        // Rollback internal state\n        this.currentStatusFilter = previousState.statusFilter;\n        throw new Error(`Visual state update failed: ${visualError.message}`);\n      }\n\n      // Refresh quiz grid with combined filters\n      try {\n        this._refreshQuizGrid(container);\n      } catch (gridError) {\n        console.error(\n          'Error refreshing quiz grid after status filter change:',\n          gridError\n        );\n        // Don't rollback here - visual state is correct, just show fallback\n        this._showFilterErrorFallback(container, gridError);\n      }\n\n      // Show visual feedback during operation\n      this._showFilterOperationFeedback(container, 'status filtering');\n\n      // Announce filter change for accessibility with result count\n      try {\n        const filteredQuizzes = this._filterQuizzes(this.quizzes);\n        this._announceFilterChange('status', status, filteredQuizzes.length);\n      } catch (a11yError) {\n        console.warn('Failed to announce status filter change:', a11yError);\n        // Non-critical error, continue\n      }\n\n      // Log successful completion\n      const duration = performance.now() - startTime;\n      if (this._isDebugEnabled()) {\n        console.warn(`Status filter change completed (${operationId}):`, {\n          status: status,\n          preservedCategoryFilter: this.currentCategoryFilter,\n          duration: `${duration.toFixed(2)}ms`,\n          success: true,\n        });\n      }\n    } catch (error) {\n      const duration = performance.now() - startTime;\n\n      // Comprehensive error logging\n      console.error(`Status filter change failed (${operationId}):`, {\n        error: error.message,\n        stack: error.stack,\n        targetStatus: status,\n        currentStatus: this.currentStatusFilter,\n        currentCategoryFilter: this.currentCategoryFilter,\n        duration: `${duration.toFixed(2)}ms`,\n        timestamp: new Date().toISOString(),\n        containerExists: !!container,\n      });\n\n      // Show user-friendly error notification\n      toastNotification.error(\n        'Unable to apply status filter. Showing all quizzes.'\n      );\n\n      // Graceful fallback: Reset to \"All\" status while preserving category filter\n      try {\n        this._resetStatusFilterWithFallback(container);\n      } catch (fallbackError) {\n        console.error(\n          'Critical error: Status filter fallback failed:',\n          fallbackError\n        );\n        // Last resort: reload the entire view\n        this._handleCriticalFilterError(container);\n      }\n    }\n  }\n\n  /**\n   * Handle category filter change with comprehensive error handling and graceful fallback\n   */\n  _handleCategoryFilterChange(category, container) {\n    const operationId = `category-filter-${Date.now()}`;\n    const startTime = performance.now();\n\n    try {\n      // Validate inputs\n      if (!category || typeof category !== 'string') {\n        console.warn(\n          `Invalid category parameter received: ${category}. Ignoring filter change.`\n        );\n        return;\n      }\n\n      if (!container) {\n        throw new Error('Container element is required');\n      }\n\n      // Store previous state for potential rollback\n      const previousState = {\n        categoryFilter: this.currentCategoryFilter,\n        statusFilter: this.currentStatusFilter, // Preserve status filter\n        timestamp: Date.now(),\n      };\n\n      // Check if category filters are available (specialization must be selected)\n      if (!this.currentSpecialization) {\n        console.warn(\n          'Category filter change ignored - no specialization selected'\n        );\n        // Silently ignore category filter changes when no specialization is selected\n        return;\n      }\n\n      // Log filter change attempt\n      if (this._isDebugEnabled()) {\n        console.warn(`Starting category filter change (${operationId}):`, {\n          fromCategory: previousState.categoryFilter,\n          toCategory: category,\n          preservedStatusFilter: previousState.statusFilter,\n          timestamp: new Date().toISOString(),\n        });\n      }\n\n      // Validate category exists in available filters\n      const availableCategories = this._getCategoryFilters().map(cat => cat.id);\n      if (!availableCategories.includes(category)) {\n        throw new Error(\n          `Invalid category: ${category}. Available: ${availableCategories.join(', ')}`\n        );\n      }\n\n      // Atomic update: Update internal state while preserving status filter\n      this.currentCategoryFilter = category;\n      // Explicitly preserve status filter - no changes to this.currentStatusFilter\n\n      // Update visual state with error handling\n      try {\n        this._updateCategoryFilterVisualState(category, container);\n      } catch (visualError) {\n        console.error('Error updating visual state:', visualError);\n        // Rollback internal state\n        this.currentCategoryFilter = previousState.categoryFilter;\n        throw new Error(`Visual state update failed: ${visualError.message}`);\n      }\n\n      // Refresh quiz grid with error handling\n      try {\n        this._refreshQuizGridWithFallback(container);\n      } catch (gridError) {\n        console.error('Error refreshing quiz grid:', gridError);\n        // Don't rollback here - visual state is correct, just show fallback\n        this._showFilterErrorFallback(container, gridError);\n      }\n\n      // Show visual feedback during operation\n      this._showFilterOperationFeedback(container, 'category filtering');\n\n      // Announce filter change for accessibility with result count\n      try {\n        const filteredQuizzes = this._filterQuizzes(this.quizzes);\n        this._announceFilterChange(\n          'category',\n          category,\n          filteredQuizzes.length\n        );\n      } catch (a11yError) {\n        console.warn('Failed to announce filter change:', a11yError);\n        // Non-critical error, continue\n      }\n\n      // Log successful completion\n      const duration = performance.now() - startTime;\n      if (this._isDebugEnabled()) {\n        console.warn(`Category filter change completed (${operationId}):`, {\n          category: category,\n          preservedStatusFilter: this.currentStatusFilter,\n          duration: `${duration.toFixed(2)}ms`,\n          success: true,\n        });\n      }\n    } catch (error) {\n      const duration = performance.now() - startTime;\n\n      // Comprehensive error logging\n      console.error(`Category filter change failed (${operationId}):`, {\n        error: error.message,\n        stack: error.stack,\n        targetCategory: category,\n        currentCategory: this.currentCategoryFilter,\n        duration: `${duration.toFixed(2)}ms`,\n        timestamp: new Date().toISOString(),\n        containerExists: !!container,\n      });\n\n      // Show user-friendly error notification\n      toastNotification.error(\n        'Unable to apply category filter. Showing all quizzes.'\n      );\n\n      // Graceful fallback: Reset to \"All Categories\"\n      try {\n        this._resetToAllCategoriesWithFallback(container);\n      } catch (fallbackError) {\n        console.error(\n          'Critical error: Fallback to all categories failed:',\n          fallbackError\n        );\n        // Last resort: reload the entire view\n        this._handleCriticalFilterError(container);\n      }\n    }\n  }\n\n  /**\n   * Update category filter visual state atomically\n   * @private\n   */\n  _updateCategoryFilterVisualState(category, container) {\n    const categoryFilterButtons = container.querySelectorAll('[data-category]');\n\n    if (categoryFilterButtons.length === 0) {\n      // Category filters may not be rendered if no specialization is selected\n      console.warn(\n        'No category filter buttons found - category filters may not be rendered'\n      );\n      return;\n    }\n\n    const updates = [];\n\n    // Prepare all visual updates\n    categoryFilterButtons.forEach(btn => {\n      const isActive = btn.dataset.category === category;\n      updates.push({\n        button: btn,\n        isActive: isActive,\n        shouldAddClass: isActive,\n        shouldRemoveClass: !isActive,\n        ariaPressed: isActive ? 'true' : 'false',\n      });\n    });\n\n    // Apply all visual updates atomically\n    updates.forEach(update => {\n      try {\n        if (update.shouldAddClass) {\n          update.button.classList.add('active');\n        }\n        if (update.shouldRemoveClass) {\n          update.button.classList.remove('active');\n        }\n        update.button.setAttribute('aria-pressed', update.ariaPressed);\n      } catch (btnError) {\n        console.warn('Error updating button state:', {\n          error: btnError.message,\n          buttonCategory: update.button.dataset.category,\n        });\n      }\n    });\n  }\n\n  /**\n   * Refresh quiz grid with fallback error handling\n   * @private\n   */\n  _refreshQuizGridWithFallback(container) {\n    try {\n      this._refreshQuizGrid(container);\n    } catch (error) {\n      console.error('Quiz grid refresh failed, attempting fallback:', error);\n      this._showFilterErrorFallback(container, error);\n    }\n  }\n\n  /**\n   * Show fallback state when filter operations fail\n   * @private\n   */\n  _showFilterErrorFallback(container, error) {\n    const quizGridContainer = container.querySelector('.quiz-grid');\n    if (quizGridContainer) {\n      // Get user-friendly error message\n      const friendlyMessage = this._getUserFriendlyFilterErrorMessage(error, {\n        operation: 'filtering',\n        currentCategoryFilter: this.currentCategoryFilter,\n        currentStatusFilter: this.currentStatusFilter,\n      });\n\n      const fallbackState = EmptyState.create({\n        icon: '⚠️',\n        title: 'Filter Error',\n        message: friendlyMessage,\n        action: {\n          label: 'Reset Filters',\n          onClick: () => this._resetAllFilters(container),\n        },\n      });\n\n      quizGridContainer.innerHTML = '';\n      quizGridContainer.appendChild(fallbackState);\n\n      // Show notification with specific guidance\n      const errorType = this._categorizeFilterError(error);\n      const guidance = this._getFilterErrorGuidance(errorType, {\n        currentCategoryFilter: this.currentCategoryFilter,\n      });\n\n      if (guidance) {\n        toastNotification.warning(guidance);\n      }\n    }\n  }\n\n  /**\n   * Reset to \"All Categories\" with error handling\n   * @private\n   */\n  _resetToAllCategoriesWithFallback(container) {\n    // Preserve status filter during category reset\n    const preservedStatusFilter = this.currentStatusFilter;\n    this.currentCategoryFilter = 'all';\n\n    try {\n      this._syncCategoryFilterVisualState(container);\n      this._refreshQuizGrid(container);\n\n      // Ensure status filter is preserved\n      this.currentStatusFilter = preservedStatusFilter;\n\n      console.warn('Category filter reset to \"all\", status filter preserved:', {\n        categoryFilter: this.currentCategoryFilter,\n        statusFilter: this.currentStatusFilter,\n      });\n    } catch (error) {\n      console.error('Failed to reset to all categories:', error);\n      // Restore preserved status filter even on error\n      this.currentStatusFilter = preservedStatusFilter;\n      throw error;\n    }\n  }\n\n  /**\n   * Handle critical filter errors by reloading the view\n   * @private\n   */\n  _handleCriticalFilterError(container) {\n    console.error('Critical filter error - attempting view reload');\n\n    // Show loading state\n    container.innerHTML = LoadingSpinner.render('Reloading quizzes...');\n\n    // Reload the entire view after a short delay\n    setTimeout(() => {\n      this.render()\n        .then(newContainer => {\n          if (container.parentNode) {\n            container.parentNode.replaceChild(newContainer, container);\n          }\n        })\n        .catch(reloadError => {\n          console.error('Failed to reload view:', reloadError);\n          // Show final fallback message\n          container.innerHTML = `\n          <div class=\"error-state\">\n            <h3>Unable to Load Quizzes</h3>\n            <p>Please refresh the page to try again.</p>\n            <button onclick=\"window.location.reload()\" class=\"btn btn-primary\">\n              Refresh Page\n            </button>\n          </div>\n        `;\n        });\n    }, 1000);\n  }\n\n  /**\n   * Reset all filters to default state\n   * @private\n   */\n  _resetAllFilters(container) {\n    try {\n      this.currentCategoryFilter = 'all';\n      this.currentStatusFilter = 'all';\n\n      this._syncCategoryFilterVisualState(container);\n      this._syncStatusFilterVisualState(container);\n      this._refreshQuizGrid(container);\n\n      accessibilityHelper.announce('All filters have been reset');\n      toastNotification.success('Filters reset successfully');\n    } catch (error) {\n      console.error('Error resetting filters:', error);\n      toastNotification.error('Failed to reset filters');\n    }\n  }\n\n  /**\n   * Validate quiz category data and provide warnings\n   * @private\n   */\n  _validateQuizCategory(quiz) {\n    const validation = {\n      isValid: false,\n      warnings: [],\n      errors: [],\n      category: null,\n      confidence: 'low',\n    };\n\n    // Basic quiz validation\n    if (!quiz) {\n      validation.errors.push('Quiz object is null or undefined');\n      return validation;\n    }\n\n    if (!quiz.id) {\n      validation.errors.push('Quiz missing required ID field');\n      return validation;\n    }\n\n    // Category field validation\n    const hasThreeTierCategory =\n      quiz.threeTierCategory && typeof quiz.threeTierCategory === 'string';\n    const hasLegacyCategory =\n      quiz.category && typeof quiz.category === 'string';\n    const hasLegacyCategoryId =\n      quiz.categoryId && typeof quiz.categoryId === 'string';\n\n    if (!hasThreeTierCategory && !hasLegacyCategory && !hasLegacyCategoryId) {\n      validation.warnings.push(\n        'Quiz has no category information - will default to \"allgemein\"'\n      );\n      validation.category = 'allgemein';\n      validation.confidence = 'low';\n    } else if (hasThreeTierCategory) {\n      // Validate three-tier category format\n      const validThreeTierCategories = [\n        'daten-prozessanalyse',\n        'anwendungsentwicklung',\n        'allgemein',\n      ];\n      if (validThreeTierCategories.includes(quiz.threeTierCategory)) {\n        validation.isValid = true;\n        validation.category = quiz.threeTierCategory;\n        validation.confidence = 'high';\n      } else {\n        validation.warnings.push(\n          `Invalid threeTierCategory value: \"${quiz.threeTierCategory}\"`\n        );\n        validation.category = 'allgemein';\n        validation.confidence = 'low';\n      }\n    } else {\n      // Has legacy category data - will need mapping\n      validation.warnings.push(\n        'Quiz uses legacy category format - mapping required'\n      );\n      validation.confidence = 'medium';\n\n      // Validate legacy category format\n      if (hasLegacyCategory) {\n        if (typeof quiz.category !== 'string' || quiz.category.trim() === '') {\n          validation.warnings.push('Legacy category field is empty or invalid');\n        }\n      }\n\n      if (hasLegacyCategoryId) {\n        if (\n          typeof quiz.categoryId !== 'string' ||\n          quiz.categoryId.trim() === ''\n        ) {\n          validation.warnings.push(\n            'Legacy categoryId field is empty or invalid'\n          );\n        }\n      }\n    }\n\n    // Additional data quality checks\n    if (\n      !quiz.title ||\n      typeof quiz.title !== 'string' ||\n      quiz.title.trim() === ''\n    ) {\n      validation.warnings.push('Quiz missing or invalid title');\n    }\n\n    if (\n      !quiz.questions ||\n      !Array.isArray(quiz.questions) ||\n      quiz.questions.length === 0\n    ) {\n      validation.warnings.push(\n        'Quiz has no questions or invalid questions array'\n      );\n    }\n\n    return validation;\n  }\n\n  /**\n   * Validate all quizzes and generate category validation report\n   * @private\n   */\n  _validateAllQuizCategories() {\n    if (!Array.isArray(this.quizzes) || this.quizzes.length === 0) {\n      return {\n        totalQuizzes: 0,\n        validQuizzes: 0,\n        invalidQuizzes: 0,\n        warnings: [],\n        errors: [],\n        categoryDistribution: {},\n      };\n    }\n\n    const report = {\n      totalQuizzes: this.quizzes.length,\n      validQuizzes: 0,\n      invalidQuizzes: 0,\n      warnings: [],\n      errors: [],\n      categoryDistribution: {\n        'daten-prozessanalyse': 0,\n        anwendungsentwicklung: 0,\n        allgemein: 0,\n        unknown: 0,\n      },\n      validationDetails: [],\n    };\n\n    this.quizzes.forEach((quiz, index) => {\n      const validation = this._validateQuizCategory(quiz);\n\n      if (validation.isValid) {\n        report.validQuizzes++;\n      } else {\n        report.invalidQuizzes++;\n      }\n\n      // Collect warnings and errors\n      validation.warnings.forEach(warning => {\n        report.warnings.push({\n          quizId: quiz.id || `index-${index}`,\n          quizTitle: quiz.title || 'Unknown',\n          warning: warning,\n        });\n      });\n\n      validation.errors.forEach(error => {\n        report.errors.push({\n          quizId: quiz.id || `index-${index}`,\n          quizTitle: quiz.title || 'Unknown',\n          error: error,\n        });\n      });\n\n      // Update category distribution\n      const category = validation.category || 'unknown';\n      if (\n        Object.prototype.hasOwnProperty.call(\n          report.categoryDistribution,\n          category\n        )\n      ) {\n        report.categoryDistribution[category]++;\n      } else {\n        report.categoryDistribution['unknown']++;\n      }\n\n      // Store detailed validation info for debugging\n      report.validationDetails.push({\n        quizId: quiz.id,\n        validation: validation,\n      });\n    });\n\n    return report;\n  }\n\n  /**\n   * Show category validation warnings to user\n   * @private\n   */\n  _showCategoryValidationWarnings(validationReport) {\n    if (\n      !validationReport ||\n      (validationReport.warnings.length === 0 &&\n        validationReport.errors.length === 0)\n    ) {\n      return;\n    }\n\n    const errorCount = validationReport.errors.length;\n    const warningCount = validationReport.warnings.length;\n\n    if (errorCount > 0) {\n      console.error('Category validation errors found:', {\n        errorCount: errorCount,\n        totalQuizzes: validationReport.totalQuizzes,\n        errors: validationReport.errors.slice(0, 3), // Show first 3 errors\n      });\n\n      toastNotification.error(\n        `${errorCount} quiz${errorCount > 1 ? 'zes have' : ' has'} category errors. Check console for details.`\n      );\n    }\n\n    if (warningCount > 0) {\n      console.warn('Category validation warnings found:', {\n        warningCount: warningCount,\n        totalQuizzes: validationReport.totalQuizzes,\n        warnings: validationReport.warnings.slice(0, 5), // Show first 5 warnings\n      });\n\n      // Only show warning notification if there are many warnings\n      if (warningCount > 5) {\n        toastNotification.warning(\n          `${warningCount} quiz${warningCount > 1 ? 'zes have' : ' has'} category warnings. Check console for details.`\n        );\n      }\n    }\n\n    // Log summary for debugging\n    if (this._isDebugEnabled()) {\n      console.warn('Category validation summary:', {\n        totalQuizzes: validationReport.totalQuizzes,\n        validQuizzes: validationReport.validQuizzes,\n        invalidQuizzes: validationReport.invalidQuizzes,\n        errorCount: errorCount,\n        warningCount: warningCount,\n        categoryDistribution: validationReport.categoryDistribution,\n      });\n    }\n  }\n\n  /**\n   * Provide user-friendly error messages for filter failures\n   * @private\n   */\n  _getUserFriendlyFilterErrorMessage(error, context = {}) {\n    const errorType = this._categorizeFilterError(error);\n\n    const messages = {\n      'category-mapping':\n        'Unable to determine quiz categories. Showing all quizzes.',\n      'data-validation':\n        'Some quiz data is invalid. Showing available quizzes.',\n      performance: 'Filtering is taking longer than expected. Please wait...',\n      network: 'Connection issue while filtering. Please try again.',\n      unknown:\n        'An unexpected error occurred while filtering. Showing all quizzes.',\n    };\n\n    const baseMessage = messages[errorType] || messages['unknown'];\n\n    // Add context-specific guidance\n    const guidance = this._getFilterErrorGuidance(errorType, context);\n\n    return guidance ? `${baseMessage} ${guidance}` : baseMessage;\n  }\n\n  /**\n   * Categorize filter errors for appropriate handling\n   * @private\n   */\n  _categorizeFilterError(error) {\n    if (!error || !error.message) {\n      return 'unknown';\n    }\n\n    const message = error.message.toLowerCase();\n\n    if (message.includes('category') || message.includes('mapping')) {\n      return 'category-mapping';\n    }\n\n    if (message.includes('validation') || message.includes('invalid')) {\n      return 'data-validation';\n    }\n\n    if (message.includes('timeout') || message.includes('performance')) {\n      return 'performance';\n    }\n\n    if (message.includes('network') || message.includes('fetch')) {\n      return 'network';\n    }\n\n    return 'unknown';\n  }\n\n  /**\n   * Get guidance for specific error types\n   * @private\n   */\n  _getFilterErrorGuidance(errorType, context) {\n    switch (errorType) {\n      case 'category-mapping':\n        return 'Try selecting \"All Categories\" to see all available quizzes.';\n      case 'data-validation':\n        return 'Some quizzes may not display correctly.';\n      case 'performance':\n        return 'Consider refreshing the page if this persists.';\n      case 'network':\n        return 'Check your internet connection and try again.';\n      default:\n        return 'Try refreshing the page or contact support if the problem continues.';\n    }\n  }\n\n  /**\n   * Get display name for category\n   * @private\n   */\n  _getCategoryDisplayName(categoryId) {\n    const categoryMap = {\n      all: 'All Categories',\n      'daten-prozessanalyse': 'Daten und Prozessanalyse',\n      anwendungsentwicklung: 'Anwendungsentwicklung',\n      allgemein: 'Allgemein',\n    };\n    return categoryMap[categoryId] || categoryId;\n  }\n\n  /**\n   * Initialize filter states after rendering\n   * @private\n   */\n  _initializeFilterStates(container) {\n    if (this.filterInitialized) {\n      return;\n    }\n\n    try {\n      // Ensure \"All Categories\" is active by default\n      this.currentCategoryFilter = 'all';\n      this.currentStatusFilter = 'all';\n\n      // Set correct initial ARIA states and CSS classes for category filters\n      this._syncCategoryFilterVisualState(container);\n\n      // Set correct initial ARIA states and CSS classes for status filters\n      this._syncStatusFilterVisualState(container);\n\n      this.filterInitialized = true;\n\n      // Announce initial state for accessibility\n      accessibilityHelper.announce(\n        'Filters initialized. All categories and all statuses are shown.'\n      );\n    } catch (error) {\n      console.error('Error initializing filter states:', error);\n      toastNotification.error('Failed to initialize filters');\n    }\n  }\n\n  /**\n   * Sync category filter visual state with internal state\n   * @private\n   */\n  _syncCategoryFilterVisualState(container) {\n    const categoryFilterButtons = container.querySelectorAll('[data-category]');\n    categoryFilterButtons.forEach(btn => {\n      const isActive = btn.dataset.category === this.currentCategoryFilter;\n      if (isActive) {\n        btn.classList.add('active');\n        btn.setAttribute('aria-pressed', 'true');\n      } else {\n        btn.classList.remove('active');\n        btn.setAttribute('aria-pressed', 'false');\n      }\n    });\n  }\n\n  /**\n   * Sync status filter visual state with internal state\n   * @private\n   */\n  _syncStatusFilterVisualState(container) {\n    const statusFilterButtons = container.querySelectorAll('[data-status]');\n    statusFilterButtons.forEach(btn => {\n      const isActive = btn.dataset.status === this.currentStatusFilter;\n      if (isActive) {\n        btn.classList.add('active');\n        btn.setAttribute('aria-pressed', 'true');\n      } else {\n        btn.classList.remove('active');\n        btn.setAttribute('aria-pressed', 'false');\n      }\n    });\n  }\n\n  /**\n   * Refresh quiz grid with current filters (debounced for performance)\n   */\n  _refreshQuizGrid(container) {\n    // Use debounced version to prevent UI blocking on rapid changes\n    this.debouncedRefreshQuizGrid(container);\n  }\n\n  /**\n   * Perform the actual quiz grid refresh with optimized rendering\n   * @private\n   */\n  _performQuizGridRefresh(container) {\n    const operationId = `refresh-${Date.now()}`;\n    const startTime = performance.now();\n\n    try {\n      // Prevent concurrent refresh operations\n      if (this.filterOperationInProgress) {\n        console.warn('Filter operation already in progress, queuing refresh');\n        this.pendingFilterOperations.add(operationId);\n        return;\n      }\n\n      this.filterOperationInProgress = true;\n\n      const quizGridContainer = container.querySelector('.quiz-grid');\n      if (!quizGridContainer) {\n        throw new Error('Quiz grid container not found');\n      }\n\n      // Add loading state to prevent layout flicker\n      quizGridContainer.classList.add('refreshing');\n\n      // Use requestAnimationFrame for smooth rendering\n      requestAnimationFrame(() => {\n        try {\n          const filteredQuizzes = this._filterQuizzes(this.quizzes);\n\n          // Clear existing content\n          quizGridContainer.innerHTML = '';\n\n          // Add content directly to the existing grid container\n          if (filteredQuizzes.length === 0) {\n            const emptyState = this._createEnhancedEmptyState();\n            quizGridContainer.appendChild(emptyState);\n          } else {\n            filteredQuizzes.forEach(quiz => {\n              const card = this.renderQuizCard(quiz);\n              quizGridContainer.appendChild(card);\n            });\n          }\n\n          quizGridContainer.classList.remove('refreshing');\n\n          // Update quiz count display with feedback\n          this._updateQuizCountDisplay(container);\n\n          const duration = performance.now() - startTime;\n\n          // Log performance metrics\n          if (this._isDebugEnabled()) {\n            console.warn(`Quiz grid refresh completed (${operationId}):`, {\n              duration: `${duration.toFixed(2)}ms`,\n              quizCount: this.quizzes.length,\n              filteredCount: filteredQuizzes.length,\n            });\n          }\n\n          // Process any pending operations\n          this._processPendingFilterOperations(container);\n        } catch (renderError) {\n          console.error('Error during quiz grid rendering:', renderError);\n          quizGridContainer.classList.remove('refreshing');\n          this._showFilterErrorFallback(container, renderError);\n        } finally {\n          this.filterOperationInProgress = false;\n        }\n      });\n    } catch (error) {\n      console.error(`Quiz grid refresh failed (${operationId}):`, error);\n      this.filterOperationInProgress = false;\n      this._showFilterErrorFallback(container, error);\n    }\n  }\n\n  /**\n   * Process any pending filter operations\n   * @private\n   */\n  _processPendingFilterOperations(container) {\n    if (this.pendingFilterOperations.size > 0) {\n      console.warn(\n        `Processing ${this.pendingFilterOperations.size} pending filter operations`\n      );\n      this.pendingFilterOperations.clear();\n\n      // Trigger one more refresh for any changes that occurred during the last operation\n      setTimeout(() => {\n        if (!this.filterOperationInProgress) {\n          this._performQuizGridRefresh(container);\n        }\n      }, 10);\n    }\n  }\n\n  /**\n   * Update status filter visual state atomically\n   * @private\n   */\n  _updateStatusFilterVisualState(status, container) {\n    const statusFilterButtons = container.querySelectorAll('[data-status]');\n\n    if (statusFilterButtons.length === 0) {\n      throw new Error('No status filter buttons found in container');\n    }\n\n    const updates = [];\n\n    // Prepare all visual updates\n    statusFilterButtons.forEach(btn => {\n      const isActive = btn.dataset.status === status;\n      updates.push({\n        button: btn,\n        isActive: isActive,\n        shouldAddClass: isActive,\n        shouldRemoveClass: !isActive,\n        ariaPressed: isActive ? 'true' : 'false',\n      });\n    });\n\n    // Apply all visual updates atomically\n    updates.forEach(update => {\n      try {\n        if (update.shouldAddClass) {\n          update.button.classList.add('active');\n        }\n        if (update.shouldRemoveClass) {\n          update.button.classList.remove('active');\n        }\n        update.button.setAttribute('aria-pressed', update.ariaPressed);\n      } catch (btnError) {\n        console.warn('Error updating status button state:', {\n          error: btnError.message,\n          buttonStatus: update.button.dataset.status,\n        });\n      }\n    });\n  }\n\n  /**\n   * Get display name for status filter\n   * @private\n   */\n  _getStatusDisplayName(status) {\n    const statusNames = {\n      all: 'All Quizzes',\n      completed: 'Completed',\n      attempted: 'Attempted',\n      'not-started': 'Not Started',\n    };\n    return statusNames[status] || status;\n  }\n\n  /**\n   * Get display name for category filter\n   * @private\n   */\n  // Duplicate method removed - use the other _getCategoryDisplayName implementation earlier in the file\n\n  /**\n   * Create enhanced empty state with specific messages based on current filter combination\n   * Requirements: 1.6, 4.4\n   * @private\n   */\n  _createEnhancedEmptyState() {\n    const hasFilters =\n      this.currentCategoryFilter !== 'all' ||\n      this.currentStatusFilter !== 'all';\n\n    if (!hasFilters) {\n      // No filters applied - general empty state\n      return EmptyState.create({\n        icon: '📚',\n        title: 'No IHK Quizzes Available',\n        message:\n          'There are currently no IHK quizzes available. Please check back later or contact support if this seems incorrect.',\n        action: {\n          label: 'Browse Modules',\n          onClick: () => {\n            window.location.hash = '#/modules';\n          },\n        },\n      });\n    }\n\n    // Filters are applied - create specific message\n    const categoryName = this._getCategoryDisplayName(\n      this.currentCategoryFilter\n    );\n    const statusName = this._getStatusDisplayName(this.currentStatusFilter);\n\n    // Build filter description\n    const filterParts = [];\n    if (this.currentCategoryFilter !== 'all') {\n      filterParts.push(`category \"${categoryName}\"`);\n    }\n    if (this.currentStatusFilter !== 'all') {\n      filterParts.push(`status \"${statusName}\"`);\n    }\n\n    const filterDescription = filterParts.join(' and ');\n    const totalQuizzes = this.quizzes ? this.quizzes.length : 0;\n\n    // Create specific message based on filter combination\n    let message = `No quizzes match your current filters (${filterDescription}).`;\n\n    if (totalQuizzes > 0) {\n      message += ` There are ${totalQuizzes} total quizzes available.`;\n    }\n\n    // Add guidance on adjusting filters\n    const suggestions = this._getFilterAdjustmentSuggestions();\n    if (suggestions.length > 0) {\n      message += ` Try ${suggestions.join(' or ')}.`;\n    }\n\n    return EmptyState.create({\n      icon: '🔍',\n      title: 'No Matching Quizzes',\n      message: message,\n      type: 'filter',\n      action: {\n        label: 'Clear All Filters',\n        onClick: () => {\n          this._resetAllFilters();\n        },\n      },\n    });\n  }\n\n  /**\n   * Get suggestions for adjusting filters based on current state\n   * @private\n   */\n  _getFilterAdjustmentSuggestions() {\n    const suggestions = [];\n\n    if (this.currentCategoryFilter !== 'all') {\n      suggestions.push('selecting \"All Categories\"');\n    }\n\n    if (this.currentStatusFilter !== 'all') {\n      suggestions.push('selecting \"All Quizzes\"');\n    }\n\n    // Add specific suggestions based on available data\n    if (this.quizzes && this.quizzes.length > 0) {\n      const availableCategories = this._getAvailableCategories();\n      const availableStatuses = this._getAvailableStatuses();\n\n      if (\n        this.currentCategoryFilter !== 'all' &&\n        availableCategories.length > 1\n      ) {\n        const otherCategories = availableCategories.filter(\n          cat => cat !== this.currentCategoryFilter\n        );\n        if (otherCategories.length > 0) {\n          const categoryName = this._getCategoryDisplayName(otherCategories[0]);\n          suggestions.push(`trying \"${categoryName}\"`);\n        }\n      }\n\n      if (this.currentStatusFilter !== 'all' && availableStatuses.length > 1) {\n        const otherStatuses = availableStatuses.filter(\n          status => status !== this.currentStatusFilter\n        );\n        if (otherStatuses.length > 0) {\n          const statusName = this._getStatusDisplayName(otherStatuses[0]);\n          suggestions.push(`trying \"${statusName}\"`);\n        }\n      }\n    }\n\n    return suggestions.slice(0, 3); // Limit to 3 suggestions to avoid overwhelming\n  }\n\n  /**\n   * Get available categories from current quiz data\n   * @private\n   */\n  _getAvailableCategories() {\n    if (!this.quizzes || this.quizzes.length === 0) return [];\n\n    const categories = new Set();\n    this.quizzes.forEach(quiz => {\n      try {\n        const categoryIndicator = this._getCategoryIndicator(quiz);\n        if (categoryIndicator && categoryIndicator.category) {\n          categories.add(categoryIndicator.category);\n        }\n      } catch (error) {\n        // Skip quizzes with category errors\n      }\n    });\n\n    return Array.from(categories);\n  }\n\n  /**\n   * Get available statuses from current quiz data\n   * @private\n   */\n  _getAvailableStatuses() {\n    if (!this.quizzes || this.quizzes.length === 0) return [];\n\n    const statuses = new Set();\n    this.quizzes.forEach(quiz => {\n      if (quiz.completed) {\n        statuses.add('completed');\n      } else if (quiz.attempts > 0) {\n        statuses.add('attempted');\n      } else {\n        statuses.add('not-started');\n      }\n    });\n\n    return Array.from(statuses);\n  }\n\n  /**\n   * Reset all filters to default state\n   * @private\n   */\n  // Duplicate method removed - the earlier _resetAllFilters(container) implementation is used\n\n  /**\n   * Create quiz count display text\n   * Requirements: 6.3\n   * @private\n   */\n  _createQuizCountDisplay(filteredCount, totalCount) {\n    if (filteredCount === totalCount) {\n      return `<span class=\"quiz-count-text\">Showing all ${totalCount} quizzes</span>`;\n    } else {\n      return `<span class=\"quiz-count-text\">Showing ${filteredCount} of ${totalCount} quizzes</span>`;\n    }\n  }\n\n  /**\n   * Update quiz count display in the header\n   * Requirements: 6.3\n   * @private\n   */\n  _updateQuizCountDisplay(container) {\n    try {\n      const countDisplay = container.querySelector('.quiz-count-display');\n      if (!countDisplay) {\n        console.warn('Quiz count display element not found');\n        return;\n      }\n\n      const filteredQuizzes = this._filterQuizzes(this.quizzes);\n      const newCountDisplay = this._createQuizCountDisplay(\n        filteredQuizzes.length,\n        this.quizzes.length\n      );\n\n      countDisplay.innerHTML = newCountDisplay;\n\n      // Add visual feedback animation\n      countDisplay.classList.add('updating');\n      setTimeout(() => {\n        countDisplay.classList.remove('updating');\n      }, 300);\n    } catch (error) {\n      console.error('Error updating quiz count display:', error);\n    }\n  }\n\n  /**\n   * Show visual feedback during filter operations\n   * Requirements: 6.3\n   * @private\n   */\n  _showFilterOperationFeedback(container, operation = 'filtering') {\n    try {\n      // Add loading state to filter buttons\n      const filterButtons = container.querySelectorAll(\n        '.filter-btn, .category-filter-btn'\n      );\n      filterButtons.forEach(btn => {\n        btn.classList.add('filtering');\n        btn.disabled = true;\n      });\n\n      // Add loading state to quiz grid\n      const quizGrid = container.querySelector('.quiz-grid');\n      if (quizGrid) {\n        quizGrid.classList.add('updating');\n      }\n\n      // Remove loading states after a short delay\n      setTimeout(() => {\n        filterButtons.forEach(btn => {\n          btn.classList.remove('filtering');\n          btn.disabled = false;\n        });\n\n        if (quizGrid) {\n          quizGrid.classList.remove('updating');\n        }\n      }, 150); // Short delay for visual feedback\n    } catch (error) {\n      console.error('Error showing filter operation feedback:', error);\n    }\n  }\n\n  /**\n   * Announce filter changes with detailed information for screen readers\n   * Requirements: 6.3\n   * @private\n   */\n  _announceFilterChange(filterType, newValue, resultCount) {\n    try {\n      const categoryName = this._getCategoryDisplayName(\n        this.currentCategoryFilter\n      );\n      const statusName = this._getStatusDisplayName(this.currentStatusFilter);\n\n      let announcement = '';\n\n      if (filterType === 'category') {\n        announcement = `Category filter changed to ${this._getCategoryDisplayName(newValue)}. `;\n      } else if (filterType === 'status') {\n        announcement = `Status filter changed to ${this._getStatusDisplayName(newValue)}. `;\n      }\n\n      // Add current filter state\n      announcement += `Current filters: ${categoryName} and ${statusName}. `;\n\n      // Add result count\n      if (resultCount === 0) {\n        announcement += 'No quizzes match these filters.';\n      } else if (resultCount === 1) {\n        announcement += '1 quiz matches these filters.';\n      } else {\n        announcement += `${resultCount} quizzes match these filters.`;\n      }\n\n      accessibilityHelper.announce(announcement);\n    } catch (error) {\n      console.error('Error announcing filter change:', error);\n    }\n  }\n\n  /**\n   * Reset status filter with fallback while preserving category filter\n   * @private\n   */\n  _resetStatusFilterWithFallback(container) {\n    try {\n      // Reset to \"all\" status while preserving category filter\n      const preservedCategoryFilter = this.currentCategoryFilter;\n      this.currentStatusFilter = 'all';\n\n      this._updateStatusFilterVisualState('all', container);\n      this._refreshQuizGrid(container);\n\n      // Ensure category filter is preserved\n      this.currentCategoryFilter = preservedCategoryFilter;\n\n      console.warn('Status filter reset to \"all\", category filter preserved:', {\n        statusFilter: this.currentStatusFilter,\n        categoryFilter: this.currentCategoryFilter,\n      });\n    } catch (error) {\n      console.error('Failed to reset status filter:', error);\n      throw error;\n    }\n  }\n}\n\nexport default IHKQuizListView;\n","/**\n * QuizResultsDisplay Component\n * Enhanced visual display for quiz completion results\n */\n\nclass QuizResultsDisplay {\n  constructor(score, totalQuestions, totalPoints) {\n    this.score = score;\n    this.totalQuestions = totalQuestions;\n    this.totalPoints = totalPoints;\n    this.percentage = Math.round((score / totalPoints) * 100);\n  }\n\n  /**\n   * Get performance badge based on score percentage\n   */\n  getPerformanceBadge() {\n    if (this.percentage >= 90) {\n      return {\n        icon: '🏆',\n        text: 'Excellent',\n        class: 'excellent',\n        message: 'Outstanding performance!',\n      };\n    }\n    if (this.percentage >= 80) {\n      return {\n        icon: '🥇',\n        text: 'Very Good',\n        class: 'very-good',\n        message: 'Great job!',\n      };\n    }\n    if (this.percentage >= 70) {\n      return {\n        icon: '🥈',\n        text: 'Good',\n        class: 'good',\n        message: 'Well done!',\n      };\n    }\n    if (this.percentage >= 60) {\n      return {\n        icon: '🥉',\n        text: 'Pass',\n        class: 'pass',\n        message: 'You passed!',\n      };\n    }\n    return {\n      icon: '📚',\n      text: 'Needs Review',\n      class: 'needs-review',\n      message: 'Keep studying!',\n    };\n  }\n\n  /**\n   * Render the complete results display\n   */\n  render() {\n    const badge = this.getPerformanceBadge();\n\n    const container = document.createElement('div');\n    container.className = 'quiz-results-display';\n\n    container.innerHTML = `\n      <div class=\"score-display\">\n        <div class=\"score-circle ${badge.class}\">\n          <div class=\"score-content\">\n            <span class=\"percentage\">${this.percentage}%</span>\n            <span class=\"fraction\">(${this.score}/${this.totalPoints})</span>\n          </div>\n        </div>\n        <div class=\"performance-badge\">\n          <span class=\"badge-icon\">${badge.icon}</span>\n          <span class=\"badge-text\">${badge.text}</span>\n          <p class=\"badge-message\">${badge.message}</p>\n        </div>\n      </div>\n      <div class=\"progress-bar-container\">\n        <div class=\"progress-bar\">\n          <div class=\"progress-fill ${badge.class}\" style=\"width: 0%\" data-target=\"${this.percentage}\"></div>\n        </div>\n        <div class=\"progress-label\">\n          ${this.score} out of ${this.totalPoints} points\n        </div>\n      </div>\n      <div class=\"score-breakdown\">\n        <div class=\"breakdown-item\">\n          <span class=\"breakdown-value\">${this.totalQuestions}</span>\n          <span class=\"breakdown-label\">Total Questions</span>\n        </div>\n        <div class=\"breakdown-item\">\n          <span class=\"breakdown-value\">${Math.round((this.score / this.totalPoints) * this.totalQuestions)}</span>\n          <span class=\"breakdown-label\">Correct Answers</span>\n        </div>\n        <div class=\"breakdown-item\">\n          <span class=\"breakdown-value\">${this.totalQuestions - Math.round((this.score / this.totalPoints) * this.totalQuestions)}</span>\n          <span class=\"breakdown-label\">Incorrect Answers</span>\n        </div>\n      </div>\n    `;\n\n    // Animate progress bar after render\n    setTimeout(() => {\n      this.animateProgressBar(container);\n    }, 100);\n\n    return container;\n  }\n\n  /**\n   * Animate the progress bar fill\n   */\n  animateProgressBar(container) {\n    const progressFill = container.querySelector('.progress-fill');\n    const targetWidth = progressFill.getAttribute('data-target');\n\n    // Animate to target width\n    progressFill.style.transition = 'width 1.5s ease-in-out';\n    progressFill.style.width = `${targetWidth}%`;\n  }\n\n  /**\n   * Static method to create and render results display\n   */\n  static create(score, totalQuestions, totalPoints) {\n    const display = new QuizResultsDisplay(score, totalQuestions, totalPoints);\n    return display.render();\n  }\n}\n\nexport default QuizResultsDisplay;\n","/**\n * AnswerReviewSection Component\n * Detailed question-by-question review with explanations\n */\n\nclass AnswerReviewSection {\n  constructor(questions, userAnswers) {\n    this.questions = questions;\n    this.userAnswers = userAnswers;\n  }\n\n  /**\n   * Check if a user's answer is correct\n   */\n  isAnswerCorrect(question, userAnswer) {\n    if (!userAnswer) return false;\n\n    if (Array.isArray(question.correctAnswer)) {\n      if (!Array.isArray(userAnswer)) return false;\n      return (\n        JSON.stringify(userAnswer.sort()) ===\n        JSON.stringify(question.correctAnswer.sort())\n      );\n    }\n\n    return userAnswer === question.correctAnswer;\n  }\n\n  /**\n   * Format answer for display\n   */\n  formatAnswer(answer) {\n    if (!answer) return 'No answer provided';\n    if (Array.isArray(answer)) return answer.join(', ');\n    if (typeof answer === 'boolean') return answer ? 'True' : 'False';\n    return String(answer);\n  }\n\n  /**\n   * Render a single question review\n   */\n  renderQuestion(question, index) {\n    const userAnswer = this.userAnswers[question.id];\n    const isCorrect = this.isAnswerCorrect(question, userAnswer);\n    const statusClass = isCorrect ? 'correct' : 'incorrect';\n\n    const questionDiv = document.createElement('div');\n    questionDiv.className = `question-review ${statusClass}`;\n\n    questionDiv.innerHTML = `\n      <div class=\"question-header\">\n        <div class=\"question-number-badge\">\n          <span class=\"question-number\">Q${index + 1}</span>\n          <span class=\"status-icon\">${isCorrect ? '✅' : '❌'}</span>\n        </div>\n        <div class=\"question-points\">\n          ${question.points} ${question.points === 1 ? 'point' : 'points'}\n        </div>\n      </div>\n      \n      <div class=\"question-content\">\n        <div class=\"question-text\">${question.question}</div>\n        ${\n          question.code\n            ? `\n          <div class=\"code-block-wrapper\">\n            <div class=\"code-header\">\n              <span class=\"language-label\">${question.language?.toUpperCase() || 'CODE'}</span>\n            </div>\n            <pre><code class=\"language-${question.language || 'text'}\">${this.escapeHtml(question.code)}</code></pre>\n          </div>\n        `\n            : ''\n        }\n      </div>\n\n      <div class=\"answers-comparison\">\n        <div class=\"answer-row user-answer\">\n          <div class=\"answer-label\">Your Answer:</div>\n          <div class=\"answer-value ${statusClass}\">\n            ${this.formatAnswer(userAnswer)}\n          </div>\n        </div>\n        \n        ${\n          !isCorrect\n            ? `\n          <div class=\"answer-row correct-answer\">\n            <div class=\"answer-label\">Correct Answer:</div>\n            <div class=\"answer-value correct\">\n              ${this.formatAnswer(question.correctAnswer)}\n            </div>\n          </div>\n        `\n            : ''\n        }\n      </div>\n\n      ${\n        question.explanation\n          ? `\n        <div class=\"explanation-section\">\n          <div class=\"explanation-header\">\n            <span class=\"explanation-icon\">💡</span>\n            <strong>Explanation</strong>\n          </div>\n          <div class=\"explanation-content\">\n            ${question.explanation}\n          </div>\n        </div>\n      `\n          : ''\n      }\n\n      ${\n        question.options && question.type !== 'code'\n          ? `\n        <div class=\"options-review\">\n          <div class=\"options-header\">Available Options:</div>\n          <div class=\"options-list\">\n            ${question.options\n              .map(option => {\n                let optionClass = '';\n                if (Array.isArray(question.correctAnswer)) {\n                  optionClass = question.correctAnswer.includes(option)\n                    ? 'correct-option'\n                    : '';\n                } else {\n                  optionClass =\n                    option === question.correctAnswer ? 'correct-option' : '';\n                }\n\n                let userSelected = '';\n                if (Array.isArray(userAnswer)) {\n                  userSelected = userAnswer.includes(option)\n                    ? 'user-selected'\n                    : '';\n                } else {\n                  userSelected = userAnswer === option ? 'user-selected' : '';\n                }\n\n                return `\n                <div class=\"option-item ${optionClass} ${userSelected}\">\n                  <span class=\"option-text\">${option}</span>\n                  ${optionClass ? '<span class=\"correct-indicator\">✓</span>' : ''}\n                  ${userSelected && !optionClass ? '<span class=\"incorrect-indicator\">✗</span>' : ''}\n                </div>\n              `;\n              })\n              .join('')}\n          </div>\n        </div>\n      `\n          : ''\n      }\n    `;\n\n    return questionDiv;\n  }\n\n  /**\n   * Render the complete answer review section\n   */\n  render() {\n    const container = document.createElement('div');\n    container.className = 'answer-review-section';\n\n    // Header\n    const header = document.createElement('div');\n    header.className = 'review-header';\n    header.innerHTML = `\n      <h2>📋 Review Your Answers</h2>\n      <p class=\"review-description\">\n        Review each question to understand your performance and learn from any mistakes.\n      </p>\n    `;\n    container.appendChild(header);\n\n    // Questions container\n    const questionsContainer = document.createElement('div');\n    questionsContainer.className = 'questions-container';\n\n    this.questions.forEach((question, index) => {\n      const questionElement = this.renderQuestion(question, index);\n      questionsContainer.appendChild(questionElement);\n    });\n\n    container.appendChild(questionsContainer);\n\n    return container;\n  }\n\n  /**\n   * Escape HTML to prevent XSS\n   */\n  escapeHtml(text) {\n    const div = document.createElement('div');\n    div.textContent = text;\n    return div.innerHTML;\n  }\n\n  /**\n   * Static method to create and render answer review\n   */\n  static create(questions, userAnswers) {\n    const review = new AnswerReviewSection(questions, userAnswers);\n    return review.render();\n  }\n}\n\nexport default AnswerReviewSection;\n","/**\n * QuizActionButtons Component\n * Action buttons for quiz completion with context-aware options\n */\n\nclass QuizActionButtons {\n  constructor(quizId, score, totalPoints, router) {\n    this.quizId = quizId;\n    this.score = score;\n    this.totalPoints = totalPoints;\n    this.router = router;\n    this.percentage = Math.round((score / totalPoints) * 100);\n  }\n\n  /**\n   * Handle retake quiz action\n   */\n  retakeQuiz() {\n    if (\n      confirm(\n        'Are you sure you want to retake this quiz? Your current results will be replaced.'\n      )\n    ) {\n      // Reload the current quiz\n      window.location.reload();\n    }\n  }\n\n  /**\n   * Handle review incorrect answers action\n   */\n  reviewIncorrectAnswers() {\n    // Scroll to the answer review section\n    const reviewSection = document.querySelector('.answer-review-section');\n    if (reviewSection) {\n      reviewSection.scrollIntoView({\n        behavior: 'smooth',\n        block: 'start',\n      });\n\n      // Highlight incorrect answers\n      const incorrectAnswers = reviewSection.querySelectorAll(\n        '.question-review.incorrect'\n      );\n      incorrectAnswers.forEach((element, index) => {\n        setTimeout(() => {\n          element.classList.add('highlight-incorrect');\n          setTimeout(() => {\n            element.classList.remove('highlight-incorrect');\n          }, 2000);\n        }, index * 200);\n      });\n    }\n  }\n\n  /**\n   * Handle continue learning action\n   */\n  continueLearning() {\n    // Navigate to modules or learning path\n    if (this.router) {\n      this.router.navigate('/modules');\n    } else {\n      window.location.hash = '#/modules';\n    }\n  }\n\n  /**\n   * Handle find related content action\n   */\n  findRelatedContent() {\n    // For low scores, suggest related learning materials\n    if (this.router) {\n      this.router.navigate(\n        '/modules?related=' + encodeURIComponent(this.quizId)\n      );\n    } else {\n      window.location.hash =\n        '#/modules?related=' + encodeURIComponent(this.quizId);\n    }\n  }\n\n  /**\n   * Handle back to overview action\n   */\n  backToOverview() {\n    if (this.router) {\n      this.router.navigate('/quizzes');\n    } else {\n      window.location.hash = '#/quizzes';\n    }\n  }\n\n  /**\n   * Handle share results action\n   */\n  shareResults() {\n    const shareText = `I just completed a quiz and scored ${this.percentage}%! 🎉`;\n\n    if (navigator.share) {\n      navigator\n        .share({\n          title: 'Quiz Results',\n          text: shareText,\n          url: window.location.href,\n        })\n        .catch(err => console.warn('Error sharing:', err));\n    } else {\n      // Fallback: copy to clipboard\n      navigator.clipboard\n        .writeText(shareText + ' ' + window.location.href)\n        .then(() => {\n          // Show temporary notification\n          this.showNotification('Results copied to clipboard!');\n        })\n        .catch(err => {\n          console.warn('Error copying to clipboard:', err);\n        });\n    }\n  }\n\n  /**\n   * Show temporary notification\n   */\n  showNotification(message) {\n    const notification = document.createElement('div');\n    notification.className = 'action-notification';\n    notification.textContent = message;\n    document.body.appendChild(notification);\n\n    setTimeout(() => {\n      notification.classList.add('show');\n    }, 10);\n\n    setTimeout(() => {\n      notification.classList.remove('show');\n      setTimeout(() => {\n        document.body.removeChild(notification);\n      }, 300);\n    }, 2000);\n  }\n\n  /**\n   * Render the action buttons\n   */\n  render() {\n    const container = document.createElement('div');\n    container.className = 'quiz-action-buttons';\n\n    // Primary actions (always shown)\n    const primaryActions = document.createElement('div');\n    primaryActions.className = 'primary-actions';\n\n    // Retake quiz button\n    const retakeBtn = document.createElement('button');\n    retakeBtn.className = 'btn btn-primary action-btn';\n    retakeBtn.innerHTML = `\n      <span class=\"btn-icon\">🔄</span>\n      <span class=\"btn-text\">Retake Quiz</span>\n    `;\n    retakeBtn.addEventListener('click', () => this.retakeQuiz());\n    primaryActions.appendChild(retakeBtn);\n\n    // Continue learning button\n    const continueBtn = document.createElement('button');\n    continueBtn.className = 'btn btn-success action-btn';\n    continueBtn.innerHTML = `\n      <span class=\"btn-icon\">➡️</span>\n      <span class=\"btn-text\">Continue Learning</span>\n    `;\n    continueBtn.addEventListener('click', () => this.continueLearning());\n    primaryActions.appendChild(continueBtn);\n\n    container.appendChild(primaryActions);\n\n    // Secondary actions\n    const secondaryActions = document.createElement('div');\n    secondaryActions.className = 'secondary-actions';\n\n    // Review incorrect answers (only if there are wrong answers)\n    if (this.score < this.totalPoints) {\n      const reviewBtn = document.createElement('button');\n      reviewBtn.className = 'btn btn-secondary action-btn';\n      reviewBtn.innerHTML = `\n        <span class=\"btn-icon\">📖</span>\n        <span class=\"btn-text\">Review Incorrect Answers</span>\n      `;\n      reviewBtn.addEventListener('click', () => this.reviewIncorrectAnswers());\n      secondaryActions.appendChild(reviewBtn);\n    }\n\n    // Find related content (for low scores)\n    if (this.percentage < 70) {\n      const relatedBtn = document.createElement('button');\n      relatedBtn.className = 'btn btn-info action-btn';\n      relatedBtn.innerHTML = `\n        <span class=\"btn-icon\">🔍</span>\n        <span class=\"btn-text\">Find Related Content</span>\n      `;\n      relatedBtn.addEventListener('click', () => this.findRelatedContent());\n      secondaryActions.appendChild(relatedBtn);\n    }\n\n    // Share results (for good scores)\n    if (this.percentage >= 70) {\n      const shareBtn = document.createElement('button');\n      shareBtn.className = 'btn btn-outline action-btn';\n      shareBtn.innerHTML = `\n        <span class=\"btn-icon\">📤</span>\n        <span class=\"btn-text\">Share Results</span>\n      `;\n      shareBtn.addEventListener('click', () => this.shareResults());\n      secondaryActions.appendChild(shareBtn);\n    }\n\n    // Back to overview\n    const backBtn = document.createElement('button');\n    backBtn.className = 'btn btn-outline action-btn';\n    backBtn.innerHTML = `\n      <span class=\"btn-icon\">📋</span>\n      <span class=\"btn-text\">Back to Overview</span>\n    `;\n    backBtn.addEventListener('click', () => this.backToOverview());\n    secondaryActions.appendChild(backBtn);\n\n    container.appendChild(secondaryActions);\n\n    // Add performance-based encouragement message\n    const encouragement = document.createElement('div');\n    encouragement.className = 'encouragement-message';\n    encouragement.innerHTML = this.getEncouragementMessage();\n    container.appendChild(encouragement);\n\n    return container;\n  }\n\n  /**\n   * Get encouragement message based on performance\n   */\n  getEncouragementMessage() {\n    if (this.percentage >= 90) {\n      return `\n        <div class=\"encouragement excellent\">\n          <span class=\"encouragement-icon\">🌟</span>\n          <p>Excellent work! You've mastered this topic. Ready for the next challenge?</p>\n        </div>\n      `;\n    }\n    if (this.percentage >= 80) {\n      return `\n        <div class=\"encouragement very-good\">\n          <span class=\"encouragement-icon\">🎯</span>\n          <p>Great job! You have a solid understanding. Keep up the momentum!</p>\n        </div>\n      `;\n    }\n    if (this.percentage >= 70) {\n      return `\n        <div class=\"encouragement good\">\n          <span class=\"encouragement-icon\">👍</span>\n          <p>Well done! You passed. Review the explanations to strengthen your knowledge.</p>\n        </div>\n      `;\n    }\n    if (this.percentage >= 60) {\n      return `\n        <div class=\"encouragement pass\">\n          <span class=\"encouragement-icon\">📚</span>\n          <p>You passed, but there's room for improvement. Review the material and try again!</p>\n        </div>\n      `;\n    }\n    return `\n      <div class=\"encouragement needs-review\">\n        <span class=\"encouragement-icon\">💪</span>\n        <p>Don't give up! Review the explanations and related content, then try again. You've got this!</p>\n      </div>\n    `;\n  }\n\n  /**\n   * Static method to create and render action buttons\n   */\n  static create(quizId, score, totalPoints, router = null) {\n    const buttons = new QuizActionButtons(quizId, score, totalPoints, router);\n    return buttons.render();\n  }\n}\n\nexport default QuizActionButtons;\n","/**\n * IHK Quiz View Component\n * Displays IHK-specific quizzes with metadata, questions, and results\n */\n\nimport accessibilityHelper from '../utils/AccessibilityHelper.js';\n\nimport EmptyState from './EmptyState.js';\nimport LoadingSpinner from './LoadingSpinner.js';\nimport toastNotification from './ToastNotification.js';\nimport QuizResultsDisplay from './QuizResultsDisplay.js';\nimport AnswerReviewSection from './AnswerReviewSection.js';\nimport QuizActionButtons from './QuizActionButtons.js';\n\nclass IHKQuizView {\n  constructor(services) {\n    this.services = services;\n    this.ihkContentService = services.ihkContentService;\n    this.quizService = services.quizService;\n    this.router = services.router;\n    this.quiz = null;\n    this.currentQuestionIndex = 0;\n    this.answers = {};\n    this.showResults = false;\n    this.startTime = null;\n    this.endTime = null;\n\n    // Timer properties\n    this.timerInterval = null;\n    this.timeRemaining = 0; // in seconds\n    this.timerStarted = false;\n  }\n\n  /**\n   * Render the quiz view\n   */\n  async render(quizId) {\n    const container = document.createElement('div');\n    container.className = 'ihk-quiz-view';\n    container.innerHTML = LoadingSpinner.render('Loading quiz...');\n\n    // Load quiz asynchronously\n    window.setTimeout(async () => {\n      try {\n        this.quiz = await this.ihkContentService.getQuizById(quizId);\n\n        if (!this.quiz) {\n          const errorState = EmptyState.create({\n            icon: '📝',\n            title: 'Quiz Not Found',\n            message: 'The requested quiz could not be found.',\n            action: {\n              label: 'Back to Overview',\n              onClick: () => this.router.navigate('/'),\n            },\n          });\n          container.innerHTML = '';\n          container.appendChild(errorState);\n          return;\n        }\n\n        this.startTime = Date.now();\n\n        // Initialize timer if quiz has time limit\n        if (this.quiz.timeLimit) {\n          this.initializeTimer();\n        }\n\n        container.innerHTML = '';\n        container.appendChild(this.renderContent());\n\n        // Set up page visibility handling for timer\n        this.setupPageVisibilityHandling();\n\n        accessibilityHelper.announce(`Quiz loaded: ${this.quiz.title}`);\n      } catch (error) {\n        console.error('Error loading quiz:', error);\n        const errorState = EmptyState.create({\n          icon: '⚠️',\n          title: 'Error Loading Quiz',\n          message: 'Failed to load quiz content. Please try again.',\n          action: {\n            label: 'Retry',\n            onClick: () => this.render(quizId),\n          },\n        });\n        container.innerHTML = '';\n        container.appendChild(errorState);\n        toastNotification.error('Failed to load quiz');\n      }\n    }, 0);\n\n    return container;\n  }\n\n  /**\n   * Render the main content\n   */\n  renderContent() {\n    const content = document.createElement('div');\n    content.className = 'ihk-quiz-content';\n\n    if (this.showResults) {\n      content.appendChild(this.renderResults());\n    } else {\n      // Breadcrumb\n      const breadcrumb = this.renderBreadcrumb();\n      content.appendChild(breadcrumb);\n\n      // Quiz header\n      const header = this.renderHeader();\n      content.appendChild(header);\n\n      // Quiz progress\n      const progress = this.renderProgress();\n      content.appendChild(progress);\n\n      // Current question\n      const question = this.renderQuestion();\n      content.appendChild(question);\n\n      // Navigation\n      const navigation = this.renderNavigation();\n      content.appendChild(navigation);\n    }\n\n    return content;\n  }\n\n  /**\n   * Render breadcrumb navigation\n   */\n  renderBreadcrumb() {\n    const nav = document.createElement('nav');\n    nav.className = 'breadcrumb';\n    nav.setAttribute('aria-label', 'Breadcrumb');\n\n    nav.innerHTML = `\n      <ol>\n        <li><a href=\"#/\">Home</a></li>\n        <li><a href=\"#/quizzes\">Quizzes</a></li>\n        <li><span aria-current=\"page\">${this.quiz.title}</span></li>\n      </ol>\n    `;\n\n    return nav;\n  }\n\n  /**\n   * Render quiz header with metadata\n   */\n  renderHeader() {\n    const header = document.createElement('header');\n    header.className = 'quiz-header';\n\n    const badges = [];\n    if (this.quiz.newIn2025) {\n      badges.push('<span class=\"badge badge-new\">Neu 2025</span>');\n    }\n\n    header.innerHTML = `\n      <div class=\"quiz-badges\">\n        ${badges.join('')}\n      </div>\n      <h1>${this.quiz.title}</h1>\n      <p class=\"quiz-description\">${this.quiz.description}</p>\n      <div class=\"quiz-metadata\">\n        <span class=\"meta-item\">\n          <strong>Kategorie:</strong> ${this.quiz.category}\n        </span>\n        <span class=\"meta-item\">\n          <strong>Schwierigkeit:</strong> \n          <span class=\"difficulty difficulty-${this.quiz.difficulty}\">\n            ${this.getDifficultyLabel(this.quiz.difficulty)}\n          </span>\n        </span>\n        <span class=\"meta-item\">\n          <strong>Fragen:</strong> ${this.quiz.questions.length}\n        </span>\n        ${\n          this.quiz.timeLimit\n            ? `\n          <span class=\"meta-item\">\n            <strong>Zeitlimit:</strong> ${this.quiz.timeLimit} Min.\n          </span>\n        `\n            : ''\n        }\n        <span class=\"meta-item\">\n          <strong>Bestehensgrenze:</strong> ${this.quiz.passingScore}%\n        </span>\n      </div>\n    `;\n\n    return header;\n  }\n\n  /**\n   * Render quiz progress\n   */\n  renderProgress() {\n    const progress = document.createElement('div');\n    progress.className = 'quiz-progress';\n\n    const percentage =\n      ((this.currentQuestionIndex + 1) / this.quiz.questions.length) * 100;\n\n    progress.innerHTML = `\n      <div class=\"progress-info\">\n        <span>Frage ${this.currentQuestionIndex + 1} von ${this.quiz.questions.length}</span>\n        ${\n          this.quiz.timeLimit\n            ? `\n          <span class=\"time-remaining\" id=\"time-remaining\" role=\"timer\" aria-live=\"polite\">\n            Zeit: ${this.getFormattedTimeRemaining() || this.quiz.timeLimit + ':00'}\n          </span>\n        `\n            : ''\n        }\n      </div>\n      <div class=\"progress-bar\" role=\"progressbar\" \n           aria-valuenow=\"${percentage}\" \n           aria-valuemin=\"0\" \n           aria-valuemax=\"100\"\n           aria-label=\"Quiz progress\">\n        <div class=\"progress-fill\" style=\"width: ${percentage}%\"></div>\n      </div>\n    `;\n\n    return progress;\n  }\n\n  /**\n   * Render current question\n   */\n  renderQuestion() {\n    const section = document.createElement('section');\n    section.className = 'quiz-question';\n    section.setAttribute('aria-labelledby', 'question-heading');\n\n    const question = this.quiz.questions[this.currentQuestionIndex];\n    const questionNumber = this.currentQuestionIndex + 1;\n\n    section.innerHTML = `\n      <h2 id=\"question-heading\">Frage ${questionNumber}</h2>\n      <div class=\"question-content\">\n        <p class=\"question-text\">${question.question}</p>\n        ${\n          question.code\n            ? `\n          <div class=\"code-block-wrapper\">\n            <div class=\"code-header\">\n              <span class=\"language-label\">${question.language?.toUpperCase() || 'CODE'}</span>\n            </div>\n            <pre><code class=\"language-${question.language || 'text'}\">${this.escapeHtml(question.code)}</code></pre>\n          </div>\n        `\n            : ''\n        }\n      </div>\n      <div class=\"question-options\">\n        ${this.renderOptions(question)}\n      </div>\n      <div class=\"question-points\">\n        <span>${question.points} ${question.points === 1 ? 'Punkt' : 'Punkte'}</span>\n      </div>\n    `;\n\n    return section;\n  }\n\n  /**\n   * Render question options based on type\n   */\n  renderOptions(question) {\n    const questionId = question.id;\n    const savedAnswer = this.answers[questionId];\n\n    switch (question.type) {\n      case 'single-choice':\n        return question.options\n          .map(\n            option => `\n          <label class=\"option-label\">\n            <input \n              type=\"radio\" \n              name=\"question-${questionId}\" \n              value=\"${option}\"\n              ${savedAnswer === option ? 'checked' : ''}\n              onchange=\"window.ihkQuizView.saveAnswer('${questionId}', this.value)\"\n            />\n            <span class=\"option-text\">${option}</span>\n          </label>\n        `\n          )\n          .join('');\n\n      case 'multiple-choice': {\n        const savedAnswers = savedAnswer || [];\n        return question.options\n          .map(\n            option => `\n          <label class=\"option-label\">\n            <input \n              type=\"checkbox\" \n              name=\"question-${questionId}\" \n              value=\"${option}\"\n              ${savedAnswers.includes(option) ? 'checked' : ''}\n              onchange=\"window.ihkQuizView.saveMultipleAnswer('${questionId}', this.value, this.checked)\"\n            />\n            <span class=\"option-text\">${option}</span>\n          </label>\n        `\n          )\n          .join('');\n      }\n\n      case 'true-false':\n        return `\n          <label class=\"option-label\">\n            <input \n              type=\"radio\" \n              name=\"question-${questionId}\" \n              value=\"true\"\n              ${savedAnswer === 'true' ? 'checked' : ''}\n              onchange=\"window.ihkQuizView.saveAnswer('${questionId}', this.value)\"\n            />\n            <span class=\"option-text\">Wahr</span>\n          </label>\n          <label class=\"option-label\">\n            <input \n              type=\"radio\" \n              name=\"question-${questionId}\" \n              value=\"false\"\n              ${savedAnswer === 'false' ? 'checked' : ''}\n              onchange=\"window.ihkQuizView.saveAnswer('${questionId}', this.value)\"\n            />\n            <span class=\"option-text\">Falsch</span>\n          </label>\n        `;\n\n      case 'code':\n        return `\n          <textarea \n            class=\"code-answer\"\n            placeholder=\"Gib deine Antwort hier ein...\"\n            onchange=\"window.ihkQuizView.saveAnswer('${questionId}', this.value)\"\n          >${savedAnswer || ''}</textarea>\n        `;\n\n      default:\n        return '<p>Unbekannter Fragetyp</p>';\n    }\n  }\n\n  /**\n   * Render navigation buttons\n   */\n  renderNavigation() {\n    const nav = document.createElement('div');\n    nav.className = 'quiz-navigation';\n\n    const isFirst = this.currentQuestionIndex === 0;\n    const isLast = this.currentQuestionIndex === this.quiz.questions.length - 1;\n\n    nav.innerHTML = `\n      <button \n        class=\"btn btn-secondary\"\n        ${isFirst ? 'disabled' : ''}\n        onclick=\"window.ihkQuizView.previousQuestion()\"\n      >\n        ← Zurück\n      </button>\n      ${\n        isLast\n          ? `\n        <button \n          class=\"btn btn-primary\"\n          onclick=\"window.ihkQuizView.submitQuiz()\"\n        >\n          Quiz abschließen\n        </button>\n      `\n          : `\n        <button \n          class=\"btn btn-primary\"\n          onclick=\"window.ihkQuizView.nextQuestion()\"\n        >\n          Weiter →\n        </button>\n      `\n      }\n    `;\n\n    // Store reference for button handlers\n    window.ihkQuizView = this;\n\n    return nav;\n  }\n\n  /**\n   * Render results with enhanced components\n   */\n  renderResults() {\n    const results = document.createElement('div');\n    results.className = 'quiz-results-enhanced';\n\n    const score = this.calculateScore();\n    const passed = score.percentage >= this.quiz.passingScore;\n    const timeTaken = this.endTime\n      ? Math.round((this.endTime - this.startTime) / 1000 / 60)\n      : 0;\n\n    // Header with pass/fail status\n    const header = document.createElement('div');\n    header.className = 'enhanced-results-header';\n    header.innerHTML = `\n      <div class=\"results-status ${passed ? 'passed' : 'failed'}\">\n        <div class=\"status-icon\">${passed ? '🎉' : '📚'}</div>\n        <h1>${passed ? 'Congratulations! You Passed!' : 'Keep Learning!'}</h1>\n        <p class=\"status-message\">\n          ${\n            passed\n              ? 'Great job! You have successfully completed this quiz.'\n              : \"Don't worry, review the explanations and try again.\"\n          }\n        </p>\n        ${timeTaken > 0 ? `<p class=\"time-taken\">Completed in ${timeTaken} minutes</p>` : ''}\n      </div>\n    `;\n    results.appendChild(header);\n\n    // Enhanced results display\n    const resultsDisplay = QuizResultsDisplay.create(\n      score.earned,\n      this.quiz.questions.length,\n      score.total\n    );\n    results.appendChild(resultsDisplay);\n\n    // Answer review section\n    const answerReview = AnswerReviewSection.create(\n      this.quiz.questions,\n      this.answers\n    );\n    results.appendChild(answerReview);\n\n    // Action buttons\n    const actionButtons = QuizActionButtons.create(\n      this.quiz.id,\n      score.earned,\n      score.total,\n      this.router\n    );\n    results.appendChild(actionButtons);\n\n    return results;\n  }\n\n  /**\n   * Save single answer\n   */\n  saveAnswer(questionId, value) {\n    this.answers[questionId] = value;\n  }\n\n  /**\n   * Save multiple choice answer\n   */\n  saveMultipleAnswer(questionId, value, checked) {\n    if (!this.answers[questionId]) {\n      this.answers[questionId] = [];\n    }\n    if (checked) {\n      this.answers[questionId].push(value);\n    } else {\n      this.answers[questionId] = this.answers[questionId].filter(\n        v => v !== value\n      );\n    }\n  }\n\n  /**\n   * Navigate to next question\n   */\n  nextQuestion() {\n    if (this.currentQuestionIndex < this.quiz.questions.length - 1) {\n      this.currentQuestionIndex++;\n      this.updateView();\n      accessibilityHelper.announce(\n        `Question ${this.currentQuestionIndex + 1} of ${this.quiz.questions.length}`\n      );\n    }\n  }\n\n  /**\n   * Navigate to previous question\n   */\n  previousQuestion() {\n    if (this.currentQuestionIndex > 0) {\n      this.currentQuestionIndex--;\n      this.updateView();\n      accessibilityHelper.announce(\n        `Question ${this.currentQuestionIndex + 1} of ${this.quiz.questions.length}`\n      );\n    }\n  }\n\n  /**\n   * Submit quiz\n   */\n  async submitQuiz() {\n    // Stop the timer\n    this.stopTimer();\n\n    this.endTime = Date.now();\n    this.showResults = true;\n\n    // Calculate score\n    const scoreData = this.calculateScore();\n\n    // Convert answers object to array format for QuizService\n    const answersArray = this.quiz.questions.map(question => ({\n      questionId: question.id,\n      userAnswer: this.answers[question.id],\n      isCorrect: this.checkAnswer(question, this.answers[question.id]),\n    }));\n\n    // Save attempt using QuizService\n    await this.quizService.saveQuizAttempt(\n      this.quiz.id,\n      scoreData.percentage,\n      answersArray\n    );\n\n    this.updateView();\n    accessibilityHelper.announce('Quiz completed. Results are now displayed.');\n  }\n\n  /**\n   * Update view\n   */\n  updateView() {\n    const container = document.querySelector('.ihk-quiz-content');\n    if (container) {\n      const newContent = this.renderContent();\n      container.replaceWith(newContent);\n    }\n  }\n\n  /**\n   * Calculate score\n   */\n  calculateScore() {\n    let earned = 0;\n    let total = 0;\n    let correct = 0;\n    let incorrect = 0;\n\n    this.quiz.questions.forEach(question => {\n      total += question.points;\n      const userAnswer = this.answers[question.id];\n      const isCorrect = this.checkAnswer(question, userAnswer);\n\n      if (isCorrect) {\n        earned += question.points;\n        correct++;\n      } else {\n        incorrect++;\n      }\n    });\n\n    return {\n      earned,\n      total,\n      percentage: Math.round((earned / total) * 100),\n      correct,\n      incorrect,\n    };\n  }\n\n  /**\n   * Check if answer is correct\n   */\n  checkAnswer(question, userAnswer) {\n    if (!userAnswer) return false;\n\n    if (Array.isArray(question.correctAnswer)) {\n      if (!Array.isArray(userAnswer)) return false;\n      return (\n        JSON.stringify(userAnswer.sort()) ===\n        JSON.stringify(question.correctAnswer.sort())\n      );\n    }\n\n    return userAnswer === question.correctAnswer;\n  }\n\n  /**\n   * Format answer for display\n   */\n  formatAnswer(answer) {\n    if (!answer) return 'Keine Antwort';\n    if (Array.isArray(answer)) return answer.join(', ');\n    return answer;\n  }\n\n  /**\n   * Escape HTML\n   */\n  escapeHtml(text) {\n    const div = document.createElement('div');\n    div.textContent = text;\n    return div.innerHTML;\n  }\n\n  /**\n   * Get difficulty label\n   */\n  getDifficultyLabel(difficulty) {\n    const labels = {\n      beginner: 'Anfänger',\n      intermediate: 'Fortgeschritten',\n      advanced: 'Experte',\n    };\n    return labels[difficulty] || difficulty;\n  }\n\n  /**\n   * Initialize the quiz timer\n   */\n  initializeTimer() {\n    if (!this.quiz.timeLimit || this.timerStarted) return;\n\n    // Convert minutes to seconds\n    this.timeRemaining = this.quiz.timeLimit * 60;\n    this.timerStarted = true;\n\n    // Start the timer\n    this.startTimer();\n  }\n\n  /**\n   * Start the countdown timer\n   */\n  startTimer() {\n    if (this.timerInterval) {\n      clearInterval(this.timerInterval);\n    }\n\n    this.timerInterval = setInterval(() => {\n      this.timeRemaining--;\n      this.updateTimerDisplay();\n\n      // Check if time is up\n      if (this.timeRemaining <= 0) {\n        this.handleTimeUp();\n      }\n\n      // Warning when 5 minutes remaining\n      if (this.timeRemaining === 300) {\n        toastNotification.warning('Nur noch 5 Minuten verbleibend!');\n        accessibilityHelper.announce('Warning: 5 minutes remaining');\n      }\n\n      // Warning when 1 minute remaining\n      if (this.timeRemaining === 60) {\n        toastNotification.warning('Nur noch 1 Minute verbleibend!');\n        accessibilityHelper.announce('Warning: 1 minute remaining');\n      }\n\n      // Warning when 30 seconds remaining\n      if (this.timeRemaining === 30) {\n        toastNotification.error('Nur noch 30 Sekunden!');\n        accessibilityHelper.announce('Warning: 30 seconds remaining');\n      }\n    }, 1000);\n  }\n\n  /**\n   * Update the timer display\n   */\n  updateTimerDisplay() {\n    const timerElement = document.getElementById('time-remaining');\n    if (!timerElement) return;\n\n    const minutes = Math.floor(this.timeRemaining / 60);\n    const seconds = this.timeRemaining % 60;\n    const timeString = `${minutes}:${seconds.toString().padStart(2, '0')}`;\n\n    timerElement.textContent = `Zeit: ${timeString}`;\n\n    // Add visual warning when time is running low\n    if (this.timeRemaining <= 300) {\n      // 5 minutes\n      timerElement.classList.add('time-warning');\n    }\n\n    if (this.timeRemaining <= 60) {\n      // 1 minute\n      timerElement.classList.add('time-critical');\n    }\n  }\n\n  /**\n   * Handle timer expiration\n   */\n  handleTimeUp() {\n    this.stopTimer();\n    toastNotification.error('Zeit abgelaufen! Quiz wird automatisch beendet.');\n    accessibilityHelper.announce(\n      'Time is up! Quiz will be submitted automatically.'\n    );\n\n    // Auto-submit the quiz\n    setTimeout(() => {\n      this.submitQuiz();\n    }, 2000);\n  }\n\n  /**\n   * Stop the timer\n   */\n  stopTimer() {\n    if (this.timerInterval) {\n      clearInterval(this.timerInterval);\n      this.timerInterval = null;\n    }\n  }\n\n  /**\n   * Pause the timer (for when user navigates away)\n   */\n  pauseTimer() {\n    if (this.timerInterval) {\n      clearInterval(this.timerInterval);\n      this.timerInterval = null;\n    }\n  }\n\n  /**\n   * Resume the timer\n   */\n  resumeTimer() {\n    if (this.timerStarted && !this.timerInterval && this.timeRemaining > 0) {\n      this.startTimer();\n    }\n  }\n\n  /**\n   * Get formatted time remaining\n   */\n  getFormattedTimeRemaining() {\n    const minutes = Math.floor(this.timeRemaining / 60);\n    const seconds = this.timeRemaining % 60;\n    return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n  }\n\n  /**\n   * Setup page visibility handling to pause/resume timer\n   */\n  setupPageVisibilityHandling() {\n    // Handle page visibility changes\n    document.addEventListener('visibilitychange', () => {\n      if (document.hidden) {\n        // Page is hidden, pause timer\n        this.pauseTimer();\n      } else {\n        // Page is visible, resume timer\n        this.resumeTimer();\n      }\n    });\n\n    // Handle window focus/blur\n    window.addEventListener('blur', () => {\n      this.pauseTimer();\n    });\n\n    window.addEventListener('focus', () => {\n      this.resumeTimer();\n    });\n  }\n\n  /**\n   * Cleanup timer when component is destroyed\n   */\n  cleanup() {\n    this.stopTimer();\n\n    // Remove event listeners\n    document.removeEventListener(\n      'visibilitychange',\n      this.handleVisibilityChange\n    );\n    window.removeEventListener('blur', this.handleWindowBlur);\n    window.removeEventListener('focus', this.handleWindowFocus);\n  }\n}\n\nexport default IHKQuizView;\n","import EmptyState from './EmptyState.js';\nimport LoadingSpinner from './LoadingSpinner.js';\nimport toastNotification from './ToastNotification.js';\nimport { formatDate } from '../utils/formatUtils.js';\n\n/**\n * ProgressView - Comprehensive progress dashboard with specialization support\n */\nclass ProgressView {\n  constructor(services) {\n    this.progressService = services.progressService;\n    this.moduleService = services.moduleService;\n    this.quizService = services.quizService;\n    this.ihkContentService = services.ihkContentService;\n    this.stateManager = services.stateManager;\n    this.specializationService = services.specializationService;\n  }\n\n  /**\n   * Render progress view with specialization support\n   */\n  async render() {\n    const container = document.createElement('main');\n    container.className = 'progress-view';\n    container.id = 'main-content';\n    container.setAttribute('role', 'main');\n    container.setAttribute('aria-label', 'Progress tracking page');\n\n    try {\n      const currentSpecialization = this.specializationService\n        ? this.specializationService.getCurrentSpecialization()\n        : null;\n\n      const overallProgress = await this.progressService.getOverallProgress();\n      const modules = await this.moduleService.getModules();\n      const quizHistory = this.progressService.getQuizHistory();\n      const quizzes = await this.ihkContentService.getAllQuizzes();\n\n      // Get specialization-specific data if available\n      let specializationStats = null;\n      let categoryBreakdown = null;\n\n      if (currentSpecialization && this.specializationService) {\n        try {\n          specializationStats =\n            await this.progressService.getSpecializationStatistics(\n              currentSpecialization\n            );\n          categoryBreakdown = overallProgress.categoryBreakdown || {};\n        } catch (error) {\n          console.warn('Could not load specialization statistics:', error);\n        }\n      }\n\n      container.innerHTML = `\n        <header class=\"progress-header\">\n          <h1 class=\"page-title\">Your Progress</h1>\n          <p class=\"page-description\">Track your learning journey and achievements</p>\n          ${currentSpecialization ? this._renderSpecializationHeader(currentSpecialization) : ''}\n        </header>\n\n        ${this._renderOverallProgress(overallProgress, specializationStats)}\n        ${categoryBreakdown ? this._renderCategoryBreakdown(categoryBreakdown, currentSpecialization) : ''}\n        ${this._renderModuleCompletion(modules, currentSpecialization)}\n        ${this._renderQuizHistory(quizHistory, quizzes)}\n        ${this._renderExportSection()}\n      `;\n\n      this._attachEventListeners(container);\n    } catch (error) {\n      console.error('Error rendering progress view:', error);\n      container.innerHTML = this._renderError();\n    }\n\n    return container;\n  }\n\n  /**\n   * Render specialization header\n   */\n  _renderSpecializationHeader(specializationId) {\n    if (!this.specializationService) return '';\n\n    const config =\n      this.specializationService.getSpecializationConfig(specializationId);\n    if (!config) return '';\n\n    return `\n      <div class=\"specialization-header\">\n        <div class=\"specialization-badge\" style=\"background-color: ${config.color}20; border-color: ${config.color}\">\n          <span class=\"specialization-icon\">${config.icon}</span>\n          <span class=\"specialization-name\">${config.name}</span>\n        </div>\n      </div>\n    `;\n  }\n\n  /**\n   * Render overall progress card with specialization support\n   */\n  _renderOverallProgress(progress, specializationStats) {\n    const percentage = progress.overallPercentage || 0;\n    const lastActivity = progress.lastActivity\n      ? formatDate(progress.lastActivity)\n      : 'No activity yet';\n\n    const specializationInfo = specializationStats\n      ? `\n      <div class=\"specialization-progress-info\">\n        <h3 class=\"specialization-progress-title\">Specialization Progress</h3>\n        <div class=\"specialization-stats\">\n          ${\n            specializationStats.strengths.length > 0\n              ? `\n            <div class=\"stat-item strengths\">\n              <span class=\"stat-icon\">💪</span>\n              <div class=\"stat-content\">\n                <div class=\"stat-label\">Strengths</div>\n                <div class=\"stat-value\">${specializationStats.strengths.join(', ')}</div>\n              </div>\n            </div>\n          `\n              : ''\n          }\n          ${\n            specializationStats.improvementAreas.length > 0\n              ? `\n            <div class=\"stat-item improvements\">\n              <span class=\"stat-icon\">📈</span>\n              <div class=\"stat-content\">\n                <div class=\"stat-label\">Areas for Improvement</div>\n                <div class=\"stat-value\">${specializationStats.improvementAreas.join(', ')}</div>\n              </div>\n            </div>\n          `\n              : ''\n          }\n        </div>\n      </div>\n    `\n      : '';\n\n    return `\n      <section class=\"overall-progress-section\">\n        <div class=\"progress-card\">\n          <h2 class=\"card-title\">Overall Progress</h2>\n\n          <div class=\"progress-circle-container\">\n            <svg class=\"progress-circle\" viewBox=\"0 0 200 200\">\n              <circle\n                class=\"progress-circle-bg\"\n                cx=\"100\"\n                cy=\"100\"\n                r=\"90\"\n              />\n              <circle\n                class=\"progress-circle-fill\"\n                cx=\"100\"\n                cy=\"100\"\n                r=\"90\"\n                stroke-dasharray=\"${(percentage / 100) * 565.48} 565.48\"\n              />\n            </svg>\n            <div class=\"progress-circle-text\">\n              <div class=\"progress-percentage\">${percentage}%</div>\n              <div class=\"progress-label\">Complete</div>\n            </div>\n          </div>\n\n          <div class=\"progress-summary\">\n            <div class=\"summary-item\">\n              <span class=\"summary-icon\">📚</span>\n              <div class=\"summary-content\">\n                <div class=\"summary-value\">${progress.modulesCompleted}/${progress.totalModules}</div>\n                <div class=\"summary-label\">Modules Completed</div>\n              </div>\n            </div>\n\n            <div class=\"summary-item\">\n              <span class=\"summary-icon\">📝</span>\n              <div class=\"summary-content\">\n                <div class=\"summary-value\">${progress.quizzesTaken}</div>\n                <div class=\"summary-label\">Quizzes Taken</div>\n              </div>\n            </div>\n\n            <div class=\"summary-item\">\n              <span class=\"summary-icon\">⭐</span>\n              <div class=\"summary-content\">\n                <div class=\"summary-value\">${progress.averageQuizScore}%</div>\n                <div class=\"summary-label\">Average Score</div>\n              </div>\n            </div>\n\n            <div class=\"summary-item\">\n              <span class=\"summary-icon\">🕒</span>\n              <div class=\"summary-content\">\n                <div class=\"summary-value\">${lastActivity}</div>\n                <div class=\"summary-label\">Last Activity</div>\n              </div>\n            </div>\n          </div>\n\n          ${specializationInfo}\n        </div>\n      </section>\n    `;\n  }\n\n  /**\n   * Render category breakdown section\n   */\n  _renderCategoryBreakdown(categoryBreakdown, specializationId) {\n    if (!categoryBreakdown || Object.keys(categoryBreakdown).length === 0) {\n      return '';\n    }\n\n    const categories = Object.entries(categoryBreakdown)\n      .map(([categoryId, data]) => {\n        const completionRate =\n          data.modulesCompleted > 0\n            ? Math.round(\n                (data.modulesCompleted /\n                  Math.max(data.modulesCompleted + 1, 1)) *\n                  100\n              )\n            : 0;\n\n        const relevanceColor = this._getRelevanceColor(data.relevance);\n\n        return `\n        <div class=\"category-item\">\n          <div class=\"category-header\">\n            <div class=\"category-info\">\n              <h4 class=\"category-name\">${data.name}</h4>\n              <span class=\"category-relevance\" style=\"background-color: ${relevanceColor}20; color: ${relevanceColor}\">\n                ${data.relevance}\n              </span>\n            </div>\n            <div class=\"category-completion\">${completionRate}%</div>\n          </div>\n          \n          <div class=\"category-progress-bar\">\n            <div class=\"progress-bar-fill\" style=\"width: ${completionRate}%; background-color: ${relevanceColor}\"></div>\n          </div>\n          \n          <div class=\"category-stats\">\n            <div class=\"category-stat\">\n              <span class=\"stat-icon\">📚</span>\n              <span class=\"stat-text\">${data.modulesCompleted} modules</span>\n            </div>\n            <div class=\"category-stat\">\n              <span class=\"stat-icon\">📝</span>\n              <span class=\"stat-text\">${data.quizzesTaken} quizzes</span>\n            </div>\n            ${\n              data.averageQuizScore > 0\n                ? `\n              <div class=\"category-stat\">\n                <span class=\"stat-icon\">⭐</span>\n                <span class=\"stat-text\">${data.averageQuizScore}% avg</span>\n              </div>\n            `\n                : ''\n            }\n          </div>\n        </div>\n      `;\n      })\n      .join('');\n\n    return `\n      <section class=\"category-breakdown-section\">\n        <h2 class=\"section-title\">Progress by Category</h2>\n        <div class=\"category-grid\">\n          ${categories}\n        </div>\n      </section>\n    `;\n  }\n\n  /**\n   * Get color for relevance level\n   */\n  _getRelevanceColor(relevance) {\n    const colors = {\n      high: '#10b981',\n      medium: '#f59e0b',\n      low: '#6b7280',\n      none: '#9ca3af',\n    };\n    return colors[relevance] || colors.none;\n  }\n\n  /**\n   * Render module completion list with categorization\n   */\n  _renderModuleCompletion(modules, specializationId) {\n    const completedModules = modules.filter(m => m.completed);\n    const inProgressModules = modules.filter(m => m.inProgress && !m.completed);\n    const notStartedModules = modules.filter(\n      m => !m.completed && !m.inProgress\n    );\n\n    // Categorize modules if specialization service is available\n    let categorizedModules = {};\n    if (specializationId && this.specializationService) {\n      categorizedModules = this._categorizeModules(modules, specializationId);\n    }\n\n    const categoryTabs =\n      Object.keys(categorizedModules).length > 0\n        ? `\n      <div class=\"category-filter-tabs\">\n        <button class=\"category-tab active\" data-category=\"all\">\n          All Categories\n        </button>\n        ${Object.entries(categorizedModules)\n          .map(\n            ([categoryId, categoryModules]) => `\n          <button class=\"category-tab\" data-category=\"${categoryId}\">\n            ${this._getCategoryDisplayName(categoryId)} (${categoryModules.length})\n          </button>\n        `\n          )\n          .join('')}\n      </div>\n    `\n        : '';\n\n    return `\n      <section class=\"module-completion-section\">\n        <h2 class=\"section-title\">Module Progress</h2>\n\n        ${categoryTabs}\n\n        <div class=\"module-status-tabs\">\n          <button class=\"status-tab active\" data-tab=\"all\">\n            All (${modules.length})\n          </button>\n          <button class=\"status-tab\" data-tab=\"completed\">\n            Completed (${completedModules.length})\n          </button>\n          <button class=\"status-tab\" data-tab=\"in-progress\">\n            In Progress (${inProgressModules.length})\n          </button>\n          <button class=\"status-tab\" data-tab=\"not-started\">\n            Not Started (${notStartedModules.length})\n          </button>\n        </div>\n\n        <div class=\"module-list\" data-tab-content=\"all\">\n          ${this._renderModuleList(modules, specializationId)}\n        </div>\n\n        <div class=\"module-list hidden\" data-tab-content=\"completed\">\n          ${this._renderModuleList(completedModules, specializationId)}\n        </div>\n\n        <div class=\"module-list hidden\" data-tab-content=\"in-progress\">\n          ${this._renderModuleList(inProgressModules, specializationId)}\n        </div>\n\n        <div class=\"module-list hidden\" data-tab-content=\"not-started\">\n          ${this._renderModuleList(notStartedModules, specializationId)}\n        </div>\n\n        ${Object.entries(categorizedModules)\n          .map(\n            ([categoryId, categoryModules]) => `\n          <div class=\"module-list hidden\" data-category-content=\"${categoryId}\">\n            ${this._renderModuleList(categoryModules, specializationId)}\n          </div>\n        `\n          )\n          .join('')}\n      </section>\n    `;\n  }\n\n  /**\n   * Categorize modules by specialization relevance\n   */\n  _categorizeModules(modules, specializationId) {\n    if (!this.specializationService) return {};\n\n    const categories = {};\n\n    modules.forEach(module => {\n      const categoryId = this._getModuleCategoryId(module);\n      const relevance = this.specializationService.getCategoryRelevance(\n        categoryId,\n        specializationId\n      );\n\n      let categoryKey = 'general';\n      if (relevance === 'high' && categoryId.includes('BP-AE')) {\n        categoryKey = 'anwendungsentwicklung';\n      } else if (relevance === 'high' && categoryId.includes('BP-DPA')) {\n        categoryKey = 'daten-prozessanalyse';\n      }\n\n      if (!categories[categoryKey]) {\n        categories[categoryKey] = [];\n      }\n      categories[categoryKey].push(module);\n    });\n\n    return categories;\n  }\n\n  /**\n   * Get module category ID\n   */\n  _getModuleCategoryId(module) {\n    // Extract category from module ID or use category property\n    if (module.category) return module.category;\n\n    if (module.id.includes('bp-ae-')) return 'BP-AE';\n    if (module.id.includes('bp-dpa-')) return 'BP-DPA';\n    if (module.id.includes('fue-')) return 'FUE';\n\n    return 'general';\n  }\n\n  /**\n   * Get display name for category\n   */\n  _getCategoryDisplayName(categoryId) {\n    const names = {\n      general: 'General',\n      anwendungsentwicklung: 'Anwendungsentwicklung',\n      'daten-prozessanalyse': 'Daten- und Prozessanalyse',\n    };\n    return names[categoryId] || categoryId;\n  }\n\n  /**\n   * Render module list with category indicators\n   */\n  _renderModuleList(modules, specializationId) {\n    if (modules.length === 0) {\n      return '<div class=\"empty-state\"><p>No modules in this category.</p></div>';\n    }\n\n    return modules\n      .map(module => {\n        const categoryId = this._getModuleCategoryId(module);\n        const relevance =\n          specializationId && this.specializationService\n            ? this.specializationService.getCategoryRelevance(\n                categoryId,\n                specializationId\n              )\n            : 'medium';\n        const relevanceColor = this._getRelevanceColor(relevance);\n\n        return `\n            <div class=\"module-progress-item\">\n              <div class=\"module-info\">\n                <div class=\"module-header\">\n                  <h3 class=\"module-name\">${module.title}</h3>\n                  <div class=\"module-indicators\">\n                    <span class=\"module-category\" style=\"background-color: ${relevanceColor}20; color: ${relevanceColor}\">\n                      ${this._getCategoryDisplayName(this._getModuleCategoryId(module))}\n                    </span>\n                    ${\n                      relevance !== 'medium'\n                        ? `\n                      <span class=\"relevance-indicator\" style=\"background-color: ${relevanceColor}20; color: ${relevanceColor}\">\n                        ${relevance}\n                      </span>\n                    `\n                        : ''\n                    }\n                  </div>\n                </div>\n                ${module.description ? `<p class=\"module-description\">${module.description}</p>` : ''}\n              </div>\n              <div class=\"module-status\">\n                ${this._getModuleStatusBadge(module)}\n              </div>\n            </div>\n          `;\n      })\n      .join('');\n  }\n\n  /**\n   * Get module status badge\n   */\n  _getModuleStatusBadge(module) {\n    if (module.completed) {\n      return '<span class=\"badge badge-success\">✓ Completed</span>';\n    }\n    if (module.inProgress) {\n      return '<span class=\"badge badge-warning\">In Progress</span>';\n    }\n    return '<span class=\"badge badge-default\">Not Started</span>';\n  }\n\n  /**\n   * Render quiz history table\n   */\n  _renderQuizHistory(quizHistory, quizzes) {\n    if (quizHistory.length === 0) {\n      const emptyState = EmptyState.noQuizHistory();\n      return `\n        <section class=\"quiz-history-section\">\n          <h2 class=\"section-title\">Quiz History</h2>\n          ${emptyState.outerHTML}\n        </section>\n      `;\n    }\n\n    const historyRows = quizHistory\n      .map(attempt => {\n        const quiz = quizzes.find(q => q.id === attempt.quizId);\n        const quizTitle = quiz ? quiz.title : 'Unknown Quiz';\n\n        return `\n          <tr>\n            <td>${quizTitle}</td>\n            <td>\n              <span class=\"score-badge ${attempt.passed ? 'score-pass' : 'score-fail'}\">\n                ${attempt.score}%\n              </span>\n            </td>\n            <td>${attempt.correctAnswers}/${attempt.totalQuestions}</td>\n            <td>${formatDate(attempt.date)}</td>\n            <td>\n              <span class=\"badge ${attempt.passed ? 'badge-success' : 'badge-error'}\">\n                ${attempt.passed ? 'Passed' : 'Failed'}\n              </span>\n            </td>\n          </tr>\n        `;\n      })\n      .join('');\n\n    return `\n      <section class=\"quiz-history-section\">\n        <h2 class=\"section-title\">Quiz History</h2>\n        <div class=\"table-container\">\n          <table class=\"quiz-history-table\">\n            <thead>\n              <tr>\n                <th>Quiz</th>\n                <th>Score</th>\n                <th>Correct</th>\n                <th>Date</th>\n                <th>Status</th>\n              </tr>\n            </thead>\n            <tbody>\n              ${historyRows}\n            </tbody>\n          </table>\n        </div>\n      </section>\n    `;\n  }\n\n  /**\n   * Render export section\n   */\n  _renderExportSection() {\n    return `\n      <section class=\"export-section\">\n        <div class=\"export-card\">\n          <div class=\"export-content\">\n            <h3 class=\"export-title\">Export Your Progress</h3>\n            <p class=\"export-description\">\n              Download your learning progress as a JSON file for backup or analysis.\n            </p>\n          </div>\n          <button class=\"btn-primary\" data-action=\"export-progress\">\n            <span>📥</span>\n            Export Progress\n          </button>\n        </div>\n      </section>\n    `;\n  }\n\n  /**\n   * Render error state\n   */\n  _renderError() {\n    return `\n      <div class=\"error-state\">\n        <h2>Unable to load progress</h2>\n        <p>Please try refreshing the page.</p>\n        <button class=\"btn-primary\" onclick=\"window.location.reload()\">Refresh</button>\n      </div>\n    `;\n  }\n\n  /**\n   * Attach event listeners\n   */\n  _attachEventListeners(container) {\n    // Status tabs\n    const tabs = container.querySelectorAll('.status-tab');\n    tabs.forEach(tab => {\n      tab.addEventListener('click', () => {\n        const tabName = tab.dataset.tab;\n        this._switchTab(tabName, container);\n      });\n    });\n\n    // Category tabs\n    const categoryTabs = container.querySelectorAll('.category-tab');\n    categoryTabs.forEach(tab => {\n      tab.addEventListener('click', () => {\n        const categoryName = tab.dataset.category;\n        this._switchCategoryTab(categoryName, container);\n      });\n    });\n\n    // Export progress button\n    const exportBtn = container.querySelector(\n      '[data-action=\"export-progress\"]'\n    );\n    if (exportBtn) {\n      exportBtn.addEventListener('click', async () => {\n        try {\n          LoadingSpinner.setButtonLoading(exportBtn, true);\n\n          // Add small delay to show loading state\n          await new Promise(resolve => setTimeout(resolve, 300));\n\n          await this.progressService.exportProgress();\n\n          LoadingSpinner.setButtonLoading(exportBtn, false);\n          toastNotification.success('Progress exported successfully!');\n        } catch (error) {\n          console.error('Error exporting progress:', error);\n          LoadingSpinner.setButtonLoading(exportBtn, false);\n          toastNotification.error(\n            'Failed to export progress. Please try again.'\n          );\n        }\n      });\n    }\n  }\n\n  /**\n   * Switch status tab\n   */\n  _switchTab(tabName, container) {\n    // Update active tab\n    const tabs = container.querySelectorAll('.status-tab');\n    tabs.forEach(tab => {\n      if (tab.dataset.tab === tabName) {\n        tab.classList.add('active');\n      } else {\n        tab.classList.remove('active');\n      }\n    });\n\n    // Show corresponding content\n    const contents = container.querySelectorAll('[data-tab-content]');\n    contents.forEach(content => {\n      if (content.dataset.tabContent === tabName) {\n        content.classList.remove('hidden');\n      } else {\n        content.classList.add('hidden');\n      }\n    });\n\n    // Hide category content when switching status tabs\n    const categoryContents = container.querySelectorAll(\n      '[data-category-content]'\n    );\n    categoryContents.forEach(content => {\n      content.classList.add('hidden');\n    });\n  }\n\n  /**\n   * Switch category tab\n   */\n  _switchCategoryTab(categoryName, container) {\n    // Update active category tab\n    const categoryTabs = container.querySelectorAll('.category-tab');\n    categoryTabs.forEach(tab => {\n      if (tab.dataset.category === categoryName) {\n        tab.classList.add('active');\n      } else {\n        tab.classList.remove('active');\n      }\n    });\n\n    if (categoryName === 'all') {\n      // Show status-based content\n      const activeStatusTab = container.querySelector('.status-tab.active');\n      if (activeStatusTab) {\n        this._switchTab(activeStatusTab.dataset.tab, container);\n      }\n    } else {\n      // Hide status-based content\n      const statusContents = container.querySelectorAll('[data-tab-content]');\n      statusContents.forEach(content => {\n        content.classList.add('hidden');\n      });\n\n      // Show category-specific content\n      const categoryContents = container.querySelectorAll(\n        '[data-category-content]'\n      );\n      categoryContents.forEach(content => {\n        if (content.dataset.categoryContent === categoryName) {\n          content.classList.remove('hidden');\n        } else {\n          content.classList.add('hidden');\n        }\n      });\n    }\n  }\n\n  /**\n   * Show notification\n   */\n  _showNotification(message, type = 'success') {\n    const notification = document.createElement('div');\n    notification.className = `notification notification-${type}`;\n    notification.textContent = message;\n    document.body.appendChild(notification);\n\n    setTimeout(() => {\n      notification.classList.add('show');\n    }, 10);\n\n    setTimeout(() => {\n      notification.classList.remove('show');\n      setTimeout(() => notification.remove(), 300);\n    }, 3000);\n  }\n\n  /**\n   * Cleanup\n   */\n  cleanup() {\n    // Cleanup if needed\n  }\n}\n\nexport default ProgressView;\n","/**\n * WheelModuleValidator - Validates modules for the Wheel of Fortune\n * Ensures modules have required properties and filters out invalid ones\n */\n\nclass WheelModuleValidator {\n  /**\n   * Validate a single module object\n   * @param {Object} module - Module to validate\n   * @returns {boolean} - True if module is valid\n   */\n  validateModule(module) {\n    // Check if module exists and is an object\n    if (!module || typeof module !== 'object') {\n      return false;\n    }\n\n    // Check required properties\n    if (\n      !module.id ||\n      typeof module.id !== 'string' ||\n      module.id.trim() === ''\n    ) {\n      return false;\n    }\n\n    if (\n      !module.title ||\n      typeof module.title !== 'string' ||\n      module.title.trim() === ''\n    ) {\n      return false;\n    }\n\n    if (\n      !module.category ||\n      typeof module.category !== 'string' ||\n      module.category.trim() === ''\n    ) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Filter array of modules to only include valid ones\n   * @param {Array} modules - Array of modules to filter\n   * @returns {Array} - Array of valid modules\n   */\n  filterValidModules(modules) {\n    if (!Array.isArray(modules)) {\n      console.warn(\n        'WheelModuleValidator: modules is not an array, returning empty array'\n      );\n      return [];\n    }\n\n    const validModules = modules.filter(module => {\n      const isValid = this.validateModule(module);\n      if (!isValid) {\n        console.warn(\n          'WheelModuleValidator: Invalid module filtered out:',\n          module\n        );\n      }\n      return isValid;\n    });\n\n    console.warn(\n      `WheelModuleValidator: Filtered ${modules.length} modules to ${validModules.length} valid modules`\n    );\n    return validModules;\n  }\n\n  /**\n   * Get fallback modules with guaranteed valid structure\n   * @returns {Array} - Array of valid fallback modules\n   */\n  getFallbackModules() {\n    const fallbacks = [\n      {\n        id: 'intro-basics',\n        title: 'Introduction to Basics',\n        category: 'fundamentals',\n      },\n      {\n        id: 'getting-started',\n        title: 'Getting Started',\n        category: 'basics',\n      },\n      {\n        id: 'bp-03-tdd',\n        title: 'Test-Driven Development (TDD)',\n        category: 'BP-03',\n      },\n      {\n        id: 'bp-04-scrum',\n        title: 'Scrum',\n        category: 'BP-04',\n      },\n      {\n        id: 'bp-05-sorting',\n        title: 'Sortierverfahren',\n        category: 'BP-05',\n      },\n    ];\n\n    // Validate fallback modules to ensure they're correct\n    const validFallbacks = this.filterValidModules(fallbacks);\n\n    if (validFallbacks.length === 0) {\n      console.error(\n        'WheelModuleValidator: All fallback modules are invalid! This should never happen.'\n      );\n      // Return minimal valid module as last resort\n      return [\n        {\n          id: 'emergency-fallback',\n          title: 'Learning Module',\n          category: 'general',\n        },\n      ];\n    }\n\n    return validFallbacks;\n  }\n\n  /**\n   * Log validation failure details for debugging\n   * @param {Object} module - Module that failed validation\n   * @param {string} reason - Reason for validation failure\n   */\n  logValidationFailure(module, reason) {\n    console.warn('WheelModuleValidator: Validation failed', {\n      module: module,\n      reason: reason,\n      timestamp: new Date().toISOString(),\n    });\n  }\n\n  /**\n   * Validate and log detailed information about a module\n   * @param {Object} module - Module to validate with detailed logging\n   * @returns {boolean} - True if module is valid\n   */\n  validateModuleWithLogging(module) {\n    if (!module || typeof module !== 'object') {\n      this.logValidationFailure(\n        module,\n        'Module is null, undefined, or not an object'\n      );\n      return false;\n    }\n\n    if (\n      !module.id ||\n      typeof module.id !== 'string' ||\n      module.id.trim() === ''\n    ) {\n      this.logValidationFailure(\n        module,\n        'Module id is missing, not a string, or empty'\n      );\n      return false;\n    }\n\n    if (\n      !module.title ||\n      typeof module.title !== 'string' ||\n      module.title.trim() === ''\n    ) {\n      this.logValidationFailure(\n        module,\n        'Module title is missing, not a string, or empty'\n      );\n      return false;\n    }\n\n    if (\n      !module.category ||\n      typeof module.category !== 'string' ||\n      module.category.trim() === ''\n    ) {\n      this.logValidationFailure(\n        module,\n        'Module category is missing, not a string, or empty'\n      );\n      return false;\n    }\n\n    return true;\n  }\n}\n\nexport default WheelModuleValidator;\n","/**\n * WheelView - Random module selector with spinning animation\n * Provides a gamified way to discover learning modules\n */\n\nimport accessibilityHelper from '../utils/AccessibilityHelper.js';\nimport LoadingSpinner from './LoadingSpinner.js';\nimport EmptyState from './EmptyState.js';\nimport toastNotification from './ToastNotification.js';\nimport WheelModuleValidator from '../utils/WheelModuleValidator.js';\n\nclass WheelView {\n  constructor(services) {\n    this.services = services;\n    this.ihkContentService = services.ihkContentService;\n    this.stateManager = services.stateManager;\n    this.router = services.router;\n    this.modules = [];\n    this.selectedModule = null;\n    this.isSpinning = false;\n    this.validator = new WheelModuleValidator();\n  }\n\n  /**\n   * Render the wheel view\n   */\n  async render() {\n    const container = document.createElement('div');\n    container.className = 'wheel-view';\n    container.innerHTML = LoadingSpinner.render('Loading modules...');\n\n    // Load modules asynchronously\n    setTimeout(async () => {\n      try {\n        await this.loadModules();\n\n        // Check if we have enough valid modules\n        if (this.modules.length === 0) {\n          container.innerHTML = '';\n          container.appendChild(this.showNoModulesMessage());\n          return;\n        }\n\n        if (this.modules.length < 2) {\n          container.innerHTML = '';\n          container.appendChild(this.renderInsufficientModules());\n          return;\n        }\n\n        container.innerHTML = '';\n        container.appendChild(this.renderContent());\n\n        // Load last selected module from state\n        this.loadLastSelection();\n\n        accessibilityHelper.announce('Wheel of Fortune loaded');\n      } catch (error) {\n        console.error('WheelView: Critical error during render:', error);\n        this.logCriticalError('render', error);\n\n        const errorState = EmptyState.create({\n          icon: '⚠️',\n          title: 'Fehler beim Laden des Glücksrads',\n          message:\n            'Die Module konnten nicht geladen werden. Bitte versuchen Sie es erneut.',\n          action: {\n            label: 'Erneut versuchen',\n            onClick: () => {\n              // Force reload with fresh state\n              this.modules = [];\n              this.selectedModule = null;\n              this.render()\n                .then(newContainer => {\n                  const currentContainer =\n                    document.querySelector('.wheel-view');\n                  if (currentContainer && currentContainer.parentNode) {\n                    currentContainer.parentNode.replaceChild(\n                      newContainer,\n                      currentContainer\n                    );\n                  }\n                })\n                .catch(retryError => {\n                  console.error('WheelView: Retry also failed:', retryError);\n                  toastNotification.error('Wiederholung fehlgeschlagen');\n                });\n            },\n          },\n        });\n        container.innerHTML = '';\n        container.appendChild(errorState);\n        toastNotification.error('Glücksrad konnte nicht geladen werden');\n      }\n    }, 0);\n\n    return container;\n  }\n\n  /**\n   * Load modules from IHKContentService with comprehensive error handling\n   */\n  async loadModules() {\n    let rawModules = [];\n    let loadingSource = 'unknown';\n\n    try {\n      console.warn('WheelView: Starting module loading...');\n\n      // Attempt to load modules from IHKContentService\n      try {\n        const result = await this.ihkContentService.searchContent('', {});\n\n        if (Array.isArray(result) && result.length > 0) {\n          rawModules = result;\n          loadingSource = 'IHKContentService';\n          console.warn(\n            `WheelView: Successfully loaded ${result.length} modules from IHKContentService`\n          );\n        } else {\n          console.warn(\n            'WheelView: IHKContentService returned empty or invalid result:',\n            result\n          );\n          throw new Error('IHKContentService returned no valid modules');\n        }\n      } catch (serviceError) {\n        console.error('WheelView: IHKContentService failed:', serviceError);\n\n        // Fallback to validator's fallback modules\n        console.warn(\n          'WheelView: Using fallback modules due to service failure'\n        );\n        rawModules = this.validator.getFallbackModules();\n        loadingSource = 'fallback';\n      }\n\n      // Validate and filter modules\n      try {\n        console.warn(\n          `WheelView: Validating ${rawModules.length} raw modules...`\n        );\n        this.modules = this.validator.filterValidModules(rawModules);\n\n        if (this.modules.length === 0) {\n          console.error(\n            'WheelView: All modules failed validation, using emergency fallback'\n          );\n          this.modules = this.validator.getFallbackModules();\n          loadingSource = 'emergency-fallback';\n        }\n\n        console.warn(\n          `WheelView: Successfully validated ${this.modules.length} modules from ${loadingSource}`\n        );\n      } catch (validationError) {\n        console.error('WheelView: Module validation failed:', validationError);\n\n        // Last resort - use emergency fallback\n        try {\n          this.modules = this.validator.getFallbackModules();\n          loadingSource = 'emergency-fallback';\n          console.warn('WheelView: Using emergency fallback modules');\n        } catch (fallbackError) {\n          console.error(\n            'WheelView: Even fallback modules failed:',\n            fallbackError\n          );\n          // Create minimal valid module as absolute last resort\n          this.modules = [\n            {\n              id: 'emergency-module',\n              title: 'Learning Module',\n              category: 'general',\n            },\n          ];\n          loadingSource = 'absolute-emergency';\n        }\n      }\n    } catch (criticalError) {\n      console.error(\n        'WheelView: Critical error during module loading:',\n        criticalError\n      );\n\n      // Absolute last resort - create a single valid module\n      this.modules = [\n        {\n          id: 'critical-error-fallback',\n          title: 'Learning Module',\n          category: 'general',\n        },\n      ];\n      loadingSource = 'critical-error-fallback';\n\n      // Log the critical error for debugging\n      this.logCriticalError('loadModules', criticalError);\n    }\n\n    // Final validation and logging\n    const finalValidation = this.modules.every(module =>\n      this.validator.validateModule(module)\n    );\n    if (!finalValidation) {\n      console.error(\n        'WheelView: Final validation failed - some modules are still invalid'\n      );\n      this.modules = this.validator.getFallbackModules();\n      loadingSource = 'final-validation-fallback';\n    }\n\n    console.warn(\n      `WheelView: Module loading complete - ${this.modules.length} valid modules from ${loadingSource}`\n    );\n  }\n\n  /**\n   * Show message when no modules are available\n   */\n  showNoModulesMessage() {\n    return EmptyState.create({\n      icon: '🎯',\n      title: 'Keine Module verfügbar',\n      message:\n        'Es sind derzeit keine gültigen Module zum Lernen verfügbar. Bitte versuchen Sie es später erneut.',\n      action: {\n        label: 'Erneut laden',\n        onClick: () => {\n          // Reload the entire wheel view\n          this.render().then(newContainer => {\n            const currentContainer = document.querySelector('.wheel-view');\n            if (currentContainer && currentContainer.parentNode) {\n              currentContainer.parentNode.replaceChild(\n                newContainer,\n                currentContainer\n              );\n            }\n          });\n        },\n      },\n    });\n  }\n\n  /**\n   * Load last selected module from state with validation\n   */\n  loadLastSelection() {\n    try {\n      const lastModule = this.stateManager.getState('lastWheelModule');\n\n      if (lastModule && this.validator.validateModule(lastModule)) {\n        this.selectedModule = lastModule;\n        this.updateDisplay();\n        console.warn(\n          'WheelView: Restored last wheel selection:',\n          lastModule.title\n        );\n      } else if (lastModule) {\n        console.warn(\n          'WheelView: Last saved module is invalid, ignoring:',\n          lastModule\n        );\n        // Clear invalid saved state\n        try {\n          this.stateManager.setState('lastWheelModule', null);\n        } catch (clearError) {\n          console.error(\n            'WheelView: Failed to clear invalid saved state:',\n            clearError\n          );\n        }\n      }\n    } catch (error) {\n      console.error('WheelView: Error loading last selection:', error);\n      this.logCriticalError('loadLastSelection', error);\n    }\n  }\n\n  /**\n   * Render insufficient modules state\n   */\n  renderInsufficientModules() {\n    return EmptyState.create({\n      icon: '🎯',\n      title: 'Nicht genügend Module verfügbar',\n      message:\n        'Mindestens 2 Module werden benötigt, um das Glücksrad zu nutzen.',\n    });\n  }\n\n  /**\n   * Render main content\n   */\n  renderContent() {\n    const content = document.createElement('div');\n    content.className = 'wheel-content';\n\n    // Header\n    const header = this.renderHeader();\n    content.appendChild(header);\n\n    // Wheel container\n    const wheelContainer = this.renderWheelContainer();\n    content.appendChild(wheelContainer);\n\n    // Controls\n    const controls = this.renderControls();\n    content.appendChild(controls);\n\n    // Selected module display\n    const selectedDisplay = this.renderSelectedDisplay();\n    content.appendChild(selectedDisplay);\n\n    return content;\n  }\n\n  /**\n   * Render header\n   */\n  renderHeader() {\n    const header = document.createElement('div');\n    header.className = 'page-header';\n    header.innerHTML = `\n      <h1>🎯 Lern-Modul</h1>\n      <p class=\"subtitle\">Lass das Glücksrad entscheiden, welches Modul du als nächstes lernst!</p>\n    `;\n    return header;\n  }\n\n  /**\n   * Render wheel container with animation\n   */\n  renderWheelContainer() {\n    const container = document.createElement('div');\n    container.className = 'wheel-container';\n    container.setAttribute('role', 'region');\n    container.setAttribute('aria-label', 'Module selection wheel');\n\n    // Create SVG wheel\n    const wheelSVG = this.createWheelSVG();\n\n    container.innerHTML = `\n      <div class=\"wheel-display\">\n        <div class=\"wheel-svg-container\" id=\"wheel-svg-container\">\n          ${wheelSVG}\n          <div class=\"wheel-pointer\">▼</div>\n          <button class=\"wheel-spin-overlay\" id=\"wheel-spin-overlay\" aria-label=\"Click wheel to spin\">\n            <span class=\"spin-icon\">🎲</span>\n            <span class=\"spin-text\">DREHEN</span>\n          </button>\n        </div>\n        <div class=\"wheel-result-display\" id=\"wheel-result-display\">\n          <div class=\"wheel-result-text\">Klicke auf das Rad zum Drehen</div>\n        </div>\n      </div>\n    `;\n\n    // Make wheel clickable\n    setTimeout(() => {\n      const wheelContainer = container.querySelector('#wheel-svg-container');\n      const spinOverlay = container.querySelector('#wheel-spin-overlay');\n\n      if (wheelContainer) {\n        wheelContainer.style.cursor = 'pointer';\n        wheelContainer.addEventListener('click', () => this.spin());\n      }\n\n      if (spinOverlay) {\n        spinOverlay.addEventListener('click', e => {\n          e.stopPropagation();\n          this.spin();\n        });\n      }\n    }, 0);\n\n    return container;\n  }\n\n  /**\n   * Create SVG wheel with module segments\n   */\n  createWheelSVG() {\n    if (!this.modules || this.modules.length === 0) {\n      return '<div class=\"wheel-placeholder\">Loading...</div>';\n    }\n\n    // Additional validation - filter modules again before rendering\n    const validModules = this.validator.filterValidModules(this.modules);\n\n    if (validModules.length === 0) {\n      console.error('WheelView: No valid modules to render in wheel');\n      return '<div class=\"wheel-placeholder\">No valid modules available</div>';\n    }\n\n    // Use validated modules for rendering\n    const modulesToRender = validModules;\n\n    const colors = [\n      '#3b82f6',\n      '#8b5cf6',\n      '#ec4899',\n      '#f59e0b',\n      '#10b981',\n      '#06b6d4',\n      '#6366f1',\n      '#f97316',\n    ];\n\n    const segmentAngle = 360 / modulesToRender.length;\n    const radius = 380; // Increased for longer text\n    const centerX = 400; // Increased\n    const centerY = 400; // Increased\n\n    let segments = '';\n\n    modulesToRender.forEach((module, index) => {\n      // Modules are already validated, but add extra safety check\n      if (!this.validator.validateModule(module)) {\n        console.warn(\n          'WheelView: Invalid module found during rendering, skipping:',\n          module\n        );\n        return;\n      }\n\n      const startAngle = index * segmentAngle - 90;\n      const endAngle = (index + 1) * segmentAngle - 90;\n      const color = colors[index % colors.length];\n\n      // Calculate path for segment\n      const startRad = (startAngle * Math.PI) / 180;\n      const endRad = (endAngle * Math.PI) / 180;\n\n      const x1 = centerX + radius * Math.cos(startRad);\n      const y1 = centerY + radius * Math.sin(startRad);\n      const x2 = centerX + radius * Math.cos(endRad);\n      const y2 = centerY + radius * Math.sin(endRad);\n\n      const largeArc = segmentAngle > 180 ? 1 : 0;\n\n      const pathData = `\n        M ${centerX} ${centerY}\n        L ${x1} ${y1}\n        A ${radius} ${radius} 0 ${largeArc} 1 ${x2} ${y2}\n        Z\n      `;\n\n      // Calculate text position (middle of segment)\n      const midAngle = (startAngle + endAngle) / 2;\n      const midRad = (midAngle * Math.PI) / 180;\n      const textRadius = radius * 0.7;\n      const textX = centerX + textRadius * Math.cos(midRad);\n      const textY = centerY + textRadius * Math.sin(midRad);\n\n      // Truncate long titles - keep it short for readability\n      const title =\n        module.title.length > 25\n          ? module.title.substring(0, 23) + '...'\n          : module.title;\n\n      segments += `\n        <path \n          d=\"${pathData}\" \n          fill=\"${color}\" \n          stroke=\"#fff\" \n          stroke-width=\"4\"\n          class=\"wheel-segment\"\n        />\n        <text \n          x=\"${textX}\" \n          y=\"${textY}\" \n          text-anchor=\"middle\" \n          dominant-baseline=\"middle\"\n          fill=\"#fff\" \n          font-size=\"20\" \n          font-weight=\"bold\"\n          class=\"wheel-text\"\n          transform=\"rotate(${midAngle}, ${textX}, ${textY})\"\n        >\n          ${title}\n        </text>\n      `;\n    });\n\n    return `\n      <svg \n        id=\"wheel-svg\" \n        width=\"800\" \n        height=\"800\" \n        viewBox=\"0 0 800 800\"\n        class=\"wheel-svg\"\n      >\n        <g id=\"wheel-group\">\n          ${segments}\n          <!-- Center circle -->\n          <circle \n            cx=\"${centerX}\" \n            cy=\"${centerY}\" \n            r=\"50\" \n            fill=\"#1f2937\" \n            stroke=\"#fff\" \n            stroke-width=\"5\"\n          />\n          <text \n            x=\"${centerX}\" \n            y=\"${centerY}\" \n            text-anchor=\"middle\" \n            dominant-baseline=\"middle\"\n            fill=\"#fff\" \n            font-size=\"60\"\n          >\n            🎯\n          </text>\n        </g>\n      </svg>\n    `;\n  }\n\n  /**\n   * Render control buttons\n   */\n  renderControls() {\n    const controls = document.createElement('div');\n    controls.className = 'wheel-controls';\n\n    controls.innerHTML = `\n      <button \n        class=\"btn btn-secondary btn-again\" \n        id=\"btn-again\"\n        aria-label=\"Spin again\"\n        style=\"display: none;\"\n      >\n        🔄 Nochmal drehen\n      </button>\n      <button \n        class=\"btn btn-primary btn-goto\" \n        id=\"btn-goto\"\n        aria-label=\"Go to selected module\"\n        style=\"display: none;\"\n      >\n        ➡️ Zum Modul\n      </button>\n    `;\n\n    // Attach event listeners\n    setTimeout(() => {\n      const againBtn = controls.querySelector('#btn-again');\n      const gotoBtn = controls.querySelector('#btn-goto');\n\n      if (againBtn) {\n        againBtn.addEventListener('click', () => this.spin());\n      }\n\n      if (gotoBtn) {\n        gotoBtn.addEventListener('click', () => this.navigateToModule());\n      }\n    }, 0);\n\n    return controls;\n  }\n\n  /**\n   * Render selected module display\n   */\n  renderSelectedDisplay() {\n    const display = document.createElement('div');\n    display.className = 'selected-module-display';\n    display.id = 'selected-module-display';\n    display.setAttribute('role', 'status');\n    display.setAttribute('aria-live', 'polite');\n    display.setAttribute('aria-atomic', 'true');\n\n    display.innerHTML = `\n      <p class=\"selected-label\">Ausgewähltes Modul:</p>\n      <div class=\"selected-module-container\" id=\"selected-module-container\">\n        <p class=\"selected-module\" id=\"selected-module-text\">Noch kein Modul ausgewählt</p>\n        <p class=\"click-hint\" id=\"click-hint\" style=\"display: none;\">👆 Klicken zum Öffnen</p>\n      </div>\n    `;\n\n    return display;\n  }\n\n  /**\n   * Spin the wheel and select a random module\n   */\n  async spin() {\n    if (this.isSpinning) return;\n\n    // Validate modules before spinning\n    const validModules = this.validator.filterValidModules(this.modules);\n\n    if (validModules.length === 0) {\n      console.error('WheelView: No valid modules available for spinning');\n      toastNotification.error('Keine gültigen Module zum Drehen verfügbar');\n      return;\n    }\n\n    this.isSpinning = true;\n\n    // Hide buttons and overlay during spin\n    const spinOverlay = document.querySelector('#wheel-spin-overlay');\n    const againBtn = document.querySelector('#btn-again');\n    const gotoBtn = document.querySelector('#btn-goto');\n\n    if (spinOverlay) spinOverlay.style.display = 'none';\n    if (againBtn) againBtn.style.display = 'none';\n    if (gotoBtn) gotoBtn.style.display = 'none';\n\n    // Select random module from valid modules only\n    const selectedIndex = Math.floor(Math.random() * validModules.length);\n    this.selectedModule = validModules[selectedIndex];\n\n    // Validate the selected module\n    if (!this.validator.validateModule(this.selectedModule)) {\n      console.error(\n        'WheelView: Selected module is invalid:',\n        this.selectedModule\n      );\n      // Fallback to first valid module\n      this.selectedModule = validModules[0];\n    }\n\n    console.warn('🎯 Spinning wheel:');\n    console.warn('  Selected index:', selectedIndex);\n    console.warn('  Selected module:', this.selectedModule.title);\n\n    // Find the index of selected module in the original modules array for animation\n    const animationIndex = this.modules.findIndex(\n      m => m.id === this.selectedModule.id\n    );\n    const indexToUse = animationIndex >= 0 ? animationIndex : selectedIndex;\n\n    // Animate the selection\n    await this.animateSelection(indexToUse);\n\n    // Update display\n    this.updateDisplay();\n\n    // Save to state\n    this.saveSelection();\n\n    // Update buttons - show action buttons, keep overlay hidden\n    if (againBtn) againBtn.style.display = 'inline-block';\n    if (gotoBtn) gotoBtn.style.display = 'inline-block';\n\n    // Announce result\n    accessibilityHelper.announce(\n      `Selected module: ${this.selectedModule.title}`\n    );\n\n    this.isSpinning = false;\n\n    // Return focus to spin again button\n    if (againBtn) {\n      setTimeout(() => againBtn.focus(), 100);\n    }\n  }\n\n  /**\n   * Animate the module selection\n   * Spins the wheel with acceleration/deceleration\n   * Total animation time: ~3-4 seconds\n   */\n  async animateSelection(finalIndex) {\n    const wheelGroup = document.querySelector('#wheel-group');\n    const resultDisplay = document.querySelector(\n      '#wheel-result-display .wheel-result-text'\n    );\n\n    if (!wheelGroup) return;\n\n    // Calculate target rotation\n    // The pointer is at top (90 degrees), segments start at -90 degrees (bottom)\n    // We need to rotate so the selected segment's CENTER is at the top\n    const segmentAngle = 360 / this.modules.length;\n\n    // Calculate the angle to the CENTER of the target segment\n    // Segments start at -90°, so segment i starts at: -90 + (i * segmentAngle)\n    // And its center is at: -90 + (i * segmentAngle) + (segmentAngle / 2)\n    const targetSegmentCenter =\n      -90 + finalIndex * segmentAngle + segmentAngle / 2;\n\n    // We want this center to be at 90 degrees (top, where pointer is)\n    // So we need to rotate by: 90 - targetSegmentCenter\n    // Add 180° because the visual alignment is opposite\n    const targetAngle = 90 - targetSegmentCenter + 180;\n\n    // Spin 3-5 full rotations plus the target angle\n    // Use Math.floor to ensure we do COMPLETE rotations only\n    const fullRotations = Math.floor(3 + Math.random() * 3); // 3, 4, or 5 complete rotations\n    const totalRotation = fullRotations * 360 + targetAngle;\n\n    console.warn('🎲 Animation calculation:');\n    console.warn('  Segment angle:', segmentAngle);\n    console.warn('  Target segment center:', targetSegmentCenter);\n    console.warn('  Target angle:', targetAngle);\n    console.warn('  Total rotation:', totalRotation);\n    console.warn('  Final module:', this.selectedModule.title);\n\n    // Animation using CSS transition\n    wheelGroup.style.transition = 'none';\n    wheelGroup.style.transform = 'rotate(0deg)';\n\n    // Force reflow\n    wheelGroup.offsetHeight;\n\n    // Apply rotation with easing\n    wheelGroup.style.transition =\n      'transform 3.5s cubic-bezier(0.17, 0.67, 0.12, 0.99)';\n    wheelGroup.style.transform = `rotate(${totalRotation}deg)`;\n\n    // Update result display during spin\n    if (resultDisplay) {\n      resultDisplay.innerHTML =\n        '<div class=\"wheel-result-text\">Spinning...</div>';\n      resultDisplay.style.opacity = '0.5';\n    }\n\n    // Wait for animation to complete\n    await this.sleep(3500);\n\n    // Show result\n    if (resultDisplay) {\n      const winnerModule = this.modules[finalIndex];\n\n      // Verify which segment is actually at the pointer (top = 90°, but with 180° offset)\n      const finalRotation = totalRotation % 360;\n\n      // After rotation, where is segment 0's center?\n      // Originally at -84° (for first segment), after rotation it's at:\n      const segment0CenterAfterRotation =\n        (-90 + segmentAngle / 2 + finalRotation) % 360;\n\n      // Which segment center is now closest to 90° + 180° = 270° (pointer with offset)?\n      // We need to find which segment index i has its center at 270°\n      // Segment i center after rotation: (-90 + i * segmentAngle + segmentAngle/2 + finalRotation) % 360\n      // We want this to equal 270°, so:\n      // -90 + i * segmentAngle + segmentAngle/2 + finalRotation = 270 (mod 360)\n      // i * segmentAngle = 270 + 90 - segmentAngle/2 - finalRotation\n      // i = (360 - segmentAngle/2 - finalRotation) / segmentAngle\n\n      const segmentAtPointer =\n        Math.round((360 - segmentAngle / 2 - finalRotation) / segmentAngle) %\n        this.modules.length;\n      const actualSegmentAtPointer =\n        segmentAtPointer < 0\n          ? segmentAtPointer + this.modules.length\n          : segmentAtPointer;\n\n      console.warn('🏆 Winner verification:');\n      console.warn('  Final index (selected):', finalIndex);\n      console.warn('  Winner module:', winnerModule.title);\n      console.warn('  Total rotation:', totalRotation);\n      console.warn('  Final rotation (mod 360):', finalRotation);\n      console.warn(\n        '  Segment 0 center after rotation:',\n        segment0CenterAfterRotation\n      );\n      console.warn('  Calculated segment at pointer:', actualSegmentAtPointer);\n\n      resultDisplay.innerHTML = `\n        <span class=\"winner-text\">${winnerModule.title}</span>\n        <span class=\"winner-click-icon\">🎯</span>\n      `;\n      resultDisplay.style.opacity = '1';\n      resultDisplay.classList.add('wheel-result-highlight');\n\n      // Make the result display clickable\n      const resultContainer = resultDisplay.parentElement;\n      if (resultContainer) {\n        resultContainer.style.cursor = 'pointer';\n        resultContainer.classList.add('clickable-result');\n        resultContainer.setAttribute('role', 'button');\n        resultContainer.setAttribute('tabindex', '0');\n        resultContainer.setAttribute(\n          'aria-label',\n          `Open winning module: ${winnerModule.title}`\n        );\n\n        // Remove existing event listeners to avoid duplicates\n        const newResultContainer = resultContainer.cloneNode(true);\n        resultContainer.parentNode.replaceChild(\n          newResultContainer,\n          resultContainer\n        );\n\n        // Add click event listener to the new container\n        newResultContainer.addEventListener('click', () => {\n          this.navigateToModule();\n        });\n\n        // Add keyboard support\n        newResultContainer.addEventListener('keydown', e => {\n          if (e.key === 'Enter' || e.key === ' ') {\n            e.preventDefault();\n            this.navigateToModule();\n          }\n        });\n      }\n\n      // Remove highlight after animation\n      setTimeout(() => {\n        const currentResultDisplay = document.querySelector(\n          '.wheel-result-display .wheel-result-text'\n        );\n        if (currentResultDisplay) {\n          currentResultDisplay.classList.remove('wheel-result-highlight');\n        }\n      }, 1000);\n    }\n  }\n\n  /**\n   * Sleep helper for animation\n   */\n  sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Update the selected module display\n   */\n  updateDisplay() {\n    const selectedText = document.querySelector('#selected-module-text');\n    const selectedContainer = document.querySelector(\n      '#selected-module-container'\n    );\n    const clickHint = document.querySelector('#click-hint');\n\n    if (selectedText && this.selectedModule) {\n      selectedText.textContent = `${this.selectedModule.title} (${this.selectedModule.category || 'N/A'})`;\n\n      // Make the selected module clickable\n      if (selectedContainer) {\n        selectedContainer.style.cursor = 'pointer';\n        selectedContainer.classList.add('clickable-module');\n        selectedContainer.setAttribute('role', 'button');\n        selectedContainer.setAttribute('tabindex', '0');\n        selectedContainer.setAttribute(\n          'aria-label',\n          `Open module: ${this.selectedModule.title}`\n        );\n\n        // Show click hint\n        if (clickHint) {\n          clickHint.style.display = 'block';\n        }\n\n        // Remove existing event listeners to avoid duplicates\n        const newContainer = selectedContainer.cloneNode(true);\n        selectedContainer.parentNode.replaceChild(\n          newContainer,\n          selectedContainer\n        );\n\n        // Add click event listener\n        newContainer.addEventListener('click', () => {\n          this.navigateToModule();\n        });\n\n        // Add keyboard support\n        newContainer.addEventListener('keydown', e => {\n          if (e.key === 'Enter' || e.key === ' ') {\n            e.preventDefault();\n            this.navigateToModule();\n          }\n        });\n\n        // Add hover effect\n        newContainer.addEventListener('mouseenter', () => {\n          newContainer.classList.add('hover');\n        });\n\n        newContainer.addEventListener('mouseleave', () => {\n          newContainer.classList.remove('hover');\n        });\n      }\n    }\n  }\n\n  /**\n   * Save selection to state with error handling\n   */\n  saveSelection() {\n    try {\n      // Validate selected module before saving\n      if (!this.validator.validateModule(this.selectedModule)) {\n        console.warn(\n          'WheelView: Cannot save invalid selected module:',\n          this.selectedModule\n        );\n        return;\n      }\n\n      const stateData = {\n        id: this.selectedModule.id,\n        title: this.selectedModule.title,\n        category: this.selectedModule.category,\n        selectedAt: new Date().toISOString(),\n      };\n\n      this.stateManager.setState('lastWheelModule', stateData);\n      console.warn('WheelView: Successfully saved wheel selection to state');\n    } catch (error) {\n      console.error('WheelView: Failed to save wheel state:', error);\n      // Non-critical error, log but continue\n      this.logCriticalError('saveSelection', error);\n    }\n  }\n\n  /**\n   * Navigate to the selected module with error handling\n   */\n  navigateToModule() {\n    if (!this.selectedModule) {\n      toastNotification.warning('Bitte wähle zuerst ein Modul aus');\n      return;\n    }\n\n    // Validate selected module before navigation\n    if (!this.validator.validateModule(this.selectedModule)) {\n      console.error(\n        'WheelView: Cannot navigate to invalid module:',\n        this.selectedModule\n      );\n      toastNotification.error('Das ausgewählte Modul ist ungültig');\n      return;\n    }\n\n    try {\n      console.warn('WheelView: Navigating to module:', this.selectedModule.id);\n      window.location.hash = `#/modules/${this.selectedModule.id}`;\n    } catch (error) {\n      console.error('WheelView: Navigation failed:', error);\n      this.logCriticalError('navigateToModule', error);\n      toastNotification.error('Modul konnte nicht geöffnet werden');\n    }\n  }\n\n  /**\n   * Log critical errors for debugging\n   * @param {string} operation - The operation that failed\n   * @param {Error} error - The error that occurred\n   */\n  logCriticalError(operation, error) {\n    const errorInfo = {\n      operation: operation,\n      error: {\n        message: error.message,\n        stack: error.stack,\n        name: error.name,\n      },\n      timestamp: new Date().toISOString(),\n      modules: this.modules ? this.modules.length : 'undefined',\n      selectedModule: this.selectedModule ? this.selectedModule.id : 'none',\n    };\n\n    console.error('WheelView: Critical Error Log:', errorInfo);\n\n    // Could also send to error tracking service here\n    // errorTrackingService.logError(errorInfo);\n  }\n\n  /**\n   * Safe method to get module count with error handling\n   * @returns {number} - Number of valid modules\n   */\n  getValidModuleCount() {\n    try {\n      if (!Array.isArray(this.modules)) {\n        return 0;\n      }\n\n      const validModules = this.validator.filterValidModules(this.modules);\n      return validModules.length;\n    } catch (error) {\n      console.error('WheelView: Error getting module count:', error);\n      return 0;\n    }\n  }\n\n  /**\n   * Cleanup\n   */\n  cleanup() {\n    // Cleanup if needed\n  }\n}\n\nexport default WheelView;\n","/**\n * NotFoundView - 404 Page for invalid routes\n */\nclass NotFoundView {\n  constructor(services) {\n    this.services = services;\n  }\n\n  render() {\n    const container = document.createElement('div');\n    container.className = 'not-found-view';\n    container.innerHTML = `\n      <div class=\"not-found-content\">\n        <div class=\"not-found-icon\" aria-hidden=\"true\">🔍</div>\n        <h1 class=\"not-found-title\">Page Not Found</h1>\n        <p class=\"not-found-message\">\n          Oops! The page you're looking for doesn't exist or has been moved.\n        </p>\n        <div class=\"not-found-actions\">\n          <button class=\"btn btn-primary\" id=\"go-home-btn\">\n            Go to Home\n          </button>\n          <button class=\"btn btn-secondary\" id=\"go-back-btn\">\n            Go Back\n          </button>\n        </div>\n        <div class=\"not-found-suggestions\">\n          <h2>You might be interested in:</h2>\n          <ul class=\"suggestion-list\">\n            <li>\n              <a href=\"#/modules\" class=\"suggestion-link\">\n                📚 Browse Learning Modules\n              </a>\n            </li>\n            <li>\n              <a href=\"#/quizzes\" class=\"suggestion-link\">\n                📝 Take a Quiz\n              </a>\n            </li>\n            <li>\n              <a href=\"#/progress\" class=\"suggestion-link\">\n                📊 View Your Progress\n              </a>\n            </li>\n          </ul>\n        </div>\n      </div>\n    `;\n\n    // Add event listeners\n    setTimeout(() => {\n      const goHomeBtn = container.querySelector('#go-home-btn');\n      const goBackBtn = container.querySelector('#go-back-btn');\n\n      if (goHomeBtn) {\n        goHomeBtn.addEventListener('click', () => {\n          window.location.hash = '#/';\n        });\n      }\n\n      if (goBackBtn) {\n        goBackBtn.addEventListener('click', () => {\n          window.history.back();\n        });\n      }\n    }, 0);\n\n    return container;\n  }\n}\n\nexport default NotFoundView;\n","// Import removed - unused imports\n\n/**\n * SpecializationSelector Component\n *\n * Provides a modal dialog for initial specialization selection and\n * specialization switching functionality in navigation.\n *\n * Features:\n * - Modal dialog for first-time users\n * - Specialization switching for existing users\n * - Visual indicators and descriptions for each option\n * - Confirmation dialog for specialization changes\n */\nclass SpecializationSelector {\n  constructor(specializationService, onSelectionChange) {\n    this.specializationService = specializationService;\n    this.onSelectionChange = onSelectionChange || (() => {});\n    this.isModalOpen = false;\n    this.isFirstTime = false;\n    this.currentSpecialization = null;\n\n    // Bind methods\n    this.render = this.render.bind(this);\n    this.showSpecializationModal = this.showSpecializationModal.bind(this);\n    this.hideSpecializationModal = this.hideSpecializationModal.bind(this);\n    this.handleSpecializationChange =\n      this.handleSpecializationChange.bind(this);\n    this.handleModalClick = this.handleModalClick.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n\n    // Initialize\n    this.init();\n  }\n\n  /**\n   * Initialize the component\n   */\n  async init() {\n    try {\n      // Get current specialization\n      this.currentSpecialization =\n        this.specializationService.getCurrentSpecialization();\n\n      // Check if this is a first-time user (no specialization selected)\n      this.isFirstTime =\n        !this.specializationService.hasSelectedSpecialization();\n\n      // Do NOT auto-show the modal; users can open it manually via navigation\n      // Keep isFirstTime flag for optional UX hints, but suppress automatic popup\n    } catch (error) {\n      console.error('Error initializing SpecializationSelector:', error);\n    }\n  }\n\n  /**\n   * Check if user needs to select a specialization\n   * @returns {boolean} True if user needs to select specialization\n   */\n  needsSpecializationSelection() {\n    return !this.specializationService.hasSelectedSpecialization();\n  }\n\n  /**\n   * Render the specialization selector\n   */\n  render() {\n    const container = document.createElement('div');\n    container.className = 'specialization-selector';\n\n    // Render modal if open\n    if (this.isModalOpen) {\n      container.appendChild(this.renderModal());\n    }\n\n    return container;\n  }\n\n  /**\n   * Render the specialization selection modal\n   */\n  renderModal() {\n    const specializations =\n      this.specializationService.getAvailableSpecializations();\n\n    const modal = document.createElement('div');\n    modal.className = 'specialization-modal-overlay';\n    modal.setAttribute('role', 'dialog');\n    modal.setAttribute('aria-modal', 'true');\n    modal.setAttribute('aria-labelledby', 'specialization-modal-title');\n    modal.addEventListener('click', this.handleModalClick);\n\n    const modalContent = document.createElement('div');\n    modalContent.className = 'specialization-modal-content';\n\n    // Modal header\n    const header = document.createElement('div');\n    header.className = 'specialization-modal-header';\n\n    const title = document.createElement('h2');\n    title.id = 'specialization-modal-title';\n    title.className = 'specialization-modal-title';\n    title.textContent = this.isFirstTime\n      ? 'Wähle deine Fachrichtung'\n      : 'Fachrichtung wechseln';\n\n    const subtitle = document.createElement('p');\n    subtitle.className = 'specialization-modal-subtitle';\n    subtitle.textContent = this.isFirstTime\n      ? 'Wähle deine Spezialisierung, um relevante Lerninhalte zu erhalten.'\n      : 'Du kannst jederzeit zwischen den Fachrichtungen wechseln.';\n\n    header.appendChild(title);\n    header.appendChild(subtitle);\n\n    // Specialization options\n    const optionsContainer = document.createElement('div');\n    optionsContainer.className = 'specialization-options';\n\n    specializations.forEach(spec => {\n      const option = this.renderSpecializationOption(spec);\n      optionsContainer.appendChild(option);\n    });\n\n    // Modal footer (only for non-first-time users)\n    const footer = document.createElement('div');\n    footer.className = 'specialization-modal-footer';\n\n    if (!this.isFirstTime) {\n      const cancelButton = document.createElement('button');\n      cancelButton.className = 'btn btn-secondary';\n      cancelButton.textContent = 'Abbrechen';\n      cancelButton.addEventListener('click', this.hideSpecializationModal);\n      footer.appendChild(cancelButton);\n    }\n\n    // Close button (only for non-first-time users)\n    if (!this.isFirstTime) {\n      const closeButton = document.createElement('button');\n      closeButton.className = 'specialization-modal-close';\n      closeButton.innerHTML = '&times;';\n      closeButton.setAttribute('aria-label', 'Modal schließen');\n      closeButton.addEventListener('click', this.hideSpecializationModal);\n      header.appendChild(closeButton);\n    }\n\n    modalContent.appendChild(header);\n    modalContent.appendChild(optionsContainer);\n    modalContent.appendChild(footer);\n    modal.appendChild(modalContent);\n\n    // Add keyboard event listener\n    document.addEventListener('keydown', this.handleKeyDown);\n\n    return modal;\n  }\n\n  /**\n   * Render a single specialization option\n   */\n  renderSpecializationOption(specialization) {\n    const option = document.createElement('div');\n    option.className = `specialization-option ${\n      this.currentSpecialization === specialization.id ? 'selected' : ''\n    }`;\n    option.setAttribute('role', 'button');\n    option.setAttribute('tabindex', '0');\n    option.setAttribute(\n      'aria-label',\n      `${specialization.description} auswählen`\n    );\n\n    // Add click and keyboard event listeners\n    const selectSpecialization = () => {\n      this.handleSpecializationChange(specialization.id);\n    };\n\n    option.addEventListener('click', selectSpecialization);\n    option.addEventListener('keydown', e => {\n      if (e.key === 'Enter' || e.key === ' ') {\n        e.preventDefault();\n        selectSpecialization();\n      }\n    });\n\n    // Option content\n    const iconContainer = document.createElement('div');\n    iconContainer.className = 'specialization-icon';\n    iconContainer.style.color = specialization.color;\n    iconContainer.textContent = specialization.icon;\n\n    const contentContainer = document.createElement('div');\n    contentContainer.className = 'specialization-content';\n\n    const name = document.createElement('h3');\n    name.className = 'specialization-name';\n    name.textContent = specialization.name;\n\n    const fullName = document.createElement('p');\n    fullName.className = 'specialization-full-name';\n    fullName.textContent = specialization.description;\n\n    const description = document.createElement('p');\n    description.className = 'specialization-description';\n    description.textContent = specialization.description;\n\n    const examCode = document.createElement('span');\n    examCode.className = 'specialization-exam-code';\n    examCode.textContent = `Prüfung: ${specialization.examCode}`;\n\n    contentContainer.appendChild(name);\n    contentContainer.appendChild(fullName);\n    contentContainer.appendChild(description);\n    contentContainer.appendChild(examCode);\n\n    // Selection indicator\n    const indicator = document.createElement('div');\n    indicator.className = 'specialization-indicator';\n    if (this.currentSpecialization === specialization.id) {\n      indicator.innerHTML = '✓';\n    }\n\n    option.appendChild(iconContainer);\n    option.appendChild(contentContainer);\n    option.appendChild(indicator);\n\n    return option;\n  }\n\n  /**\n   * Show the specialization selection modal\n   */\n  showSpecializationModal(isFirstTime = false) {\n    this.isFirstTime = isFirstTime;\n    this.isModalOpen = true;\n\n    // Re-render if already in DOM\n    const existingModal = document.querySelector(\n      '.specialization-modal-overlay'\n    );\n    if (existingModal) {\n      existingModal.remove();\n    }\n\n    // Add modal to body\n    const modal = this.renderModal();\n    document.body.appendChild(modal);\n\n    // Focus first option for accessibility\n    setTimeout(() => {\n      const firstOption = modal.querySelector('.specialization-option');\n      if (firstOption) {\n        firstOption.focus();\n      }\n    }, 100);\n\n    // Prevent body scroll\n    document.body.style.overflow = 'hidden';\n  }\n\n  /**\n   * Hide the specialization selection modal\n   */\n  hideSpecializationModal() {\n    this.isModalOpen = false;\n\n    // Remove modal from DOM\n    const modal = document.querySelector('.specialization-modal-overlay');\n    if (modal) {\n      modal.remove();\n    }\n\n    // Remove keyboard event listener\n    document.removeEventListener('keydown', this.handleKeyDown);\n\n    // Restore body scroll\n    document.body.style.overflow = '';\n  }\n\n  /**\n   * Handle specialization selection\n   */\n  async handleSpecializationChange(specializationId) {\n    try {\n      if (!specializationId) {\n        throw new Error('Invalid specialization ID');\n      }\n\n      // Show confirmation dialog for existing users (unless first time)\n      if (\n        !this.isFirstTime &&\n        this.currentSpecialization &&\n        this.currentSpecialization !== specializationId\n      ) {\n        const confirmed = await this.showConfirmationDialog(specializationId);\n        if (!confirmed) {\n          return;\n        }\n      }\n\n      // Set the new specialization\n      await this.specializationService.setSpecialization(specializationId);\n      this.currentSpecialization = specializationId;\n\n      // Hide modal\n      this.hideSpecializationModal();\n\n      // Show success notification\n      this.showSuccessNotification(specializationId);\n\n      // Notify parent component\n      this.onSelectionChange(specializationId);\n\n      // Trigger app refresh to update content and three-tier category relevance\n      window.dispatchEvent(\n        new CustomEvent('specialization-changed', {\n          detail: {\n            specializationId,\n            updateCategories: true, // Signal that category relevance should be recalculated\n          },\n        })\n      );\n    } catch (error) {\n      console.error('Error changing specialization:', error);\n      this.showErrorNotification('Fehler beim Wechseln der Fachrichtung');\n    }\n  }\n\n  /**\n   * Show confirmation dialog for specialization change\n   */\n  async showConfirmationDialog(newSpecializationId) {\n    return new Promise(resolve => {\n      const specialization =\n        this.specializationService.getSpecializationConfig(newSpecializationId);\n      const currentSpecialization =\n        this.specializationService.getSpecializationConfig(\n          this.currentSpecialization\n        );\n\n      // Create custom confirmation dialog\n      const confirmDialog = this.createConfirmationDialog(\n        currentSpecialization,\n        specialization\n      );\n      document.body.appendChild(confirmDialog);\n\n      // Handle confirmation\n      const handleConfirm = () => {\n        cleanup();\n        resolve(true);\n      };\n\n      const handleCancel = () => {\n        cleanup();\n        resolve(false);\n      };\n\n      const cleanup = () => {\n        confirmDialog.remove();\n        document.removeEventListener('keydown', handleEscape);\n        document.body.style.overflow = '';\n      };\n\n      const handleEscape = e => {\n        if (e.key === 'Escape') {\n          handleCancel();\n        }\n      };\n\n      // Add event listeners\n      confirmDialog\n        .querySelector('.confirm-btn')\n        .addEventListener('click', handleConfirm);\n      confirmDialog\n        .querySelector('.cancel-btn')\n        .addEventListener('click', handleCancel);\n      confirmDialog\n        .querySelector('.confirmation-close')\n        .addEventListener('click', handleCancel);\n      document.addEventListener('keydown', handleEscape);\n\n      // Prevent body scroll\n      document.body.style.overflow = 'hidden';\n\n      // Focus the cancel button by default for safety\n      setTimeout(() => {\n        confirmDialog.querySelector('.cancel-btn').focus();\n      }, 100);\n    });\n  }\n\n  /**\n   * Create custom confirmation dialog\n   */\n  createConfirmationDialog(currentSpec, newSpec) {\n    const dialog = document.createElement('div');\n    dialog.className = 'confirmation-modal-overlay';\n    dialog.setAttribute('role', 'dialog');\n    dialog.setAttribute('aria-modal', 'true');\n    dialog.setAttribute('aria-labelledby', 'confirmation-title');\n\n    dialog.innerHTML = `\n      <div class=\"confirmation-modal-content\">\n        <div class=\"confirmation-modal-header\">\n          <h3 id=\"confirmation-title\" class=\"confirmation-title\">\n            Fachrichtung wechseln?\n          </h3>\n          <button class=\"confirmation-close\" aria-label=\"Dialog schließen\">&times;</button>\n        </div>\n        \n        <div class=\"confirmation-modal-body\">\n          <div class=\"specialization-change-preview\">\n            <div class=\"current-spec\">\n              <div class=\"spec-label\">Aktuell:</div>\n              <div class=\"spec-info\">\n                <span class=\"spec-icon\" style=\"color: ${currentSpec.color}\">${currentSpec.icon}</span>\n                <span class=\"spec-name\">${currentSpec.name}</span>\n              </div>\n            </div>\n            \n            <div class=\"change-arrow\">→</div>\n            \n            <div class=\"new-spec\">\n              <div class=\"spec-label\">Neu:</div>\n              <div class=\"spec-info\">\n                <span class=\"spec-icon\" style=\"color: ${newSpec.color}\">${newSpec.icon}</span>\n                <span class=\"spec-name\">${newSpec.name}</span>\n              </div>\n            </div>\n          </div>\n          \n          <div class=\"confirmation-message\">\n            <p><strong>Was passiert beim Wechsel?</strong></p>\n            <ul class=\"confirmation-details\">\n              <li>✅ Dein gesamter Lernfortschritt bleibt erhalten</li>\n              <li>✅ Allgemeine IT-Inhalte bleiben verfügbar</li>\n              <li>🔄 Die angezeigten Module werden an deine neue Fachrichtung angepasst</li>\n              <li>📊 Deine Fortschrittsstatistiken werden entsprechend aktualisiert</li>\n            </ul>\n          </div>\n        </div>\n        \n        <div class=\"confirmation-modal-footer\">\n          <button class=\"btn btn-secondary cancel-btn\">Abbrechen</button>\n          <button class=\"btn btn-primary confirm-btn\">Fachrichtung wechseln</button>\n        </div>\n      </div>\n    `;\n\n    return dialog;\n  }\n\n  /**\n   * Show success notification\n   */\n  showSuccessNotification(specializationId) {\n    const specialization =\n      this.specializationService.getSpecializationConfig(specializationId);\n\n    // Create enhanced success notification\n    const notification = document.createElement('div');\n    notification.className = 'specialization-success-notification';\n    notification.setAttribute('role', 'alert');\n    notification.setAttribute('aria-live', 'polite');\n\n    notification.innerHTML = `\n      <div class=\"success-notification-content\">\n        <div class=\"success-header\">\n          <span class=\"success-icon\">${specialization.icon}</span>\n          <div class=\"success-text\">\n            <h4 class=\"success-title\">Fachrichtung erfolgreich gewechselt!</h4>\n            <p class=\"success-subtitle\">Du lernst jetzt für ${specialization.name}</p>\n          </div>\n          <button class=\"success-close\" aria-label=\"Benachrichtigung schließen\">&times;</button>\n        </div>\n        \n        <div class=\"success-details\">\n          <div class=\"success-benefits\">\n            <div class=\"benefit-item\">\n              <span class=\"benefit-icon\">✅</span>\n              <span class=\"benefit-text\">Dein Fortschritt wurde vollständig übernommen</span>\n            </div>\n            <div class=\"benefit-item\">\n              <span class=\"benefit-icon\">📚</span>\n              <span class=\"benefit-text\">Inhalte wurden an deine Fachrichtung angepasst</span>\n            </div>\n            <div class=\"benefit-item\">\n              <span class=\"benefit-icon\">🎯</span>\n              <span class=\"benefit-text\">Relevante Module werden jetzt priorisiert</span>\n            </div>\n          </div>\n          \n          <div class=\"success-actions\">\n            <button class=\"btn btn-primary btn-sm explore-content\">\n              Inhalte erkunden\n            </button>\n          </div>\n        </div>\n      </div>\n    `;\n\n    // Position notification\n    notification.style.cssText = `\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      max-width: 400px;\n      background: white;\n      border: 1px solid #e5e7eb;\n      border-left: 4px solid ${specialization.color};\n      border-radius: 8px;\n      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);\n      z-index: 10000;\n      animation: slideInRight 0.3s ease-out;\n    `;\n\n    document.body.appendChild(notification);\n\n    // Add event listeners\n    const closeBtn = notification.querySelector('.success-close');\n    const exploreBtn = notification.querySelector('.explore-content');\n\n    const removeNotification = () => {\n      notification.style.animation = 'slideOutRight 0.3s ease-in';\n      setTimeout(() => {\n        if (notification.parentNode) {\n          notification.parentNode.removeChild(notification);\n        }\n      }, 300);\n    };\n\n    closeBtn.addEventListener('click', removeNotification);\n\n    exploreBtn.addEventListener('click', () => {\n      removeNotification();\n      // Navigate to modules page to explore new content\n      window.location.hash = '#/modules';\n    });\n\n    // Auto-remove after 8 seconds (longer for more detailed notification)\n    setTimeout(removeNotification, 8000);\n\n    // Add CSS animations if not already present\n    this._addNotificationStyles();\n  }\n\n  /**\n   * Add notification styles if not already present\n   * @private\n   */\n  _addNotificationStyles() {\n    if (document.querySelector('#specialization-notification-styles')) {\n      return;\n    }\n\n    const styles = document.createElement('style');\n    styles.id = 'specialization-notification-styles';\n    styles.textContent = `\n      @keyframes slideInRight {\n        from {\n          transform: translateX(100%);\n          opacity: 0;\n        }\n        to {\n          transform: translateX(0);\n          opacity: 1;\n        }\n      }\n      \n      @keyframes slideOutRight {\n        from {\n          transform: translateX(0);\n          opacity: 1;\n        }\n        to {\n          transform: translateX(100%);\n          opacity: 0;\n        }\n      }\n      \n      .specialization-success-notification {\n        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n      }\n      \n      .success-notification-content {\n        padding: 16px;\n      }\n      \n      .success-header {\n        display: flex;\n        align-items: flex-start;\n        gap: 12px;\n        margin-bottom: 12px;\n      }\n      \n      .success-icon {\n        font-size: 24px;\n        flex-shrink: 0;\n      }\n      \n      .success-text {\n        flex: 1;\n      }\n      \n      .success-title {\n        margin: 0 0 4px 0;\n        font-size: 16px;\n        font-weight: 600;\n        color: #111827;\n      }\n      \n      .success-subtitle {\n        margin: 0;\n        font-size: 14px;\n        color: #6b7280;\n      }\n      \n      .success-close {\n        background: none;\n        border: none;\n        font-size: 20px;\n        color: #9ca3af;\n        cursor: pointer;\n        padding: 0;\n        width: 24px;\n        height: 24px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        border-radius: 4px;\n        flex-shrink: 0;\n      }\n      \n      .success-close:hover {\n        background: #f3f4f6;\n        color: #374151;\n      }\n      \n      .success-details {\n        border-top: 1px solid #f3f4f6;\n        padding-top: 12px;\n      }\n      \n      .success-benefits {\n        margin-bottom: 12px;\n      }\n      \n      .benefit-item {\n        display: flex;\n        align-items: center;\n        gap: 8px;\n        margin-bottom: 6px;\n        font-size: 13px;\n        color: #374151;\n      }\n      \n      .benefit-item:last-child {\n        margin-bottom: 0;\n      }\n      \n      .benefit-icon {\n        font-size: 14px;\n        flex-shrink: 0;\n      }\n      \n      .success-actions {\n        display: flex;\n        justify-content: flex-end;\n      }\n      \n      .btn {\n        padding: 6px 12px;\n        border-radius: 6px;\n        font-size: 13px;\n        font-weight: 500;\n        border: none;\n        cursor: pointer;\n        transition: all 0.2s;\n      }\n      \n      .btn-primary {\n        background: #3b82f6;\n        color: white;\n      }\n      \n      .btn-primary:hover {\n        background: #2563eb;\n      }\n      \n      .btn-sm {\n        padding: 4px 8px;\n        font-size: 12px;\n      }\n      \n      @media (max-width: 480px) {\n        .specialization-success-notification {\n          left: 10px;\n          right: 10px;\n          max-width: none;\n        }\n      }\n    `;\n\n    document.head.appendChild(styles);\n  }\n\n  /**\n   * Show error notification\n   */\n  showErrorNotification(message) {\n    const toast = document.createElement('div');\n    toast.className = 'toast toast-error';\n    toast.innerHTML = `\n      <div class=\"toast-content\">\n        <span class=\"toast-icon\">⚠️</span>\n        <span class=\"toast-message\">${message}</span>\n      </div>\n    `;\n\n    document.body.appendChild(toast);\n\n    // Auto-remove after 5 seconds\n    setTimeout(() => {\n      if (toast.parentNode) {\n        toast.parentNode.removeChild(toast);\n      }\n    }, 5000);\n  }\n\n  /**\n   * Handle modal overlay clicks (close modal if clicking outside)\n   */\n  handleModalClick(event) {\n    if (event.target.classList.contains('specialization-modal-overlay')) {\n      // Only allow closing if not first time\n      if (!this.isFirstTime) {\n        this.hideSpecializationModal();\n      }\n    }\n  }\n\n  /**\n   * Handle keyboard events\n   */\n  handleKeyDown(event) {\n    if (event.key === 'Escape' && !this.isFirstTime) {\n      this.hideSpecializationModal();\n    }\n  }\n\n  /**\n   * Get current specialization\n   */\n  getCurrentSpecialization() {\n    return this.currentSpecialization;\n  }\n\n  /**\n   * Check if modal is currently open\n   */\n  isModalVisible() {\n    return this.isModalOpen;\n  }\n\n  /**\n   * Destroy the component and clean up\n   */\n  destroy() {\n    this.hideSpecializationModal();\n\n    // Remove any remaining event listeners\n    document.removeEventListener('keydown', this.handleKeyDown);\n  }\n}\n\nexport default SpecializationSelector;\n","/**\n * Application Bootstrap\n * Initializes all services, registers routes, and starts the application\n */\n\n// Import services\nimport CategoryMappingService from './services/CategoryMappingService.js';\nimport ExamProgressService from './services/ExamProgressService.js';\nimport IHKContentService from './services/IHKContentService.js';\nimport ModuleService from './services/ModuleService.js';\nimport ProgressService from './services/ProgressService.js';\nimport QuizService from './services/QuizService.js';\nimport Router from './services/Router.js';\nimport SpecializationService from './services/SpecializationService.js';\nimport StateManager from './services/StateManager.js';\nimport StorageService from './services/StorageService.js';\nimport ThemeManager from './services/ThemeManager.js';\n\n// Import utilities\nimport accessibilityHelper from './utils/AccessibilityHelper.js';\n\n// Import error handling and UI components\nimport ErrorBoundary from './components/ErrorBoundary.js';\nimport toastNotification from './components/ToastNotification.js';\n\n// Import views\nimport Navigation from './components/Navigation.js';\nimport HomeView from './components/HomeView.js';\nimport ModuleListView from './components/ModuleListView.js';\nimport ModuleDetailView from './components/ModuleDetailView.js';\nimport IHKQuizListView from './components/IHKQuizListView.js';\nimport IHKQuizView from './components/IHKQuizView.js';\nimport ProgressView from './components/ProgressView.js';\nimport WheelView from './components/WheelView.js';\nimport NotFoundView from './components/NotFoundView.js';\nimport SpecializationSelector from './components/SpecializationSelector.js';\n\n// Note: Using IHK quiz components for all quizzes (superior UI/UX)\n\n// Import sample data\nimport modulesData from './data/modules.json';\n\n/**\n * Main Application Class\n */\nclass App {\n  constructor() {\n    this.services = {};\n    this.navigation = null;\n  }\n\n  /**\n   * Initialize the application\n   */\n  async init() {\n    try {\n      // Initialize accessibility helper\n      accessibilityHelper.init();\n\n      // Set up global error handling\n      this.setupErrorHandling();\n\n      // Initialize core services\n      this.initializeServices();\n\n      // Load initial data\n      await this.loadInitialData();\n\n      // Initialize theme\n      this.initializeTheme();\n\n      // Initialize specialization selection (must be before navigation)\n      await this.initializeSpecializationSelection();\n\n      // Create navigation\n      this.createNavigation();\n\n      // Register routes\n      this.registerRoutes();\n\n      // Set up global event listeners\n      this.setupGlobalEventListeners();\n\n      // Start router\n      this.services.router.init();\n\n      // Announce app ready to screen readers\n      accessibilityHelper.announce('Application loaded successfully');\n    } catch (error) {\n      console.error('❌ Failed to initialize application:', error);\n      this.showFatalError(error);\n    }\n  }\n\n  /**\n   * Initialize all services\n   */\n  initializeServices() {\n    // Get app container\n    const appContainer = document.getElementById('app');\n    if (!appContainer) {\n      throw new Error('App container not found');\n    }\n\n    // Create main content container for views\n    const mainContent = document.createElement('main');\n    mainContent.id = 'main-content';\n    mainContent.className = 'main-content';\n    appContainer.appendChild(mainContent);\n\n    // Storage service\n    this.services.storageService = new StorageService();\n\n    // State manager\n    this.services.stateManager = new StateManager(this.services.storageService);\n\n    // Specialization service (initialize early for content filtering)\n    this.services.specializationService = new SpecializationService(\n      this.services.stateManager,\n      this.services.storageService\n    );\n\n    // Category mapping service (initialize after specialization service)\n    this.services.categoryMappingService = new CategoryMappingService(\n      this.services.specializationService\n    );\n\n    // Theme manager\n    this.services.themeManager = new ThemeManager(this.services.storageService);\n\n    // Router (pass main content container)\n    this.services.router = new Router(mainContent);\n\n    // Connect specialization service to router for context-aware routing\n    this.services.router.setSpecializationService(\n      this.services.specializationService\n    );\n\n    // IHK Content service (initialize before ModuleService with specialization and category mapping support)\n    this.services.ihkContentService = new IHKContentService(\n      this.services.stateManager,\n      this.services.storageService,\n      this.services.specializationService,\n      this.services.categoryMappingService\n    );\n\n    // Module service (now includes IHK modules with specialization filtering)\n    this.services.moduleService = new ModuleService(\n      this.services.stateManager,\n      this.services.storageService,\n      this.services.ihkContentService,\n      this.services.specializationService\n    );\n\n    // Quiz service (now includes IHK quizzes with specialization filtering)\n    this.services.quizService = new QuizService(\n      this.services.stateManager,\n      this.services.storageService,\n      this.services.ihkContentService,\n      this.services.specializationService\n    );\n\n    // Progress service\n    this.services.progressService = new ProgressService(\n      this.services.stateManager,\n      this.services.storageService,\n      this.services.moduleService,\n      this.services.quizService\n    );\n\n    // Exam Progress service\n    this.services.examProgressService = new ExamProgressService(\n      this.services.stateManager,\n      this.services.storageService\n    );\n  }\n\n  /**\n   * Load initial data from storage or use defaults\n   */\n  async loadInitialData() {\n    // Try to load state from storage\n    this.services.stateManager.loadFromStorage();\n\n    // Check if we have modules data\n    let modules = this.services.stateManager.getState('modules');\n    if (!modules || modules.length === 0) {\n      // Load default modules\n      this.services.stateManager.setState('modules', modulesData);\n    }\n\n    // Note: Quizzes are now loaded from IHK system via IHKContentService\n    // No need to initialize quiz data here\n\n    // Initialize progress if not exists\n    let progress = this.services.stateManager.getState('progress');\n    if (!progress) {\n      this.services.stateManager.setState('progress', {\n        modulesCompleted: [],\n        modulesInProgress: [],\n        quizAttempts: [],\n        lastActivity: new Date().toISOString(),\n      });\n    }\n\n    // Migrate existing users to have a default specialization\n    this.services.specializationService.migrateExistingUser(\n      'anwendungsentwicklung'\n    );\n\n    // Save initial state\n    this.services.stateManager.saveToStorage();\n  }\n\n  /**\n   * Initialize theme based on saved preference or system default\n   */\n  initializeTheme() {\n    // Initialize the theme manager first\n    this.services.themeManager.init();\n\n    // Start watching for system preference changes\n    this.services.themeManager.watchSystemPreference();\n  }\n\n  /**\n   * Initialize specialization selection for first-time users\n   */\n  async initializeSpecializationSelection() {\n    try {\n      // Always create specialization selector (needed for navigation)\n      this.specializationSelector = new SpecializationSelector(\n        this.services.specializationService,\n        specializationId => {\n          // Handle specialization selection\n          this.handleSpecializationSelection(specializationId);\n        }\n      );\n\n      // Initialize the selector (this will show the modal for first-time users)\n      await this.specializationSelector.init();\n    } catch (error) {\n      console.error('Error initializing specialization selection:', error);\n    }\n  }\n\n  /**\n   * Handle specialization selection from the selector\n   */\n  handleSpecializationSelection(specializationId) {\n    try {\n      // Update navigation if it exists\n      if (this.navigation) {\n        this.navigation.updateSpecialization(specializationId);\n      }\n\n      // Refresh current view to show relevant content\n      if (this.services.router) {\n        this.services.router.refresh();\n      }\n\n      // Save state\n      this.services.stateManager.saveToStorage();\n\n      console.warn(`Specialization selected: ${specializationId}`);\n    } catch (error) {\n      console.error('Error handling specialization selection:', error);\n    }\n  }\n\n  /**\n   * Create navigation component\n   */\n  createNavigation() {\n    this.navigation = new Navigation(\n      this.services.themeManager,\n      this.services.router,\n      this.services.specializationService,\n      this.specializationSelector\n    );\n    const appContainer = document.getElementById('app');\n    const mainContent = document.getElementById('main-content');\n    const navElement = this.navigation.render();\n\n    // Insert navigation before main content\n    appContainer.insertBefore(navElement, mainContent);\n  }\n\n  /**\n   * Register all application routes\n   */\n  registerRoutes() {\n    const router = this.services.router;\n\n    // Wrap all routes with error boundary\n    // Home route\n    router.register(\n      '/',\n      ErrorBoundary.wrap(async () => {\n        const view = new HomeView(this.services);\n        return await view.render();\n      })\n    );\n\n    // Modules list route\n    router.register(\n      '/modules',\n      ErrorBoundary.wrap(async () => {\n        const view = new ModuleListView(this.services);\n        return await view.render();\n      })\n    );\n\n    // Module detail route\n    router.register(\n      '/modules/:id',\n      ErrorBoundary.wrap(async params => {\n        const view = new ModuleDetailView(this.services, params);\n        return await view.render();\n      })\n    );\n\n    // Quizzes list route (using IHK component for all quizzes)\n    router.register(\n      '/quizzes',\n      ErrorBoundary.wrap(async () => {\n        const view = new IHKQuizListView(this.services);\n        return await view.render();\n      })\n    );\n\n    // Quiz detail route (using IHK component for all quizzes)\n    router.register(\n      '/quizzes/:id',\n      ErrorBoundary.wrap(async params => {\n        const view = new IHKQuizView(this.services);\n        return await view.render(params.id);\n      })\n    );\n\n    // Debug assessment demo route (non-production)\n    router.register(\n      '/assessment-demo',\n      ErrorBoundary.wrap(async () => {\n        const main = document.getElementById('main-content');\n        // Lazy import to avoid bundle cost in production\n        const { default: MicroQuizPanel } = await import(\n          './assessment/components/MicroQuizPanel.js'\n        );\n        const demoContainer = document.createElement('div');\n        demoContainer.id = 'assessment-demo-container';\n        main.appendChild(demoContainer);\n        const panel = new MicroQuizPanel(demoContainer);\n        // Create a minimal quiz fixture\n        const fixture = {\n          id: 'demo-quiz-1',\n          title: 'Demo Micro-Quiz',\n          questions: [\n            {\n              id: 'q1',\n              type: 'single-choice',\n              question: 'Pick A',\n              options: ['A', 'B'],\n              correctAnswer: 'A',\n            },\n          ],\n        };\n        panel.render(fixture);\n        return demoContainer;\n      })\n    );\n\n    // Progress route\n    router.register(\n      '/progress',\n      ErrorBoundary.wrap(async () => {\n        const view = new ProgressView(this.services);\n        return await view.render();\n      })\n    );\n\n    // Wheel route - random module selector\n    router.register(\n      '/wheel',\n      ErrorBoundary.wrap(async () => {\n        const view = new WheelView(this.services);\n        return await view.render();\n      })\n    );\n\n    // Note: IHK content is now seamlessly integrated into the regular modules and quizzes views\n    // No separate IHK routes needed - all content is accessible through /modules and /quizzes\n\n    // Register 404 handler\n    router.registerNotFound(() => {\n      const view = new NotFoundView(this.services);\n      return view.render();\n    });\n  }\n\n  /**\n   * Set up global event listeners\n   */\n  setupGlobalEventListeners() {\n    // Listen for specialization modal requests from navigation\n    document.addEventListener('showSpecializationModal', () => {\n      if (this.specializationSelector) {\n        this.specializationSelector.showSpecializationModal(false);\n      }\n    });\n\n    // Listen for specialization changes to update navigation and refresh content\n    document.addEventListener('specialization-changed', event => {\n      if (this.navigation) {\n        this.navigation._updateSpecializationIndicator();\n      }\n\n      // Refresh current view to show filtered content\n      if (this.services.router) {\n        this.services.router.refresh();\n      }\n    });\n  }\n\n  /**\n   * Set up global error handling\n   */\n  setupErrorHandling() {\n    // Handle uncaught errors\n    window.addEventListener('error', event => {\n      console.error('Uncaught error:', event.error);\n      toastNotification.error(\n        'An unexpected error occurred. Please refresh the page.'\n      );\n      event.preventDefault();\n    });\n\n    // Handle unhandled promise rejections\n    window.addEventListener('unhandledrejection', event => {\n      console.error('Unhandled promise rejection:', event.reason);\n      toastNotification.error(\n        'An unexpected error occurred. Please try again or refresh the page.'\n      );\n      event.preventDefault();\n    });\n\n    // Handle storage quota errors globally\n    window.addEventListener('storage', _event => {\n      if (_event.key === null) {\n        // Storage was cleared\n        toastNotification.warning(\n          'Storage was cleared. Your progress may be lost.'\n        );\n      }\n    });\n\n    // Handle storage quota warnings\n    window.addEventListener('storage-quota-warning', _event => {\n      toastNotification.warning(\n        'Storage is almost full. Only essential progress was saved.',\n        {\n          duration: 10000,\n          action: {\n            label: 'Export Progress',\n            onClick: () => {\n              window.location.hash = '#/progress';\n            },\n          },\n        }\n      );\n    });\n\n    // Handle storage quota errors\n    window.addEventListener('storage-quota-error', event => {\n      toastNotification.handleStorageError(event.detail.error);\n    });\n  }\n\n  /**\n   * Show fatal error screen\n   */\n  showFatalError(error) {\n    const appContainer = document.getElementById('app');\n    appContainer.innerHTML = `\n      <div style=\"\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n        min-height: 100vh;\n        padding: 2rem;\n        text-align: center;\n      \">\n        <h1 style=\"font-size: 2rem; margin-bottom: 1rem; color: #ef4444;\">\n          ⚠️ Application Error\n        </h1>\n        <p style=\"margin-bottom: 2rem; color: #6b7280;\">\n          We're sorry, but something went wrong. Please try refreshing the page.\n        </p>\n        <button \n          onclick=\"window.location.reload()\" \n          style=\"\n            padding: 0.75rem 1.5rem;\n            background: #3b82f6;\n            color: white;\n            border: none;\n            border-radius: 0.5rem;\n            cursor: pointer;\n            font-size: 1rem;\n          \"\n        >\n          Refresh Page\n        </button>\n        <details style=\"margin-top: 2rem; text-align: left; max-width: 600px;\">\n          <summary style=\"cursor: pointer; color: #6b7280;\">Error Details</summary>\n          <pre style=\"\n            margin-top: 1rem;\n            padding: 1rem;\n            background: #f3f4f6;\n            border-radius: 0.5rem;\n            overflow: auto;\n            font-size: 0.875rem;\n          \">${error.stack || error.message}</pre>\n        </details>\n      </div>\n    `;\n  }\n}\n\n// Initialize and start the application\nconst app = new App();\napp.init();\n\nexport default app;\n"],"file":"assets/js/index-DN8UsXB3.js"}